<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鉴心</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/child/"/>
  <updated>2017-03-26T12:15:17.520Z</updated>
  <id>http://yoursite.com/child/</id>
  
  <author>
    <name>YangYi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis源码阅读-链表</title>
    <link href="http://yoursite.com/child//blog/2017/03/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E9%93%BE%E8%A1%A8.html"/>
    <id>http://yoursite.com/child//blog/2017/03/redis源码阅读-链表.html</id>
    <published>2017-03-26T12:14:40.000Z</published>
    <updated>2017-03-26T12:15:17.520Z</updated>
    
    <content type="html"><![CDATA[<p>C语言程序由于没有标准库的存在，各种造轮子。Redis为了满足需求，同样写了一个链表。</p>
<p>实现文件在adlist.h/adlist.c中。</p>
<h2 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h2><p>和普通的C写的双向链表差不多。没有什么特点。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> listNode &#123;</div><div class="line">    <span class="keyword">struct</span> listNode *prev; <span class="comment">// 前节点</span></div><div class="line">    <span class="keyword">struct</span> listNode *next; <span class="comment">// 后节点</span></div><div class="line">    <span class="keyword">void</span> *value; <span class="comment">// 值</span></div><div class="line">&#125; listNode;</div><div class="line"></div><div class="line"><span class="comment">// 迭代器</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> listIter &#123;</div><div class="line">    listNode *next;<span class="comment">// 下一个节点</span></div><div class="line">    <span class="keyword">int</span> direction;<span class="comment">// 方向</span></div><div class="line">&#125; listIter;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="built_in">list</span> &#123;</div><div class="line">    listNode *head; <span class="comment">// 头</span></div><div class="line">    listNode *tail; <span class="comment">// 尾</span></div><div class="line">    <span class="keyword">void</span> *(*dup)(<span class="keyword">void</span> *ptr); <span class="comment">// 自定义节点复制函数</span></div><div class="line">    <span class="keyword">void</span> (*<span class="built_in">free</span>)(<span class="keyword">void</span> *ptr); <span class="comment">// 自定义节点释放函数</span></div><div class="line">    <span class="keyword">int</span> (*match)(<span class="keyword">void</span> *ptr, <span class="keyword">void</span> *key); <span class="comment">// 自定义节点匹配函数</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len; <span class="comment">// 链表长度</span></div><div class="line">&#125; <span class="built_in">list</span>;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h3><p>定义了一些快速操作的宏</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/* Functions implemented as macros */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> listLength(l) ((l)-&gt;len) <span class="comment">// 获取list长度</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> listFirst(l) ((l)-&gt;head) <span class="comment">// 获取list头节点指针</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> listLast(l) ((l)-&gt;tail) <span class="comment">// 获取list尾节点指针</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> listPrevNode(n) ((n)-&gt;prev) <span class="comment">// 获取当前节点前一个节点</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> listNextNode(n) ((n)-&gt;next) <span class="comment">// 获取当前节点后一个节点</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> listNodeValue(n) ((n)-&gt;value) <span class="comment">// 获取当前节点的值</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> listSetDupMethod(l,m) ((l)-&gt;dup = (m)) <span class="comment">// 设定节点值复制函数</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> listSetFreeMethod(l,m) ((l)-&gt;free = (m)) <span class="comment">// 设定节点值释放函数</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> listSetMatchMethod(l,m) ((l)-&gt;match = (m)) <span class="comment">// 设定节点值匹配函数</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> listGetDupMethod(l) ((l)-&gt;dup) <span class="comment">// 获取节点值赋值函数</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> listGetFree(l) ((l)-&gt;free) <span class="comment">// 获取节点值释放函数</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> listGetMatchMethod(l) ((l)-&gt;match) <span class="comment">// 获取节点值匹配函数</span></span></div></pre></td></tr></table></figure>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>都是些链表常用的API，比较有特点的是迭代器的C语言实现。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Prototypes */</span></div><div class="line"><span class="function"><span class="built_in">list</span> *<span class="title">listCreate</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">listRelease</span><span class="params">(<span class="built_in">list</span> *<span class="built_in">list</span>)</span></span>;</div><div class="line"><span class="function"><span class="built_in">list</span> *<span class="title">listAddNodeHead</span><span class="params">(<span class="built_in">list</span> *<span class="built_in">list</span>, <span class="keyword">void</span> *value)</span></span>;</div><div class="line"><span class="function"><span class="built_in">list</span> *<span class="title">listAddNodeTail</span><span class="params">(<span class="built_in">list</span> *<span class="built_in">list</span>, <span class="keyword">void</span> *value)</span></span>;</div><div class="line"><span class="function"><span class="built_in">list</span> *<span class="title">listInsertNode</span><span class="params">(<span class="built_in">list</span> *<span class="built_in">list</span>, listNode *old_node, <span class="keyword">void</span> *value, <span class="keyword">int</span> after)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">listDelNode</span><span class="params">(<span class="built_in">list</span> *<span class="built_in">list</span>, listNode *node)</span></span>;</div><div class="line"><span class="function">listIter *<span class="title">listGetIterator</span><span class="params">(<span class="built_in">list</span> *<span class="built_in">list</span>, <span class="keyword">int</span> direction)</span></span>;</div><div class="line"><span class="function">listNode *<span class="title">listNext</span><span class="params">(listIter *iter)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">listReleaseIterator</span><span class="params">(listIter *iter)</span></span>;</div><div class="line"><span class="function"><span class="built_in">list</span> *<span class="title">listDup</span><span class="params">(<span class="built_in">list</span> *orig)</span></span>;</div><div class="line"><span class="function">listNode *<span class="title">listSearchKey</span><span class="params">(<span class="built_in">list</span> *<span class="built_in">list</span>, <span class="keyword">void</span> *key)</span></span>;</div><div class="line"><span class="function">listNode *<span class="title">listIndex</span><span class="params">(<span class="built_in">list</span> *<span class="built_in">list</span>, <span class="keyword">long</span> index)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">listRewind</span><span class="params">(<span class="built_in">list</span> *<span class="built_in">list</span>, listIter *li)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">listRewindTail</span><span class="params">(<span class="built_in">list</span> *<span class="built_in">list</span>, listIter *li)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">listRotate</span><span class="params">(<span class="built_in">list</span> *<span class="built_in">list</span>)</span></span>;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言程序由于没有标准库的存在，各种造轮子。Redis为了满足需求，同样写了一个链表。&lt;/p&gt;
&lt;p&gt;实现文件在adlist.h/adlist.c中。&lt;/p&gt;
&lt;h2 id=&quot;结构体定义&quot;&gt;&lt;a href=&quot;#结构体定义&quot; class=&quot;headerlink&quot; title=&quot;结构体定义&quot;&gt;&lt;/a&gt;结构体定义&lt;/h2&gt;&lt;p&gt;和普通的C写的双向链表差不多。没有什么特点。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; listNode &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; listNode *prev; &lt;span class=&quot;comment&quot;&gt;// 前节点&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; listNode *next; &lt;span class=&quot;comment&quot;&gt;// 后节点&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *value; &lt;span class=&quot;comment&quot;&gt;// 值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; listNode;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 迭代器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; listIter &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    listNode *next;&lt;span class=&quot;comment&quot;&gt;// 下一个节点&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; direction;&lt;span class=&quot;comment&quot;&gt;// 方向&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; listIter;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    listNode *head; &lt;span class=&quot;comment&quot;&gt;// 头&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    listNode *tail; &lt;span class=&quot;comment&quot;&gt;// 尾&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *(*dup)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *ptr); &lt;span class=&quot;comment&quot;&gt;// 自定义节点复制函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *ptr); &lt;span class=&quot;comment&quot;&gt;// 自定义节点释放函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (*match)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *ptr, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *key); &lt;span class=&quot;comment&quot;&gt;// 自定义节点匹配函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; len; &lt;span class=&quot;comment&quot;&gt;// 链表长度&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="源码阅读" scheme="http://yoursite.com/child/categories/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/child/tags/redis/"/>
    
      <category term="源码阅读" scheme="http://yoursite.com/child/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>redis源码阅读-动态字符串sds</title>
    <link href="http://yoursite.com/child//blog/2017/03/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2sds.html"/>
    <id>http://yoursite.com/child//blog/2017/03/redis源码阅读-动态字符串sds.html</id>
    <published>2017-03-26T11:45:58.000Z</published>
    <updated>2017-03-26T11:49:53.240Z</updated>
    
    <content type="html"><![CDATA[<p>Redis没有使用c语言的字符串结构，自己设计了一个简单的动态字符串。特点是：修改时大小不足则扩容，大小足够直接使用不缩小。末尾使用‘\0’，与c语言字符串兼容。</p>
<p>sds的源代码在sds.h与sds.c中。</p>
<h2 id="sds的定义"><a href="#sds的定义" class="headerlink" title="sds的定义"></a>sds的定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> *sds;<span class="comment">// 兼容C</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> sdshdr &#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> len;<span class="comment">// 字符串长度</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">free</span>;<span class="comment">// 未分配的空间</span></div><div class="line">    <span class="keyword">char</span> buf[];<span class="comment">// 末尾'/0'的C风格字符串</span></div><div class="line">&#125;;<span class="comment">// SDS的实际结构，兼容char*则返回buf地址</span></div></pre></td></tr></table></figure>
<h2 id="SDS这样设计的优点："><a href="#SDS这样设计的优点：" class="headerlink" title="SDS这样设计的优点："></a>SDS这样设计的优点：</h2><ol>
<li>重用部分C字符串库函数的函数。</li>
<li>在常数复杂度的情况下获取字符串长度(以下代码)。</li>
<li>杜绝缓冲区溢出，通过获取空余空间函数，来进行处理(sdscat函数)。</li>
<li>减少字符串内存的重分配。不足则分配更大的空间，足够也不减少空间，而是记录新的len、free值。</li>
<li>二进制兼容。C字符串以空字符结尾，而某些二进制数据中间可能存在空字符。SDS兼容该种数据。</li>
</ol>
<a id="more"></a>
<h2 id="SDS-API"><a href="#SDS-API" class="headerlink" title="SDS API"></a>SDS API</h2><h3 id="获取长度"><a href="#获取长度" class="headerlink" title="获取长度"></a>获取长度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 获取字符串长度</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> size_t <span class="title">sdslen</span><span class="params">(<span class="keyword">const</span> sds s)</span> </span>&#123;</div><div class="line">    <span class="keyword">struct</span> sdshdr *sh = (<span class="keyword">void</span>*)(s-(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)));</div><div class="line">    <span class="keyword">return</span> sh-&gt;len;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取空余空间</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> size_t <span class="title">sdsavail</span><span class="params">(<span class="keyword">const</span> sds s)</span> </span>&#123;</div><div class="line">    <span class="keyword">struct</span> sdshdr *sh = (<span class="keyword">void</span>*)(s-(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)));</div><div class="line">    <span class="keyword">return</span> sh-&gt;<span class="built_in">free</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="SDS创建"><a href="#SDS创建" class="headerlink" title="SDS创建"></a>SDS创建</h3><p>有两个函数，一个定长创建，一个是不定长创建。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function">sds <span class="title">sdsnewlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *init, <span class="keyword">size_t</span> initlen)</span> </span>&#123;</div><div class="line">    <span class="keyword">struct</span> sdshdr *sh;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (init) &#123;</div><div class="line">        <span class="comment">//为空则使用malloc</span></div><div class="line">        sh = zmalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)+initlen+<span class="number">1</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//不为空使用calloc分配</span></div><div class="line">        sh = zcalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)+initlen+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (sh == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">// 分配失败处理</span></div><div class="line">    <span class="comment">//设定sds的参数</span></div><div class="line">    sh-&gt;len = initlen;</div><div class="line">    sh-&gt;<span class="built_in">free</span> = <span class="number">0</span>;</div><div class="line">    <span class="comment">//值的复制</span></div><div class="line">    <span class="keyword">if</span> (initlen &amp;&amp; init)</div><div class="line">        <span class="built_in">memcpy</span>(sh-&gt;buf, init, initlen);</div><div class="line">    sh-&gt;buf[initlen] = <span class="string">'\0'</span>;<span class="comment">// 尾部结束符</span></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">char</span>*)sh-&gt;buf;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 复制一个char*</span></div><div class="line"><span class="function">sds <span class="title">sdsnew</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *init)</span> </span>&#123;</div><div class="line">    <span class="keyword">size_t</span> initlen = (init == <span class="literal">NULL</span>) ? <span class="number">0</span> : <span class="built_in">strlen</span>(init);</div><div class="line">    <span class="keyword">return</span> sdsnewlen(init, initlen);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 生成一个空sd</span></div><div class="line"><span class="function">sds <span class="title">sdsempty</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sdsnewlen(<span class="string">""</span>,<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 复制一个sds</span></div><div class="line"><span class="function">sds <span class="title">sdsdup</span><span class="params">(<span class="keyword">const</span> sds s)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sdsnewlen(s, sdslen(s));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="sds释放函数"><a href="#sds释放函数" class="headerlink" title="sds释放函数"></a>sds释放函数</h3><p>先获取sdshdr的首地址，使用zfree释放。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsfree</span><span class="params">(sds s)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">  	<span class="comment">// 获取真实首地址释放</span></div><div class="line">    zfree(s-<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="sds动态空间调整"><a href="#sds动态空间调整" class="headerlink" title="sds动态空间调整"></a>sds动态空间调整</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 空间增长</span></div><div class="line"><span class="function">sds <span class="title">sdsMakeRoomFor</span><span class="params">(sds s, <span class="keyword">size_t</span> addlen)</span> </span>&#123;</div><div class="line">    <span class="keyword">struct</span> sdshdr *sh, *newsh;</div><div class="line">    <span class="keyword">size_t</span> <span class="built_in">free</span> = sdsavail(s);</div><div class="line">    <span class="keyword">size_t</span> len, newlen;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">free</span> &gt;= addlen) <span class="keyword">return</span> s;<span class="comment">// 空间足够直接返回</span></div><div class="line">    len = sdslen(s);</div><div class="line">    sh = (<span class="keyword">void</span>*) (s-(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)));</div><div class="line">    newlen = (len+addlen);<span class="comment">// 新的长度</span></div><div class="line">    <span class="keyword">if</span> (newlen &lt; SDS_MAX_PREALLOC)<span class="comment">// 不足1MB直接翻倍分配</span></div><div class="line">        newlen *= <span class="number">2</span>;</div><div class="line">    <span class="keyword">else</span><span class="comment">// 超过1MB，多分配1MB空余空间</span></div><div class="line">        newlen += SDS_MAX_PREALLOC;</div><div class="line">    newsh = zrealloc(sh, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)+newlen+<span class="number">1</span>);<span class="comment">// 分配空间</span></div><div class="line">    <span class="keyword">if</span> (newsh == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 分配失败</span></div><div class="line">    <span class="comment">// 设置参数</span></div><div class="line">    newsh-&gt;<span class="built_in">free</span> = newlen - len;</div><div class="line">    <span class="keyword">return</span> newsh-&gt;buf;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 空间的重分配</span></div><div class="line"><span class="function">sds <span class="title">sdsRemoveFreeSpace</span><span class="params">(sds s)</span> </span>&#123;</div><div class="line">    <span class="keyword">struct</span> sdshdr *sh;</div><div class="line"></div><div class="line">    sh = (<span class="keyword">void</span>*) (s-(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)));</div><div class="line">    sh = zrealloc(sh, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)+sh-&gt;len+<span class="number">1</span>);</div><div class="line">    sh-&gt;<span class="built_in">free</span> = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> sh-&gt;buf;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="sds连接操作"><a href="#sds连接操作" class="headerlink" title="sds连接操作"></a>sds连接操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function">sds <span class="title">sdscatlen</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">void</span> *t, <span class="keyword">size_t</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">struct</span> sdshdr *sh;</div><div class="line">    <span class="keyword">size_t</span> curlen = sdslen(s); <span class="comment">// 获取字符串长度</span></div><div class="line"></div><div class="line">    s = sdsMakeRoomFor(s,len);<span class="comment">// 扩展字符串</span></div><div class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    sh = (<span class="keyword">void</span>*) (s-(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)));</div><div class="line">    <span class="built_in">memcpy</span>(s+curlen, t, len);<span class="comment">// 连接字符串到末尾</span></div><div class="line">    sh-&gt;len = curlen+len;<span class="comment">// 设置长度</span></div><div class="line">    sh-&gt;<span class="built_in">free</span> = sh-&gt;<span class="built_in">free</span>-len;</div><div class="line">    s[curlen+len] = <span class="string">'\0'</span>;<span class="comment">// 设置尾部</span></div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">sds <span class="title">sdscat</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *t)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sdscatlen(s, t, <span class="built_in">strlen</span>(t));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="sds复制"><a href="#sds复制" class="headerlink" title="sds复制"></a>sds复制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function">sds <span class="title">sdscpylen</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *t, <span class="keyword">size_t</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">struct</span> sdshdr *sh = (<span class="keyword">void</span>*) (s-(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)));</div><div class="line">    <span class="keyword">size_t</span> totlen = sh-&gt;<span class="built_in">free</span>+sh-&gt;len;</div><div class="line"></div><div class="line">    <span class="comment">// 空间不足，分配空间</span></div><div class="line">    <span class="keyword">if</span> (totlen &lt; len) &#123;</div><div class="line">        s = sdsMakeRoomFor(s,len-sh-&gt;len);</div><div class="line">        <span class="keyword">if</span> (s == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        sh = (<span class="keyword">void</span>*) (s-(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)));</div><div class="line">        totlen = sh-&gt;<span class="built_in">free</span>+sh-&gt;len;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 复制</span></div><div class="line">    <span class="built_in">memcpy</span>(s, t, len);</div><div class="line">    s[len] = <span class="string">'\0'</span>;</div><div class="line">    sh-&gt;len = len;</div><div class="line">    sh-&gt;<span class="built_in">free</span> = totlen-len;</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">sds <span class="title">sdscpy</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *t)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sdscpylen(s, t, <span class="built_in">strlen</span>(t));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="一些其他接口"><a href="#一些其他接口" class="headerlink" title="一些其他接口"></a>一些其他接口</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function">sds <span class="title">sdscatfmt</span><span class="params">(sds s, <span class="keyword">char</span> <span class="keyword">const</span> *fmt, ...)</span></span>;<span class="comment">// 格式化输出</span></div><div class="line"><span class="function">sds <span class="title">sdstrim</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *cset)</span></span>; <span class="comment">// 去除cset中所含字符</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsrange</span><span class="params">(sds s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>;<span class="comment">// 获取指定区间字符串</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsupdatelen</span><span class="params">(sds s)</span></span>; <span class="comment">// 更新字符串长度</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsclear</span><span class="params">(sds s)</span></span>; <span class="comment">// 清空字符串</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sdscmp</span><span class="params">(<span class="keyword">const</span> sds s1, <span class="keyword">const</span> sds s2)</span></span>; <span class="comment">// 字符串比较</span></div><div class="line"><span class="comment">// 依据sep将s分割，返回 一个二维数组</span></div><div class="line"><span class="function">sds *<span class="title">sdssplitlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> len, <span class="keyword">const</span> <span class="keyword">char</span> *sep, <span class="keyword">int</span> seplen, <span class="keyword">int</span> *count)</span></span>;</div><div class="line"><span class="comment">// 释放由sdssplitlen函数解析的二维数组 </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsfreesplitres</span><span class="params">(sds *tokens, <span class="keyword">int</span> count)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdstolower</span><span class="params">(sds s)</span></span>; <span class="comment">// 转小写</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdstoupper</span><span class="params">(sds s)</span></span>; <span class="comment">// 转大写</span></div><div class="line"><span class="function">sds <span class="title">sdsfromlonglong</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> value)</span></span>;<span class="comment">// ll转sds</span></div><div class="line"><span class="function">sds <span class="title">sdsjoin</span><span class="params">(<span class="keyword">char</span> **argv, <span class="keyword">int</span> argc, <span class="keyword">char</span> *sep)</span></span>; <span class="comment">// 以分隔符连接字符串子数组构成新的字符串</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis没有使用c语言的字符串结构，自己设计了一个简单的动态字符串。特点是：修改时大小不足则扩容，大小足够直接使用不缩小。末尾使用‘\0’，与c语言字符串兼容。&lt;/p&gt;
&lt;p&gt;sds的源代码在sds.h与sds.c中。&lt;/p&gt;
&lt;h2 id=&quot;sds的定义&quot;&gt;&lt;a href=&quot;#sds的定义&quot; class=&quot;headerlink&quot; title=&quot;sds的定义&quot;&gt;&lt;/a&gt;sds的定义&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *sds;&lt;span class=&quot;comment&quot;&gt;// 兼容C&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sdshdr &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len;&lt;span class=&quot;comment&quot;&gt;// 字符串长度&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;// 未分配的空间&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[];&lt;span class=&quot;comment&quot;&gt;// 末尾&#39;/0&#39;的C风格字符串&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;span class=&quot;comment&quot;&gt;// SDS的实际结构，兼容char*则返回buf地址&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;SDS这样设计的优点：&quot;&gt;&lt;a href=&quot;#SDS这样设计的优点：&quot; class=&quot;headerlink&quot; title=&quot;SDS这样设计的优点：&quot;&gt;&lt;/a&gt;SDS这样设计的优点：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;重用部分C字符串库函数的函数。&lt;/li&gt;
&lt;li&gt;在常数复杂度的情况下获取字符串长度(以下代码)。&lt;/li&gt;
&lt;li&gt;杜绝缓冲区溢出，通过获取空余空间函数，来进行处理(sdscat函数)。&lt;/li&gt;
&lt;li&gt;减少字符串内存的重分配。不足则分配更大的空间，足够也不减少空间，而是记录新的len、free值。&lt;/li&gt;
&lt;li&gt;二进制兼容。C字符串以空字符结尾，而某些二进制数据中间可能存在空字符。SDS兼容该种数据。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="源码阅读" scheme="http://yoursite.com/child/categories/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/child/tags/redis/"/>
    
      <category term="源码阅读" scheme="http://yoursite.com/child/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>读书摘录-程序员的思维方式</title>
    <link href="http://yoursite.com/child//blog/2017/03/%E8%AF%BB%E4%B9%A6%E6%91%98%E5%BD%95-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%80%9D%E7%BB%B4%E6%96%B9%E5%BC%8F.html"/>
    <id>http://yoursite.com/child//blog/2017/03/读书摘录-程序员的思维方式.html</id>
    <published>2017-03-26T04:26:05.000Z</published>
    <updated>2017-03-26T04:58:09.151Z</updated>
    
    <content type="html"><![CDATA[<p>2.2 德雷福斯模型的5个阶段</p>
<p>2017-01-24</p>
<p>但是，如果给新手提供与情境无关的规则去参照，他们就会变得能干起来。也就是说，需要这种形式的规则：“当X发生时，执行Y。”换言之，需要一份指令清单。<br>图2-2　玉米饼食谱，不过你知道需要烹饪多长时间吗<br>这就是呼叫中心的工作原理。你可以雇用一大批对当前技术没有很多经验的人，然后让他们按照一个决策树按部就班地执行下去。</p>
<p>3.3 L型和R型的特征</p>
<p>2017-02-06</p>
<p>事实上，综合是一项非常强大的学习技术，以至于麻省理工学院媒体实验室的尼葛洛庞蒂在Don’t Dissect the Frog, Build It [Neg94]中建议，真正想要了解一只青蛙，传统的解剖不是办法，更好的方式是构造一只青蛙。<br>也就是说，要求学生构造一个具有青蛙特征的生物。这是一种伟大的方式，可以真正了解到，什么使青蛙成之为青蛙，以及青蛙如何适应其特定环境。这是一个综合学习的绝佳例子。</p>
<p>4.4 收获R型线索</p>
<p>2017-02-08</p>
<p>这种方法为什么会起作用？我认为这是因为晨写让毫无防备的大脑倾倒想法。早上刚起床时，你还没有像你想的那样清醒。潜意识仍然占主角。你还没有提起所有防备，也还未适应有限的现实世界。你可以直接连通R型，至少一小会儿。</p>
<p>2017-02-08</p>
<p>你需要培养一种非目标驱动的思维方式。正如庞加莱所做，把一切都写在纸上（或者编辑器中，如果你必须得这么做的话），然后不去管它。不要试图思考。记住它，如布朗所说，不要关注它。只要简单地记住它。让事实和问题自由地搅和、浸泡（我们将在8.2节讨论这一话题）</p>
<a id="more"></a>
<p>4.5 收获模式</p>
<p>2017-02-08</p>
<p>“在开始练习武术之后，我感觉到我的注意力持续时间和控制能力（比如在糟糕的环境下集中注意力）都有了提高。我一直在向软件开发人员和其他知识工作者推荐我的实践经验。它就是气功，它既有武术的一面，也包含太极、冥想和呼吸的方面。</p>
<p>注</p>
<p>跑步应该也行的。</p>
<p>6.2 瞄准SMART目标</p>
<p>2017-03-05</p>
<p>使用SMART方法实现你的目标。<br>在这里，SMART代表具体的、可度量的、可实现的、相关的和时间可控的（Specific, Measurable, Achievable, Relevant, and Time-boxed）。对于任何目标（减肥、炒老板鱿鱼、征服世界等），你都需要制定一个计划，定出一系列帮助你实现目标的任务（objective）。每一个任务都应该具有SMART特性。</p>
<p>6.3 建立一个务实的投资计划</p>
<p>2017-03-05</p>
<p>就像任何投资一样——无论是金融还是艺术上的——都必须时刻进行管理。<br>很多年来，戴维·托马斯（Dave Thomas）和我一直把实用投资计划作为咨询实践的一部分，在这里我简单地介绍一下这些内容。实用投资计划基于一种非常简单但是有效的理念：像管理你的金融投资一样小心管理你的知识投资。</p>
<p>6.4 使用你的原生学习模式</p>
<p>2017-03-05</p>
<p>很多教育家把学习者分为三大类：视觉型、听觉型和动觉型。<br>视觉型学习者需要看到学习资料和老师。图片和图表对视觉型学习者都很有效，他们对肢体语言和面部表情也很敏感。<br>听觉型学习者必须听到学习材料。讲座、研讨会和播客都很有效。他们对语气、语速和其他细节都很敏感。<br>动觉型学习者通过活动和触摸来学习。他们需要亲身感受学习材料。特别是对运动、艺术和<br>工艺等领域，你都需要通过动手来学习。</p>
<p>6.9 利用文档的真正力量</p>
<p>2017-03-05</p>
<p>创建低层次的设计文档，简单地反映代码的细节（几乎很快就会过时）对任何人都没有意义。但是其他形式的文档可能是有价值的，即使没有明确的读者。</p>
<p>6.10 以教代学</p>
<p>2017-03-05</p>
<p>为了省掉你的同事过来，我们建议你在桌子上摆一只黄色橡皮鸭作替身，当你遇到问题时，先和它<br>聊聊。<br>另一种有用的办法是尝试向一个孩子或者你所在领域之外的人解释你的东西。诀窍就是用他们能理解的话语进行解释。这是一个向你的Edna大婶解释你的工作的好机会，也是一个练习从听众角度观察问题并创建隐喻的好机会，这些隐喻有助于解释、阐明你的工作。你可能会在这个过程中惊奇地发现一些新的收获和领悟。</p>
<p>第7章 积累经验</p>
<p>2017-03-05</p>
<p>我们应该小心翼翼地从实践中获得智慧并适可而止，否则我们就会像不慎坐在热炉子上的猫一样，它再也不会坐在热炉子上——这还好，但是它也再也不会坐在冷炉子上。<br>——马克·吐温</p>
<p>7.3 正确对待实践中的失败</p>
<p>2017-03-05</p>
<p>你可以在公司范围之外尝试，比如在家里做开源项目。这起码会减少产生负面结果的风险。但是仅仅这样不足以为你建立一个积极的学习环境。不论是在公司团队还是在黑夜里偷偷进行的独自实验，你都需要做到以下几点。</p>
<p>7.4 了解内在诀窍</p>
<p>2017-03-05</p>
<p>在采取纠正行动之前完全知道“这是什么”对于调试非常重要。太多程序员（包括我自己）往往在没有完全明白真正的错误是什么之前就着急修正它。匆忙地作出判断或者过早地进行修补。你需要首先完全明白系统的原理，然后再判断哪部分错了，最后提供解决方案。也就说，不要动手做，而是要袖手旁观。琼·金姆介绍下述方法来帮助大家充分了解。</p>
<p>8.2 通过分散注意力来集中注意力</p>
<p>2017-03-05</p>
<p>怎么区分你是在浸泡思想还是在拖延、浪费时间呢？<br>我总是把拖延称为“做纸娃娃”。一个密友（姓名保密）第二天有一门重要的考试，但是前一天晚上，她并不学习，而是坐在沙发上剪纸娃娃。当时这在我看来就是典型的耗费时间：一个无关的非生产性的活动阻碍了你需要做的真正工作。<br>但也许我错了。也许这不是拖延。这是一个高级触觉练习，也许是她浸泡思想的方法。她通过了测验并以优异成绩毕业。<br>如果某个任务你真的不想做，那么任何分散注意力的努力都很可能只是耗费时间。如果你仍然有兴趣，但感觉“困难”，那么思想其实是在继<br>续发酵，这当然没问题。</p>
<p>8.6 保持足够大的情境</p>
<p>2017-03-05</p>
<p>事实上，保持情境中任务相关的东西很有益处。不论你如何衡量生产力，仅仅多使用一台显示器就可以让你的生产力提升20%~30%。<br>这是为什么？<br>适合你的不是桌面隐喻，而是Frederick Brooks在几年前描述的拥挤的飞机座位隐喻。在一个大桌面上，你可以展开你的工作，看到你在做什么——同时看到所有的。在拥挤的飞机座位上，你没有足够的空间同时看两份以上的文档（或者文档的一部分）。你必须来回地切换文档。<br>我敢打赌，让你去Staples或者Office Depot等办公用品店寻找一张17英寸的办公桌，你找不到，因为这个尺寸实在是太小了。然而，大多数显示器都是17到21英寸。这点空间就是我们办公的地方。你不得不在活动窗口和应用程序之间切换，因为你无法在如此小的空间里保持足够的情境。<br>你知道Alt-Tab组合键（Mac上的Command-Tab）称为什么吗?情境切换。正如我们看到的，情景切换扼杀生产力。即使是类似使用Alt-Tab切换不同窗口的小动作也会花费时间、短期记忆力和精力。</p>
<p>2017-03-05</p>
<p>在最先进的操作系统上你可以使用虚拟桌面切换器，允许你拥有很多不同的屏幕，你可以使用特殊键随意切换。每一个屏幕都是独立的，称为工作空间。秘诀在于你如何在工作空间中分配应用。</p>
<p>9.2 明天上午做什么</p>
<p>2017-03-05</p>
<p>现在就开始吧！你选择开始做什么并不特别重要，重要的是主动尝试本书中提到的知识，这是你明天一大早要做的第一件事。<br>下面是对第一步的一些建议。<br>开始承担责任，不要害怕问“为什么”，也不要害怕问“你怎么知道的”或者“我怎么知道的”，同样要大方地回答“我目前还不知道”。<br>挑两件帮助你维持情境、免受干扰的事情，立即实施。<br>创建一个实用投资计划，设定SMART目标。<br>弄清楚你在所属专业领域中所处的位置（从新手到专家）和你期望的位置。保证诚实。你需要更多的诀窍还是更多的情境？更多规则还是更多直觉？<br>实践。某段代码遇到问题了吗？尝试用五种不同的方式编写。<br>允许犯更多错误——错误是许可的，要从中学习教训。<br>携带一个笔记本（最好不带横线）。涂鸦，做思维导图，记笔记。让你的思想自由地流动。<br>打开心扉接收美感和其他的感官输入。不论是<br>你的房间、桌面还是代码，关注它们是多么地赏心悦目。<br>开始在私人wiki上记录你感兴趣的事情。<br>开始写博客。为你读过的书写评论。阅读更多书，你会有更多可写的东西。使用SQ3R和思维导图。<br>让散步成为你每天生活的一部分。<br>启动一个读书小组。<br>再拿一个显示器，开始使用虚拟桌面。<br>回顾每章的“实践单元”，尝试去做。</p>
<p>9.3 超越专家</p>
<p>2017-03-05</p>
<p>达芬奇在600年前抱怨说：“人们看却没有看见，听却没有听见，吃却没有味觉，接触却没有触觉，说话却没有思考。”</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2.2 德雷福斯模型的5个阶段&lt;/p&gt;
&lt;p&gt;2017-01-24&lt;/p&gt;
&lt;p&gt;但是，如果给新手提供与情境无关的规则去参照，他们就会变得能干起来。也就是说，需要这种形式的规则：“当X发生时，执行Y。”换言之，需要一份指令清单。&lt;br&gt;图2-2　玉米饼食谱，不过你知道需要烹饪多长时间吗&lt;br&gt;这就是呼叫中心的工作原理。你可以雇用一大批对当前技术没有很多经验的人，然后让他们按照一个决策树按部就班地执行下去。&lt;/p&gt;
&lt;p&gt;3.3 L型和R型的特征&lt;/p&gt;
&lt;p&gt;2017-02-06&lt;/p&gt;
&lt;p&gt;事实上，综合是一项非常强大的学习技术，以至于麻省理工学院媒体实验室的尼葛洛庞蒂在Don’t Dissect the Frog, Build It [Neg94]中建议，真正想要了解一只青蛙，传统的解剖不是办法，更好的方式是构造一只青蛙。&lt;br&gt;也就是说，要求学生构造一个具有青蛙特征的生物。这是一种伟大的方式，可以真正了解到，什么使青蛙成之为青蛙，以及青蛙如何适应其特定环境。这是一个综合学习的绝佳例子。&lt;/p&gt;
&lt;p&gt;4.4 收获R型线索&lt;/p&gt;
&lt;p&gt;2017-02-08&lt;/p&gt;
&lt;p&gt;这种方法为什么会起作用？我认为这是因为晨写让毫无防备的大脑倾倒想法。早上刚起床时，你还没有像你想的那样清醒。潜意识仍然占主角。你还没有提起所有防备，也还未适应有限的现实世界。你可以直接连通R型，至少一小会儿。&lt;/p&gt;
&lt;p&gt;2017-02-08&lt;/p&gt;
&lt;p&gt;你需要培养一种非目标驱动的思维方式。正如庞加莱所做，把一切都写在纸上（或者编辑器中，如果你必须得这么做的话），然后不去管它。不要试图思考。记住它，如布朗所说，不要关注它。只要简单地记住它。让事实和问题自由地搅和、浸泡（我们将在8.2节讨论这一话题）&lt;/p&gt;
    
    </summary>
    
      <category term="摘录" scheme="http://yoursite.com/child/categories/%E6%91%98%E5%BD%95/"/>
    
    
      <category term="杂谈" scheme="http://yoursite.com/child/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>redis源码阅读-内存分配</title>
    <link href="http://yoursite.com/child//blog/2017/03/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.html"/>
    <id>http://yoursite.com/child//blog/2017/03/redis源码阅读-内存分配.html</id>
    <published>2017-03-21T02:21:33.000Z</published>
    <updated>2017-03-21T02:26:10.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis源码阅读-内存分配"><a href="#redis源码阅读-内存分配" class="headerlink" title="redis源码阅读-内存分配"></a>redis源码阅读-内存分配</h1><p>redis的内存分配主要就是对malloc和free进行了一层简单的封装。具体的实现在zmalloc.h和zmalloc.c中。</p>
<h2 id="内存分配器的选择"><a href="#内存分配器的选择" class="headerlink" title="内存分配器的选择"></a>内存分配器的选择</h2><p>redis支持多种内存分配器，可以选择的分配器tcmalloc、jemalloc、dlmalloc、malloc/malloc.h(apple)，这几个分配器自带内存大小的记录。如果不进行设置，则默认使用malloc进行分配。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// zmalloc.h</span></div><div class="line"><span class="comment">// 选择使用的内存分配器，分别为tcmalloc、jemalloc、dlmalloc、malloc/malloc.h</span></div><div class="line"><span class="comment">// 同时设置HAVE_MALLOC_SIZE为真，内存分配器自带大小统计。</span></div><div class="line"><span class="comment">// 如果不选择内存分配器，则使用默认的malloc，同时同时设置HAVE_MALLOC_SIZE为假。</span></div><div class="line"><span class="comment">// 指定zmalloc_size</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(USE_TCMALLOC)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZMALLOC_LIB (<span class="meta-string">"tcmalloc-"</span> __xstr(TC_VERSION_MAJOR) <span class="meta-string">"."</span> __xstr(TC_VERSION_MINOR))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;google/tcmalloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (TC_VERSION_MAJOR == 1 &amp;&amp; TC_VERSION_MINOR &gt;= 6) || (TC_VERSION_MAJOR &gt; 1)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> HAVE_MALLOC_SIZE 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> zmalloc_size(p) tc_malloc_size(p)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">error</span> <span class="meta-string">"Newer version of tcmalloc required"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(USE_JEMALLOC)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZMALLOC_LIB (<span class="meta-string">"jemalloc-"</span> __xstr(JEMALLOC_VERSION_MAJOR) <span class="meta-string">"."</span> __xstr(JEMALLOC_VERSION_MINOR) <span class="meta-string">"."</span> __xstr(JEMALLOC_VERSION_BUGFIX))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jemalloc/jemalloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (JEMALLOC_VERSION_MAJOR == 2 &amp;&amp; JEMALLOC_VERSION_MINOR &gt;= 1) || (JEMALLOC_VERSION_MAJOR &gt; 2)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> HAVE_MALLOC_SIZE 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> zmalloc_size(p) je_malloc_usable_size(p)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">error</span> <span class="meta-string">"Newer version of jemalloc required"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__APPLE__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc/malloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> HAVE_MALLOC_SIZE 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> zmalloc_size(p) malloc_size(p)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(USE_DLMALLOC)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Win32_Interop/win32_dlmalloc.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZMALLOC_LIB (<span class="meta-string">"dlmalloc-"</span> __xstr(2) <span class="meta-string">"."</span> __xstr(8) )</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> HAVE_MALLOC_SIZE 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> zmalloc_size(p)  g_msize(p)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ZMALLOC_LIB</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZMALLOC_LIB <span class="meta-string">"libc"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">// zmalloc.c</span></div><div class="line"><span class="comment">// 依据选择的内存分配器，设定好宏定义，否则使用系统默认分配。</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(USE_TCMALLOC)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> malloc(size) tc_malloc(size)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> calloc(count,size) tc_calloc(count,size)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> realloc(ptr,size) tc_realloc(ptr,size)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> free(ptr) tc_free(ptr)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(USE_JEMALLOC)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> malloc(size) je_malloc(size)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> calloc(count,size) je_calloc(count,size)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> realloc(ptr,size) je_realloc(ptr,size)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> free(ptr) je_free(ptr)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(USE_DLMALLOC)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> malloc(size) g_malloc(size)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> calloc(count,size) g_calloc(count,size)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> realloc(ptr,size) g_realloc(ptr,size)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> free(ptr) g_free(ptr)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<h2 id="功能函数一栏"><a href="#功能函数一栏" class="headerlink" title="功能函数一栏"></a>功能函数一栏</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">void *zmalloc(size_t size);// 调用malloc，分配size大小的空间</div><div class="line">void *zcalloc(size_t size);// 调用calloc，分配size大小的空间</div><div class="line">void *zrealloc(void *ptr, size_t size);// 调用realloc，重新分配size大小的空间</div><div class="line">void zfree(void *ptr);// 释放ptr</div><div class="line">char *zstrdup(const char *s);// c风格字符串copy</div><div class="line">size_t zmalloc_used_memory(void); // 获取当前占用的内存大小</div><div class="line">void zmalloc_enable_thread_safeness(void); // 设置线程安全</div><div class="line">void zmalloc_set_oom_handler(void (*oom_handler)(size_t)); // 设置内存分配失败的处理方法</div><div class="line">float zmalloc_get_fragmentation_ratio(size_t rss);// 获取所给内存和已经使用的内存大小之比</div><div class="line">size_t zmalloc_get_rss(void); // 获取RSS信息（Resident Set Size）</div><div class="line">size_t zmalloc_get_private_dirty(void);// 获取实际内存大小</div><div class="line">size_t zmalloc_get_smap_bytes_by_field(char *field);// 获取/proc/self/smaps字段的字节数</div><div class="line">void zlibc_free(void *ptr); // 获取物理内存大小</div><div class="line">WIN32_ONLY(void zmalloc_free_used_memory_mutex(void);) //原始系统free的释放方法</div></pre></td></tr></table></figure>
<h2 id="统计使用的内存总数"><a href="#统计使用的内存总数" class="headerlink" title="统计使用的内存总数"></a>统计使用的内存总数</h2><p>redis每次分配内存、释放内存都会进行记录。用来统计redis使用的总内存。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">size_t</span> zmalloc_used_memory(<span class="keyword">void</span>) &#123;<span class="comment">// 获取使用的内存，直接获取used_memory的变量的值。</span></div><div class="line">    <span class="keyword">size_t</span> um;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (zmalloc_thread_safe) &#123;<span class="comment">// 线程安全</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__ATOMIC_RELAXED) || defined(HAVE_ATOMIC)</span></div><div class="line">        um = update_zmalloc_stat_add(<span class="number">0</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">        pthread_mutex_lock(&amp;used_memory_mutex);</div><div class="line">        um = used_memory;</div><div class="line">        pthread_mutex_unlock(&amp;used_memory_mutex);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;<span class="comment">// 非线程安全</span></div><div class="line">        um = used_memory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> um;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">size_t</span> used_memory = <span class="number">0</span>;<span class="comment">// 定义了一个全局变量，用来记录使用的内存数量。</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> zmalloc_thread_safe = <span class="number">0</span>;<span class="comment">// 默认不线程安全，调用zmalloc_enable_thread_safeness进行设置为线程安全。</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN32<span class="comment">// 根据系统选择多线程锁。</span></span></div><div class="line"><span class="keyword">pthread_mutex_t</span> used_memory_mutex;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="keyword">pthread_mutex_t</span> used_memory_mutex = PTHREAD_MUTEX_INITIALIZER;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">// __ATOMIC_RELAXED提供原子加减操作</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__ATOMIC_RELAXED)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> update_zmalloc_stat_add(__n) __atomic_add_fetch(&amp;used_memory, (__n), __ATOMIC_RELAXED)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> update_zmalloc_stat_sub(__n) __atomic_sub_fetch(&amp;used_memory, (__n), __ATOMIC_RELAXED)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(HAVE_ATOMIC)<span class="comment">// GCC提供的原子加减操作</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> update_zmalloc_stat_add(__n) __sync_add_and_fetch(&amp;used_memory, (__n))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> update_zmalloc_stat_sub(__n) __sync_sub_and_fetch(&amp;used_memory, (__n))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span><span class="comment">// 使用多线程锁来实现多线程加减操作</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> update_zmalloc_stat_add(__n) do &#123; \</span></div><div class="line">    pthread_mutex_lock(&amp;used_memory_mutex); \</div><div class="line">    used_memory += (__n); \</div><div class="line">    pthread_mutex_unlock(&amp;used_memory_mutex); \</div><div class="line">&#125; while(0)</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> update_zmalloc_stat_sub(__n) do &#123; \</span></div><div class="line">    pthread_mutex_lock(&amp;used_memory_mutex); \</div><div class="line">    used_memory -= (__n); \</div><div class="line">    pthread_mutex_unlock(&amp;used_memory_mutex); \</div><div class="line">&#125; while(0)</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">// 增加redis内存计数</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> update_zmalloc_stat_alloc(__n) do &#123; \</span></div><div class="line">    size_t _n = (__n); \</div><div class="line">    <span class="meta-keyword">if</span> (_n&amp;(sizeof(PORT_LONG)-1)) _n += sizeof(PORT_LONG)-(_n&amp;(sizeof(PORT_LONG)-1)); \ <span class="comment">// 将n调整为sizeof(PORT_LONG)的整数倍</span></div><div class="line">    <span class="keyword">if</span> (zmalloc_thread_safe) &#123; \ <span class="comment">// 开启线程安全</span></div><div class="line">        update_zmalloc_stat_add(_n); \</div><div class="line">    &#125; <span class="keyword">else</span> &#123; \</div><div class="line">        used_memory += _n; \ <span class="comment">// 不开启线程安全</span></div><div class="line">    &#125; \</div><div class="line">&#125; <span class="keyword">while</span>(<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment">// 减少redis内存计数</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> update_zmalloc_stat_free(__n) do &#123; \</span></div><div class="line">    size_t _n = (__n); \</div><div class="line">    <span class="meta-keyword">if</span> (_n&amp;(sizeof(PORT_LONG)-1)) _n += sizeof(PORT_LONG)-(_n&amp;(sizeof(PORT_LONG)-1)); \ <span class="comment">// 将n调整为sizeof(PORT_LONG)的整数倍</span></div><div class="line">    <span class="keyword">if</span> (zmalloc_thread_safe) &#123; \</div><div class="line">        update_zmalloc_stat_sub(_n); \<span class="comment">// 开启线程安全</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123; \</div><div class="line">        used_memory -= _n; \<span class="comment">// 不开启线程安全</span></div><div class="line">    &#125; \</div><div class="line">&#125; <span class="keyword">while</span>(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<h2 id="内存管理函数"><a href="#内存管理函数" class="headerlink" title="内存管理函数"></a>内存管理函数</h2><h3 id="异常处理函数"><a href="#异常处理函数" class="headerlink" title="异常处理函数"></a>异常处理函数</h3><p>异常处理函数, 在内存分配失败时进行调用。</p>
<p>默认使用zmalloc_default_oom，也可以通过zmalloc_set_oom_handler进行设置异常处理方式。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;</div><div class="line"></div><div class="line">void zmalloc_set_oom_handler(void (*oom_handler)(size_t)) &#123;</div><div class="line">    zmalloc_oom_handler = oom_handler;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static void zmalloc_default_oom(size_t size) &#123;</div><div class="line">    fprintf(stderr, "zmalloc: Out of memory trying to allocate %Iu bytes\n",    WIN_PORT_FIX /* %zu -&gt; %Iu */</div><div class="line">        size);// 打印日志</div><div class="line">    fflush(stderr);</div><div class="line">    abort();// 中断退出</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="zmalloc"><a href="#zmalloc" class="headerlink" title="zmalloc"></a>zmalloc</h3><p>zmalloc用来分配指定大小的内存。实际上对malloc进行了一层封装，加入了异常处理和内存统计。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">zmalloc</span><span class="params">(<span class="keyword">size_t</span> size)</span> </span>&#123;</div><div class="line">    <span class="comment">// 调用malloc进行内存分配</span></div><div class="line">    <span class="comment">// 多出的PREFIX_SIZE大内存用来记录该段内存大小。</span></div><div class="line">    <span class="keyword">void</span> *ptr = <span class="built_in">malloc</span>(size+PREFIX_SIZE);</div><div class="line"></div><div class="line">    <span class="comment">// 分配失败的异常处理</span></div><div class="line">    <span class="keyword">if</span> (!ptr) zmalloc_oom_handler(size);</div><div class="line"></div><div class="line">    <span class="comment">// 统计内存使用</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_MALLOC_SIZE</span></div><div class="line"></div><div class="line">    <span class="comment">// 内存分配器自带内存大小</span></div><div class="line">    update_zmalloc_stat_alloc(zmalloc_size(ptr));</div><div class="line">    <span class="keyword">return</span> ptr;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    *((<span class="keyword">size_t</span>*)ptr) = size;</div><div class="line">    update_zmalloc_stat_alloc(size+PREFIX_SIZE);</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">char</span>*)ptr+PREFIX_SIZE;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="zcalloc"><a href="#zcalloc" class="headerlink" title="zcalloc"></a>zcalloc</h3><p>calloc是分配内存，并初始化为0。封装的和zmalloc类似。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">zcalloc</span><span class="params">(<span class="keyword">size_t</span> size)</span> </span>&#123;</div><div class="line">    <span class="comment">// 分配内存</span></div><div class="line">    <span class="keyword">void</span> *ptr = <span class="built_in">calloc</span>(<span class="number">1</span>, size+PREFIX_SIZE);</div><div class="line"></div><div class="line">    <span class="comment">// 分配失败的异常处理</span></div><div class="line">    <span class="keyword">if</span> (!ptr) zmalloc_oom_handler(size);</div><div class="line"></div><div class="line">    <span class="comment">// 统计内存使用</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_MALLOC_SIZE</span></div><div class="line">    update_zmalloc_stat_alloc(zmalloc_size(ptr));</div><div class="line">    <span class="keyword">return</span> ptr;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    *((<span class="keyword">size_t</span>*)ptr) = size;</div><div class="line">    update_zmalloc_stat_alloc(size+PREFIX_SIZE);</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">char</span>*)ptr+PREFIX_SIZE;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="zrealloc"><a href="#zrealloc" class="headerlink" title="zrealloc"></a>zrealloc</h3><p>zrealloc用来重新调整分配的内存大小。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">zrealloc</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size)</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HAVE_MALLOC_SIZE</span></div><div class="line">    <span class="keyword">void</span> *realptr;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">size_t</span> oldsize;</div><div class="line">    <span class="keyword">void</span> *newptr;</div><div class="line"></div><div class="line">    <span class="comment">// ptr为空，直接使用zmalloc进行分配size大小内存。</span></div><div class="line">    <span class="keyword">if</span> (ptr == <span class="literal">NULL</span>) <span class="keyword">return</span> zmalloc(size);</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_MALLOC_SIZE</span></div><div class="line">    oldsize = zmalloc_size(ptr); <span class="comment">// 获取ptr指向的内存大小</span></div><div class="line">    newptr = <span class="built_in">realloc</span>(ptr,size); <span class="comment">// 重新分配内存</span></div><div class="line">    <span class="keyword">if</span> (!newptr) zmalloc_oom_handler(size); <span class="comment">// 异常处理</span></div><div class="line"></div><div class="line">    update_zmalloc_stat_free(oldsize);<span class="comment">// 先减</span></div><div class="line">    update_zmalloc_stat_alloc(zmalloc_size(newptr));<span class="comment">// 后加</span></div><div class="line">    <span class="keyword">return</span> newptr;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    realptr = (<span class="keyword">char</span>*)ptr-PREFIX_SIZE;</div><div class="line">    oldsize = *((<span class="keyword">size_t</span>*)realptr);<span class="comment">// 获取ptr指向的内存大小</span></div><div class="line">    newptr = <span class="built_in">realloc</span>(realptr,size+PREFIX_SIZE);<span class="comment">// 重新分配内存</span></div><div class="line">    <span class="keyword">if</span> (!newptr) zmalloc_oom_handler(size);<span class="comment">// 异常处理</span></div><div class="line"></div><div class="line">    *((<span class="keyword">size_t</span>*)newptr) = size;</div><div class="line">    update_zmalloc_stat_free(oldsize);<span class="comment">// 先减</span></div><div class="line">    update_zmalloc_stat_alloc(size);<span class="comment">// 后加</span></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">char</span>*)newptr+PREFIX_SIZE;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="zfree"><a href="#zfree" class="headerlink" title="zfree"></a>zfree</h3><p>释放函数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">zfree</span><span class="params">(<span class="keyword">void</span> *ptr)</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HAVE_MALLOC_SIZE</span></div><div class="line">    <span class="keyword">void</span> *realptr;</div><div class="line">    <span class="keyword">size_t</span> oldsize;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ptr == <span class="literal">NULL</span>) <span class="keyword">return</span>;<span class="comment">// 空直接返回</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_MALLOC_SIZE</span></div><div class="line">    update_zmalloc_stat_free(zmalloc_size(ptr));<span class="comment">// 减少统计数量</span></div><div class="line">    <span class="built_in">free</span>(ptr);<span class="comment">// 释放</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    realptr = (<span class="keyword">char</span>*)ptr-PREFIX_SIZE; <span class="comment">// 获取真实的指针</span></div><div class="line">    oldsize = *((<span class="keyword">size_t</span>*)realptr);<span class="comment">// 获取大小</span></div><div class="line">    update_zmalloc_stat_free(oldsize+PREFIX_SIZE);<span class="comment">// 减少统计数量</span></div><div class="line">    <span class="built_in">free</span>(realptr);<span class="comment">// 释放</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="zmalloc-size"><a href="#zmalloc-size" class="headerlink" title="zmalloc_size"></a>zmalloc_size</h3><p>获取指针指向内存大小，在内存分配器不自带该函数时定义。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// zmalloc.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HAVE_MALLOC_SIZE</span></div><div class="line"><span class="keyword">size_t</span> zmalloc_size(<span class="keyword">void</span> *ptr);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="comment">// zmalloc.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HAVE_MALLOC_SIZE</span></div><div class="line"><span class="keyword">size_t</span> zmalloc_size(<span class="keyword">void</span> *ptr) &#123;</div><div class="line">    <span class="keyword">void</span> *realptr = (<span class="keyword">char</span>*)ptr-PREFIX_SIZE;</div><div class="line">    <span class="keyword">size_t</span> size = *((<span class="keyword">size_t</span>*)realptr);</div><div class="line">    <span class="comment">/* Assume at least that all the allocations are padded at sizeof(PORT_LONG) by</span></div><div class="line">     * the underlying allocator. */</div><div class="line">    <span class="keyword">if</span> (size&amp;(<span class="keyword">sizeof</span>(PORT_LONG)<span class="number">-1</span>)) size += <span class="keyword">sizeof</span>(PORT_LONG)-(size&amp;(<span class="keyword">sizeof</span>(PORT_LONG)<span class="number">-1</span>));</div><div class="line">    <span class="keyword">return</span> size+PREFIX_SIZE;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;redis源码阅读-内存分配&quot;&gt;&lt;a href=&quot;#redis源码阅读-内存分配&quot; class=&quot;headerlink&quot; title=&quot;redis源码阅读-内存分配&quot;&gt;&lt;/a&gt;redis源码阅读-内存分配&lt;/h1&gt;&lt;p&gt;redis的内存分配主要就是对malloc和free进行了一层简单的封装。具体的实现在zmalloc.h和zmalloc.c中。&lt;/p&gt;
&lt;h2 id=&quot;内存分配器的选择&quot;&gt;&lt;a href=&quot;#内存分配器的选择&quot; class=&quot;headerlink&quot; title=&quot;内存分配器的选择&quot;&gt;&lt;/a&gt;内存分配器的选择&lt;/h2&gt;&lt;p&gt;redis支持多种内存分配器，可以选择的分配器tcmalloc、jemalloc、dlmalloc、malloc/malloc.h(apple)，这几个分配器自带内存大小的记录。如果不进行设置，则默认使用malloc进行分配。&lt;/p&gt;
    
    </summary>
    
      <category term="源码阅读" scheme="http://yoursite.com/child/categories/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/child/tags/redis/"/>
    
      <category term="源码阅读" scheme="http://yoursite.com/child/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>redis源码阅读-开始</title>
    <link href="http://yoursite.com/child//blog/2017/03/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%BC%80%E5%A7%8B.html"/>
    <id>http://yoursite.com/child//blog/2017/03/redis源码阅读-开始.html</id>
    <published>2017-03-21T02:21:21.000Z</published>
    <updated>2017-03-21T02:27:21.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis源码阅读"><a href="#Redis源码阅读" class="headerlink" title="Redis源码阅读"></a>Redis源码阅读</h1><p>自本博客之后的文章大概都是依照《Redis设计与实现》对Redis的源码进行的记录。目的是为了对于Redis有一个了解，同时对之后需要使用Redis的项目上能够有所帮助。</p>
<h2 id="Redis的介绍"><a href="#Redis的介绍" class="headerlink" title="Redis的介绍"></a>Redis的介绍</h2><p>redis是一个使用C编写的key-value数据库。性能极高且支持丰富的数据类型。它所有的操作都是原子性的。代码精简，只有3w行不到，利于阅读。</p>
<h2 id="阅读顺序"><a href="#阅读顺序" class="headerlink" title="阅读顺序"></a>阅读顺序</h2><p><a href="http://blog.huangz.me/diary/2014/how-to-read-redis-source-code.html" target="_blank" rel="external">如何阅读Redis源码？</a>阅读的顺序主要还是按照黄建宏老师所建议的顺序进行阅读。</p>
<ol>
<li>阅读数据结构的实现。</li>
<li>阅读内存编码数据结构的实现。</li>
<li>阅读数据类型的实现。</li>
<li>阅读数据库实现相关代码。</li>
<li>阅读客户端和服务端相关代码。</li>
<li>阅读多机功能的实现。</li>
</ol>
<p>至此将Redis阅读完毕。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redis源码阅读&quot;&gt;&lt;a href=&quot;#Redis源码阅读&quot; class=&quot;headerlink&quot; title=&quot;Redis源码阅读&quot;&gt;&lt;/a&gt;Redis源码阅读&lt;/h1&gt;&lt;p&gt;自本博客之后的文章大概都是依照《Redis设计与实现》对Redis的源码进行的记录。
    
    </summary>
    
      <category term="源码阅读" scheme="http://yoursite.com/child/categories/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/child/tags/redis/"/>
    
      <category term="源码阅读" scheme="http://yoursite.com/child/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>gitlab workflow</title>
    <link href="http://yoursite.com/child//blog/2017/01/gitlab-workflow.html"/>
    <id>http://yoursite.com/child//blog/2017/01/gitlab-workflow.html</id>
    <published>2017-01-29T13:40:40.000Z</published>
    <updated>2017-01-28T14:54:37.330Z</updated>
    
    <content type="html"><![CDATA[<p>建立一个长期分支，就是master，master分支上的版本都是能够编译运行的版本。<br>整个工作流程如下。<br>第一步：根据需求，从master拉出新分支，不区分功能分支或补丁分支。<br>第二步：新分支开发完成后，或者需要讨论的时候，先从master合并到分支，解决冲突，然后向master发起一个pull request（简称PR）。<br>第三步：Pull Request既是一个通知，让别人注意到你的请求，又是一种对话机制，大家一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。<br>第四步：你的Pull Request被接受，合并进master，重新部署后，原来你拉出来的那个分支就被删除。（先部署再合并也可。）</p>
<h1 id="建立测试项目"><a href="#建立测试项目" class="headerlink" title="建立测试项目"></a>建立测试项目</h1><p>新建一个项目用于测试工作流。<br>演示项目地址：<a href="http://10.10.10.98/MekaYangyi/workflow" target="_blank" rel="external">http://10.10.10.98/MekaYangyi/workflow</a><br><img src="/img/gitlab工作流程/10-21-42.jpg" alt=""></p>
<h1 id="设置分支保护"><a href="#设置分支保护" class="headerlink" title="设置分支保护"></a>设置分支保护</h1><p>新建项目默认master用户才能够push和merge。<br>其余用户只能新建分支，在分支测试完毕后，再发起Merge Requests。发起后，由master进行审核后合并。<br><img src="/img/gitlab工作流程/10-32-56.jpg" alt=""></p>
<a id="more"></a>
<h1 id="设置开发成员"><a href="#设置开发成员" class="headerlink" title="设置开发成员"></a>设置开发成员</h1><p>项目创建者在项目页面选择Member。<br><img src="/img/gitlab工作流程/10-31-10.jpg" alt=""></p>
<p>设置开发人员分为两种，一种是直接设置用户，一种是设置一Group都为指定权限。<br>权限分为四类：</p>
<blockquote>
<p>Guest<br>Reporter<br>Developer<br>Master</p>
</blockquote>
<p>一般开发人员指定为Developer。<br>具体权限在<a href="http://10.10.10.98/help/user/permissions.md查看。" target="_blank" rel="external">http://10.10.10.98/help/user/permissions.md查看。</a><br>设置用户权限<br><img src="/img/gitlab工作流程/11-23-52.jpg" alt=""><br>设置整个Group的权限<br><img src="/img/gitlab工作流程/11-24-20.jpg" alt=""></p>
<h1 id="建立本地分支"><a href="#建立本地分支" class="headerlink" title="建立本地分支"></a>建立本地分支</h1><p>在项目文件夹右键，选择TortoiseGit→Create Branch。<br><img src="/img/gitlab工作流程/11-43-08.jpg" alt=""><br>填写信息<br><img src="/img/gitlab工作流程/11-52-57.jpg" alt=""></p>
<h1 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h1><p>在项目文件夹右键，选择TortoiseGit→Switch/Checkout。<br><img src="/img/gitlab工作流程/11-54-23.jpg" alt=""><br>选择OK。<br><img src="/img/gitlab工作流程/11-55-03.jpg" alt=""></p>
<h1 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h1><p>分出分支后，可以在本地进行Commit，知道一个功能开发完毕后，再上传到服务器。<br>修改本地的文件，Commit。<br><img src="/img/gitlab工作流程/11-57-19.jpg" alt=""><br>填写上传备注，Commit。</p>
<h1 id="将Master向Test-WorkFlow合并"><a href="#将Master向Test-WorkFlow合并" class="headerlink" title="将Master向Test_WorkFlow合并"></a>将Master向Test_WorkFlow合并</h1><p>先从服务器pull最新版本，然后将master向Test_WorkFlow合并，防止master在分支分出之后被修改导致的冲突。<br>从服务器pull最新版本。<br><img src="/img/gitlab工作流程/22-39-02.jpg" alt=""><br>将master向Test_WorkFlow合并。<br><img src="/img/gitlab工作流程/22-41-09.jpg" alt=""><br>合并解决冲突。<br><img src="/img/gitlab工作流程/22-41-37.jpg" alt=""></p>
<h1 id="push"><a href="#push" class="headerlink" title="push"></a>push</h1><p>上传成功后选择push。<br><img src="/img/gitlab工作流程/22-44-54.jpg" alt=""></p>
<p>确认。<br><img src="/img/gitlab工作流程/11-59-05.jpg" alt=""><br>成功。<br><img src="/img/gitlab工作流程/11-59-45.jpg" alt=""></p>
<h1 id="发起Merge-Request"><a href="#发起Merge-Request" class="headerlink" title="发起Merge Request"></a>发起Merge Request</h1><p>在项目页面找到分支，选择Merge Request<br><img src="/img/gitlab工作流程/12-05-10.jpg" alt=""><br>填写相关信息，Submit merge request<br><img src="/img/gitlab工作流程/12-06-31.jpg" alt=""></p>
<h1 id="检视代码并讨论"><a href="#检视代码并讨论" class="headerlink" title="检视代码并讨论"></a>检视代码并讨论</h1><p>选择Merge Request。<br>单击测试分支合并功能这一个Merge Request<br><img src="/img/gitlab工作流程/12-08-38.jpg" alt=""><br>弹出页面。<br><img src="/img/gitlab工作流程/12-09-43.jpg" alt=""><br>检视代码</p>
<h2 id="Commit，查看修改记录。"><a href="#Commit，查看修改记录。" class="headerlink" title="Commit，查看修改记录。"></a>Commit，查看修改记录。</h2><p>图中红色区域单击可以Diff与查看源文件。<br><img src="/img/gitlab工作流程/12-11-44.jpg" alt=""><br>单击任意版本提交记录，增加检视意见，在diff时，任意处可以添加讨论。或者在页面底部对整个修改进行评价。<br><img src="/img/gitlab工作流程/112-18-49.jpg" alt=""></p>
<p><img src="/img/gitlab工作流程/12-19-25.jpg" alt=""></p>
<h2 id="Changes，查看版本区别。"><a href="#Changes，查看版本区别。" class="headerlink" title="Changes，查看版本区别。"></a>Changes，查看版本区别。</h2><p><img src="/img/gitlab工作流程/12-12-47.jpg" alt=""></p>
<h2 id="Discusion，填写建议"><a href="#Discusion，填写建议" class="headerlink" title="Discusion，填写建议"></a>Discusion，填写建议</h2><p>填写建议后，选择Comment可以互相讨论。<br>或者选择Close merge request关闭请求。<br><img src="/img/gitlab工作流程/12-15-41.jpg" alt=""></p>
<h2 id="Accept-merge-request或者Close-merge-request"><a href="#Accept-merge-request或者Close-merge-request" class="headerlink" title="Accept merge request或者Close merge request"></a>Accept merge request或者Close merge request</h2><p><img src="/img/gitlab工作流程/12-22-44.jpg" alt=""></p>
<h2 id="合并完成"><a href="#合并完成" class="headerlink" title="合并完成"></a>合并完成</h2><p>选择Accept Merge Request,同时选择合并时将分支删除。<br><img src="/img/gitlab工作流程/12-23-55.jpg" alt=""><br>合并结果。<br><img src="/img/gitlab工作流程/12-25-09.jpg" alt=""></p>
<h1 id="本地pull"><a href="#本地pull" class="headerlink" title="本地pull"></a>本地pull</h1><p>在本地项目进行pull,同步服务器版本。<br><img src="/img/gitlab工作流程/12-26-33.jpg" alt=""><br>本地同步结果。<br><img src="/img/gitlab工作流程/12-27-07.jpg" alt=""></p>
<h1 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h1><p>由于远程分支与本地分支没有关系，那么当远程正式Merge之后，需要删除本地分支，防止以后分支一直增加，不减少。<br>在项目文件夹右键，选择TortoiseGit→Switch/Checkout，先把分支切换到本地master。<br><img src="/img/gitlab工作流程/11-54-23.jpg" alt=""><br>切换完成后，再次进入该界面选择….<br><img src="/img/gitlab工作流程/12-47-04.jpg" alt=""><br>删除分支<br><img src="/img/gitlab工作流程/12-45-50.jpg" alt=""></p>
<h1 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h1><p>Issue 用于 Bug追踪和需求管理。建议先新建 Issue，再新建对应的功能分支。功能分支总是为了解决一个或多个 Issue。</p>
<h2 id="新建Issue"><a href="#新建Issue" class="headerlink" title="新建Issue"></a>新建Issue</h2><p>选择New Issue<br><img src="/img/gitlab工作流程/12-32-50.jpg" alt=""><br>填写相关信息。<br>功能分支的名称，可以与issue的名字保持一致，并且以issue的编号起首，比如”1-测试Issue”。<br><img src="/img/gitlab工作流程/12-36-52.jpg" alt=""></p>
<p>新建完成,每一个Issue都有一个编号，本Issue的编号为#1。<br><img src="/img/gitlab工作流程/12-37-36.jpg" alt=""><br>在分支开发完成后，在commit message里面，可以写上”fixes #14”或者”closes #67”。<br><img src="/img/gitlab工作流程/12-39-48.jpg" alt=""><br>Github规定，只要commit message里面有下面这些动词 + 编号，就会关闭对应的issue。</p>
<blockquote>
<p>close<br>closes<br>closed<br>fix<br>fixes<br>fixed<br>resolve<br>resolves<br>resolved</p>
</blockquote>
<p>这种方式还可以一次关闭多个issue，或者关闭其他代码库的issue，格式是username/repository#issue_number。<br>Pull Request被接受以后，issue关闭，原始分支就应该删除。如果以后该issue重新打开，新分支可以复用原来的名字。</p>
<h2 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h2><p><img src="/img/gitlab工作流程/12-41-19.jpg" alt=""><br><img src="/img/gitlab工作流程/12-41-51.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;建立一个长期分支，就是master，master分支上的版本都是能够编译运行的版本。&lt;br&gt;整个工作流程如下。&lt;br&gt;第一步：根据需求，从master拉出新分支，不区分功能分支或补丁分支。&lt;br&gt;第二步：新分支开发完成后，或者需要讨论的时候，先从master合并到分支，解决冲突，然后向master发起一个pull request（简称PR）。&lt;br&gt;第三步：Pull Request既是一个通知，让别人注意到你的请求，又是一种对话机制，大家一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。&lt;br&gt;第四步：你的Pull Request被接受，合并进master，重新部署后，原来你拉出来的那个分支就被删除。（先部署再合并也可。）&lt;/p&gt;
&lt;h1 id=&quot;建立测试项目&quot;&gt;&lt;a href=&quot;#建立测试项目&quot; class=&quot;headerlink&quot; title=&quot;建立测试项目&quot;&gt;&lt;/a&gt;建立测试项目&lt;/h1&gt;&lt;p&gt;新建一个项目用于测试工作流。&lt;br&gt;演示项目地址：&lt;a href=&quot;http://10.10.10.98/MekaYangyi/workflow&quot;&gt;http://10.10.10.98/MekaYangyi/workflow&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/img/gitlab工作流程/10-21-42.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h1 id=&quot;设置分支保护&quot;&gt;&lt;a href=&quot;#设置分支保护&quot; class=&quot;headerlink&quot; title=&quot;设置分支保护&quot;&gt;&lt;/a&gt;设置分支保护&lt;/h1&gt;&lt;p&gt;新建项目默认master用户才能够push和merge。&lt;br&gt;其余用户只能新建分支，在分支测试完毕后，再发起Merge Requests。发起后，由master进行审核后合并。&lt;br&gt;&lt;img src=&quot;/img/gitlab工作流程/10-32-56.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="gitlab" scheme="http://yoursite.com/child/categories/gitlab/"/>
    
    
      <category term="gitlab" scheme="http://yoursite.com/child/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>第一次使用gitlab</title>
    <link href="http://yoursite.com/child//blog/2017/01/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8gitlab.html"/>
    <id>http://yoursite.com/child//blog/2017/01/第一次使用gitlab.html</id>
    <published>2017-01-28T01:19:43.000Z</published>
    <updated>2017-01-28T01:32:46.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1><p>版本差别不大，目前使用的版本git2.11.0.3。<br>一路下一步,不修改安装位置，直接使用默认设置。</p>
<h1 id="安装TortoiseGit"><a href="#安装TortoiseGit" class="headerlink" title="安装TortoiseGit"></a>安装TortoiseGit</h1><p>一路下一步，不修改安装位置，直接使用默认设置。</p>
<h1 id="登录账户"><a href="#登录账户" class="headerlink" title="登录账户"></a>登录账户</h1><h2 id="管理员创建账户"><a href="#管理员创建账户" class="headerlink" title="管理员创建账户"></a>管理员创建账户</h2><p>Admin→New User。新建账户、并设置密码。同时设置该用户所属Group。</p>
<blockquote>
<p>name：上传显示的名字，可以经常更改，使用中文名好。</p>
<p>username：登陆的用户名，不可修改，用于账户登陆。</p>
<p>email：账户email，内网联系email。</p>
<p>password：密码，牢记，root用户可修改。</p>
</blockquote>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>登陆内网gitlab，目前网址：10.10.10.98。<br><img src="/img/第一次使用gitlab/22-04-07.jpg" alt=""></p>
<a id="more"></a>
<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p>登录后会要求修改密码，自己输入即可。<br><img src="/img/第一次使用gitlab/22-05-00.jpg" alt=""></p>
<h1 id="设置TortoiseGit"><a href="#设置TortoiseGit" class="headerlink" title="设置TortoiseGit"></a>设置TortoiseGit</h1><p>将注册的用户填入TortoiseGit中,设置为全局账号。<br><img src="/img/第一次使用gitlab/21-07-01.jpg" alt=""></p>
<h1 id="添加ssh"><a href="#添加ssh" class="headerlink" title="添加ssh"></a>添加ssh</h1><p>如果不添加shh，每次修改都会要求输入账号密码，比较麻烦。添加后与设备绑定，修改不再需要填写账号密码。如果不再使用一个设备，请删除ssh。</p>
<h2 id="生成ssh"><a href="#生成ssh" class="headerlink" title="生成ssh"></a>生成ssh</h2><p>任意空白处，选择git bash。<br><img src="/img/第一次使用gitlab/06-27-40.jpg" alt=""><br>窗口中输入，一路按回车。<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"你注册的email地址"</span></div></pre></td></tr></table></figure></p>
<p>生成后的公钥会存放在 C:/Users/You_User_Name/.ssh/id_rsa.pub。<br>用记事本打开，复制。<br><img src="/img/第一次使用gitlab/06-30-35.jpg" alt=""></p>
<h2 id="将ssh加入gitlab"><a href="#将ssh加入gitlab" class="headerlink" title="将ssh加入gitlab"></a>将ssh加入gitlab</h2><p>浏览器转到<a href="http://10.10.10.98/profile/keys。" target="_blank" rel="external">http://10.10.10.98/profile/keys。</a><br>将复制的Key粘贴，Add key。<br><img src="/img/第一次使用gitlab/06-32-52.jpg" alt=""></p>
<h1 id="新建一个项目"><a href="#新建一个项目" class="headerlink" title="新建一个项目"></a>新建一个项目</h1><h2 id="新建一个私有项目"><a href="#新建一个私有项目" class="headerlink" title="新建一个私有项目"></a>新建一个私有项目</h2><p>新建一个私有项目进行实验，gitlab是否能够正常上传。<br>选择new project。<br><img src="/img/第一次使用gitlab/06-07-09.jpg" alt=""></p>
<h2 id="填写基本信息"><a href="#填写基本信息" class="headerlink" title="填写基本信息"></a>填写基本信息</h2><blockquote>
<p>Project name：项目名称。<br>Project description：项目描述。<br>Visibility Level：项目级别，内网使用只选择public与private。private除了项目成员不可见，public在内网均可见。</p>
</blockquote>
<p>选择Create project创建项目。<br><img src="/img/第一次使用gitlab/06-08-43.jpg" alt=""></p>
<h1 id="Clone项目"><a href="#Clone项目" class="headerlink" title="Clone项目"></a>Clone项目</h1><p>项目创建完成，复制项目地址。<br>复制浏览器的项目地址：<a href="http://10.10.10.98/test/test_project。" target="_blank" rel="external">http://10.10.10.98/test/test_project。</a><br><img src="/img/第一次使用gitlab/06-14-02.jpg" alt=""><br>选择计算机一个文件夹，右键，选择git clone。<br><img src="/img/第一次使用gitlab/06-15-28.jpg" alt=""><br>clone之前复制地址项目，确认，输入用户名与密码，clone成功，会新建一个文件夹。<br><img src="/img/第一次使用gitlab/06-16-37.jpg" alt=""></p>
<h1 id="第一次push"><a href="#第一次push" class="headerlink" title="第一次push"></a>第一次push</h1><p>在该文件夹中建立一个README.md文件。<br><img src="/img/第一次使用gitlab/06-18-54.jpg" alt=""></p>
<h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><p>右键add，确认，ok。<br><img src="/img/第一次使用gitlab/06-19-25.jpg" alt=""></p>
<h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><p>commit将修改更新到本地。<br>在项目文件夹空白处右键，选择git commit。<br><img src="/img/第一次使用gitlab/06-25-26.jpg" alt=""><br>填写上传理由，commit。<br><img src="/img/第一次使用gitlab/06-26-03.jpg" alt=""></p>
<h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>选择push，push能够将修改push到服务器。<br><img src="/img/第一次使用gitlab/06-36-23.jpg" alt=""><br>确认。<br><img src="/img/第一次使用gitlab/06-37-12.jpg" alt=""><br>成功界面。<br><img src="/img/第一次使用gitlab/06-37-36.jpg" alt=""></p>
<h1 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h1><p>成功在网页端看到修改记录(之前误上传为.md.txt文件，修改为.md文件网页端会显示文字)。<br><img src="/img/第一次使用gitlab/06-40-03.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装git&quot;&gt;&lt;a href=&quot;#安装git&quot; class=&quot;headerlink&quot; title=&quot;安装git&quot;&gt;&lt;/a&gt;安装git&lt;/h1&gt;&lt;p&gt;版本差别不大，目前使用的版本git2.11.0.3。&lt;br&gt;一路下一步,不修改安装位置，直接使用默认设置。&lt;/p&gt;
&lt;h1 id=&quot;安装TortoiseGit&quot;&gt;&lt;a href=&quot;#安装TortoiseGit&quot; class=&quot;headerlink&quot; title=&quot;安装TortoiseGit&quot;&gt;&lt;/a&gt;安装TortoiseGit&lt;/h1&gt;&lt;p&gt;一路下一步，不修改安装位置，直接使用默认设置。&lt;/p&gt;
&lt;h1 id=&quot;登录账户&quot;&gt;&lt;a href=&quot;#登录账户&quot; class=&quot;headerlink&quot; title=&quot;登录账户&quot;&gt;&lt;/a&gt;登录账户&lt;/h1&gt;&lt;h2 id=&quot;管理员创建账户&quot;&gt;&lt;a href=&quot;#管理员创建账户&quot; class=&quot;headerlink&quot; title=&quot;管理员创建账户&quot;&gt;&lt;/a&gt;管理员创建账户&lt;/h2&gt;&lt;p&gt;Admin→New User。新建账户、并设置密码。同时设置该用户所属Group。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;name：上传显示的名字，可以经常更改，使用中文名好。&lt;/p&gt;
&lt;p&gt;username：登陆的用户名，不可修改，用于账户登陆。&lt;/p&gt;
&lt;p&gt;email：账户email，内网联系email。&lt;/p&gt;
&lt;p&gt;password：密码，牢记，root用户可修改。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;登录&quot;&gt;&lt;a href=&quot;#登录&quot; class=&quot;headerlink&quot; title=&quot;登录&quot;&gt;&lt;/a&gt;登录&lt;/h2&gt;&lt;p&gt;登陆内网gitlab，目前网址：10.10.10.98。&lt;br&gt;&lt;img src=&quot;/img/第一次使用gitlab/22-04-07.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="gitlab" scheme="http://yoursite.com/child/categories/gitlab/"/>
    
    
      <category term="gitlab" scheme="http://yoursite.com/child/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>[读书笔记] stl源码剖析 总结</title>
    <link href="http://yoursite.com/child//blog/2016/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90.html"/>
    <id>http://yoursite.com/child//blog/2016/11/读书笔记-stl源码剖析.html</id>
    <published>2016-11-21T12:32:26.000Z</published>
    <updated>2016-11-21T15:03:05.477Z</updated>
    
    <content type="html"><![CDATA[<p>大致上是将STL源码剖析看过了一篇。<br>前三章看到比较认真，后面几章就看到比较粗略了。<br>我想STL的精髓正是在内存配置、迭代器、容器中。<br>至于后面的一些关联式容器，用的红黑树稍复杂，不过在之前的数据结构的基础上和前几章对stl的一些常用方法是熟悉下，其实也就简单了。算法，利用迭代器，同时特化不同的版本。仿函数则是模仿函数效果的对象。整体上都算简单了。<br>我的计划是在未来的一小段日子里实现一个小型的stl，所谓实现，可能也不过是重新将sgi的代码打一遍罢了。不过对于整个stl的理解，我相信会更好一些。<br>之后我应该会更新一些写小型stl遇到的问题和解决方案。<br>项目的地址：<br><a href="https://github.com/MekaYangyi/STL/" target="_blank" rel="external">https://github.com/MekaYangyi/STL/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大致上是将STL源码剖析看过了一篇。&lt;br&gt;前三章看到比较认真，后面几章就看到比较粗略了。&lt;br&gt;我想STL的精髓正是在内存配置、迭代器、容器中。&lt;br&gt;至于后面的一些关联式容器，用的红黑树稍复杂，不过在之前的数据结构的基础上和前几章对stl的一些常用方法是熟悉下，其实也就
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/child/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="stl源码剖析" scheme="http://yoursite.com/child/tags/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>[读书笔记] stl源码剖析 第四章 序列式容器</title>
    <link href="http://yoursite.com/child//blog/2016/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%BA%8F%E5%88%97%E5%BC%8F%E5%AE%B9%E5%99%A8.html"/>
    <id>http://yoursite.com/child//blog/2016/11/读书笔记-stl源码剖析-第四章-序列式容器.html</id>
    <published>2016-11-20T12:32:26.000Z</published>
    <updated>2016-11-21T23:00:46.493Z</updated>
    
    <content type="html"><![CDATA[<p>容器分类<br><img src="/img/20161120124915.png" alt=""></p>
<h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><p>vector还是比较简单，也就是一个动态数组，提供了些操作，带三个指针，start/finish/end<br>核心就是动态调整内存的方法，也就是满了开大一倍空间，拷贝过去。<br>push_back等操作都是值语义的，拷贝传进来的内容放入到vector中。<br>因为是连续的空间，所有元素连续存储在一整块内存上，迭代器直接用的原始指针。</p>
<h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><p>list复杂些.<br>模型和常见的list是一致的，动态创建节点，插入。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> _List_node_base &#123;</div><div class="line">  _List_node_base* _M_next;</div><div class="line">  _List_node_base* _M_prev;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _Tp&gt;</div><div class="line"><span class="keyword">struct</span> _List_node : <span class="keyword">public</span> _List_node_base &#123;</div><div class="line">  _Tp _M_data;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//迭代器base</span></div><div class="line"><span class="keyword">struct</span> _List_iterator_base &#123;</div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">size_t</span>                     size_type;</div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span>                  difference_type;</div><div class="line">  <span class="keyword">typedef</span> bidirectional_iterator_tag iterator_category;</div><div class="line"></div><div class="line">  _List_node_base* _M_node;<span class="comment">//节点指针</span></div><div class="line"></div><div class="line">  _List_iterator_base(_List_node_base* __x) : _M_node(__x) &#123;&#125;</div><div class="line">  _List_iterator_base() &#123;&#125;</div><div class="line"></div><div class="line">  <span class="keyword">void</span> _M_incr() &#123; _M_node = _M_node-&gt;_M_next; &#125;</div><div class="line">  <span class="keyword">void</span> _M_decr() &#123; _M_node = _M_node-&gt;_M_prev; &#125;</div><div class="line"></div><div class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> _List_iterator_base&amp; __x) <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">return</span> _M_node == __x._M_node;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> _List_iterator_base&amp; __x) <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">return</span> _M_node != __x._M_node;</div><div class="line">  &#125;</div><div class="line">&#125;;  </div><div class="line"></div><div class="line"><span class="comment">//迭代器,重载了++ -- == * -&gt;等操作</span></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _Tp, <span class="keyword">class</span> _Ref, <span class="keyword">class</span> _Ptr&gt;</div><div class="line"><span class="keyword">struct</span> _List_iterator : <span class="keyword">public</span> _List_iterator_base &#123;</div><div class="line">  <span class="keyword">typedef</span> _List_iterator&lt;_Tp,_Tp&amp;,_Tp*&gt;             iterator;</div><div class="line">  <span class="keyword">typedef</span> _List_iterator&lt;_Tp,<span class="keyword">const</span> _Tp&amp;,<span class="keyword">const</span> _Tp*&gt; const_iterator;</div><div class="line">  <span class="keyword">typedef</span> _List_iterator&lt;_Tp,_Ref,_Ptr&gt;             _Self;</div><div class="line"></div><div class="line">  <span class="keyword">typedef</span> _Tp value_type;</div><div class="line">  <span class="keyword">typedef</span> _Ptr pointer;</div><div class="line">  <span class="keyword">typedef</span> _Ref reference;</div><div class="line">  <span class="keyword">typedef</span> _List_node&lt;_Tp&gt; _Node;</div><div class="line"></div><div class="line">  _List_iterator(_Node* __x) : _List_iterator_base(__x) &#123;&#125;</div><div class="line">  _List_iterator() &#123;&#125;</div><div class="line">  _List_iterator(<span class="keyword">const</span> iterator&amp; __x) : _List_iterator_base(__x._M_node) &#123;&#125;</div><div class="line"></div><div class="line">  reference <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> ((_Node*) _M_node)-&gt;_M_data; &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __SGI_STL_NO_ARROW_OPERATOR</span></div><div class="line">  pointer <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> &amp;(<span class="keyword">operator</span>*()); &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __SGI_STL_NO_ARROW_OPERATOR */</span></span></div><div class="line"></div><div class="line">  _Self&amp; <span class="keyword">operator</span>++() &#123; </div><div class="line">    <span class="keyword">this</span>-&gt;_M_incr();</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">  _Self <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123; </div><div class="line">    _Self __tmp = *<span class="keyword">this</span>;</div><div class="line">    <span class="keyword">this</span>-&gt;_M_incr();</div><div class="line">    <span class="keyword">return</span> __tmp;</div><div class="line">  &#125;</div><div class="line">  _Self&amp; <span class="keyword">operator</span>--() &#123; </div><div class="line">    <span class="keyword">this</span>-&gt;_M_decr();</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">  _Self <span class="keyword">operator</span>--(<span class="keyword">int</span>) &#123; </div><div class="line">    _Self __tmp = *<span class="keyword">this</span>;</div><div class="line">    <span class="keyword">this</span>-&gt;_M_decr();</div><div class="line">    <span class="keyword">return</span> __tmp;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h1><p>双向开头的连续空间</p>
<p><img src="/img/20161120163459.png" alt=""><br>比较特别的地方是用一个双指针维护了一个多个连续的空间</p>
<p><img src="/img/20161120165939.png" alt=""><br>迭代器保持连续的方式<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">inline</span> <span class="keyword">size_t</span> __deque_buf_size(<span class="keyword">size_t</span> __size) &#123;</div><div class="line">  <span class="keyword">return</span> __size &lt; <span class="number">512</span> ? <span class="keyword">size_t</span>(<span class="number">512</span> / __size) : <span class="keyword">size_t</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _Tp, <span class="keyword">class</span> _Ref, <span class="keyword">class</span> _Ptr&gt;</div><div class="line"><span class="keyword">struct</span> _Deque_iterator &#123;</div><div class="line">  <span class="keyword">typedef</span> _Deque_iterator&lt;_Tp, _Tp&amp;, _Tp*&gt;             iterator;</div><div class="line">  <span class="keyword">typedef</span> _Deque_iterator&lt;_Tp, <span class="keyword">const</span> _Tp&amp;, <span class="keyword">const</span> _Tp*&gt; const_iterator;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">size_t</span> _S_buffer_size() &#123; <span class="keyword">return</span> __deque_buf_size(<span class="keyword">sizeof</span>(_Tp)); &#125;</div><div class="line"></div><div class="line">.....</div><div class="line"></div><div class="line">  _Tp* _M_cur;</div><div class="line">  _Tp* _M_first;</div><div class="line">  _Tp* _M_last;</div><div class="line">  _Map_pointer _M_node;</div><div class="line"></div><div class="line">  _Deque_iterator(_Tp* __x, _Map_pointer __y) </div><div class="line">    : _M_cur(__x), _M_first(*__y),</div><div class="line">      _M_last(*__y + _S_buffer_size()), _M_node(__y) &#123;&#125;</div><div class="line">  _Deque_iterator() : _M_cur(<span class="number">0</span>), _M_first(<span class="number">0</span>), _M_last(<span class="number">0</span>), _M_node(<span class="number">0</span>) &#123;&#125;</div><div class="line">  _Deque_iterator(<span class="keyword">const</span> iterator&amp; __x)</div><div class="line">    : _M_cur(__x._M_cur), _M_first(__x._M_first), </div><div class="line">      _M_last(__x._M_last), _M_node(__x._M_node) &#123;&#125;</div><div class="line"></div><div class="line">  reference <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> *_M_cur; &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __SGI_STL_NO_ARROW_OPERATOR</span></div><div class="line">  pointer <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> _M_cur; &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __SGI_STL_NO_ARROW_OPERATOR */</span></span></div><div class="line"></div><div class="line">  difference_type <span class="keyword">operator</span>-(<span class="keyword">const</span> _Self&amp; __x) <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">return</span> difference_type(_S_buffer_size()) * (_M_node - __x._M_node - <span class="number">1</span>) +</div><div class="line">      (_M_cur - _M_first) + (__x._M_last - __x._M_cur);</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="comment">//++</span></div><div class="line">  _Self&amp; <span class="keyword">operator</span>++() &#123;</div><div class="line">    ++_M_cur;</div><div class="line">    <span class="keyword">if</span> (_M_cur == _M_last) &#123;</div><div class="line">    <span class="comment">//到尾部了就进入下一个区域</span></div><div class="line">      _M_set_node(_M_node + <span class="number">1</span>);<span class="comment">//_M_node + 1就是下一个区域</span></div><div class="line">      _M_cur = _M_first;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; </div><div class="line">  &#125;</div><div class="line">......</div><div class="line"><span class="comment">//重置first等指针</span></div><div class="line">  <span class="keyword">void</span> _M_set_node(_Map_pointer __new_node) &#123;</div><div class="line">    _M_node = __new_node;</div><div class="line">    _M_first = *__new_node;</div><div class="line">    _M_last = _M_first + difference_type(_S_buffer_size());</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>如果map不足，分配空间<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _Tp, <span class="keyword">class</span> _Alloc&gt;</div><div class="line"><span class="keyword">class</span> _Deque_base &#123;</div><div class="line">....</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">  _Tp** _M_map;</div><div class="line">  <span class="keyword">size_t</span> _M_map_size;  <span class="comment">//记录的map的大小</span></div><div class="line">  iterator _M_start;</div><div class="line">  iterator _M_finish;</div><div class="line">  ....</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>空间不足分配空间<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">const</span> value_type&amp; <span class="keyword">__t</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (_M_finish._M_cur != _M_finish._M_last - <span class="number">1</span>) &#123;</div><div class="line">      construct(_M_finish._M_cur, <span class="keyword">__t</span>);</div><div class="line">      ++_M_finish._M_cur;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">      _M_push_back_aux(<span class="keyword">__t</span>);</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">  <span class="keyword">template</span> &lt;<span class="keyword">class</span> _Tp, <span class="keyword">class</span> _Alloc&gt;</div><div class="line"><span class="keyword">void</span> <span class="built_in">deque</span>&lt;_Tp,_Alloc&gt;::_M_push_back_aux(<span class="keyword">const</span> value_type&amp; <span class="keyword">__t</span>)</div><div class="line">&#123;</div><div class="line">  value_type __t_copy = <span class="keyword">__t</span>;</div><div class="line">  _M_reserve_map_at_back();</div><div class="line">  *(_M_finish._M_node + <span class="number">1</span>) = _M_allocate_node();</div><div class="line">  __STL_TRY &#123;</div><div class="line">    construct(_M_finish._M_cur, __t_copy);</div><div class="line">    _M_finish._M_set_node(_M_finish._M_node + <span class="number">1</span>);</div><div class="line">    _M_finish._M_cur = _M_finish._M_first;</div><div class="line">  &#125;</div><div class="line">  __STL_UNWIND(_M_deallocate_node(*(_M_finish._M_node + <span class="number">1</span>)));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h1><p>以deuqe为底部结构，封闭头端开口，就是stack。<br>没有迭代器。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">//这里设定了了 以deque为基础</div><div class="line">template &lt;class _Tp, </div><div class="line">          class _Sequence __STL_DEPENDENT_DEFAULT_TMPL(deque&lt;_Tp&gt;) &gt;</div><div class="line">class stack;</div><div class="line"></div><div class="line">template &lt;class _Tp, class _Seq&gt;</div><div class="line">bool operator==(const stack&lt;_Tp,_Seq&gt;&amp; __x, const stack&lt;_Tp,_Seq&gt;&amp; __y);</div><div class="line"></div><div class="line">template &lt;class _Tp, class _Seq&gt;</div><div class="line">bool operator&lt;(const stack&lt;_Tp,_Seq&gt;&amp; __x, const stack&lt;_Tp,_Seq&gt;&amp; __y);</div><div class="line"></div><div class="line"></div><div class="line">template &lt;class _Tp, class _Sequence&gt;</div><div class="line">class stack &#123;</div><div class="line">.....</div><div class="line"></div><div class="line"></div><div class="line">#ifdef __STL_MEMBER_TEMPLATES</div><div class="line">  template &lt;class _Tp1, class _Seq1&gt;</div><div class="line">  friend bool operator== (const stack&lt;_Tp1, _Seq1&gt;&amp;,</div><div class="line">                          const stack&lt;_Tp1, _Seq1&gt;&amp;);</div><div class="line">  template &lt;class _Tp1, class _Seq1&gt;</div><div class="line">  friend bool operator&lt; (const stack&lt;_Tp1, _Seq1&gt;&amp;,</div><div class="line">                         const stack&lt;_Tp1, _Seq1&gt;&amp;);</div><div class="line">#else /* __STL_MEMBER_TEMPLATES */</div><div class="line">  friend bool __STD_QUALIFIER</div><div class="line">  operator== __STL_NULL_TMPL_ARGS (const stack&amp;, const stack&amp;);</div><div class="line">  friend bool __STD_QUALIFIER</div><div class="line">  operator&lt; __STL_NULL_TMPL_ARGS (const stack&amp;, const stack&amp;);</div><div class="line">#endif /* __STL_MEMBER_TEMPLATES */</div><div class="line"></div><div class="line">.....</div><div class="line"></div><div class="line">protected:</div><div class="line">  _Sequence c;</div><div class="line">public:</div><div class="line">  stack() : c() &#123;&#125;</div><div class="line">  explicit stack(const _Sequence&amp; __s) : c(__s) &#123;&#125;</div><div class="line"></div><div class="line">  bool empty() const &#123; return c.empty(); &#125;</div><div class="line">  size_type size() const &#123; return c.size(); &#125;</div><div class="line">  reference top() &#123; return c.back(); &#125;</div><div class="line">  const_reference top() const &#123; return c.back(); &#125;</div><div class="line">  void push(const value_type&amp; __x) &#123; c.push_back(__x); &#125;</div><div class="line">  void pop() &#123; c.pop_back(); &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h1><p>同样以deque为基础<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">template &lt;class _Tp, </div><div class="line">          class _Sequence __STL_DEPENDENT_DEFAULT_TMPL(deque&lt;_Tp&gt;) &gt;</div><div class="line">class queue;</div><div class="line"></div><div class="line">template &lt;class _Tp, class _Seq&gt;</div><div class="line">inline bool operator==(const queue&lt;_Tp, _Seq&gt;&amp;, const queue&lt;_Tp, _Seq&gt;&amp;);</div><div class="line"></div><div class="line">template &lt;class _Tp, class _Seq&gt;</div><div class="line">inline bool operator&lt;(const queue&lt;_Tp, _Seq&gt;&amp;, const queue&lt;_Tp, _Seq&gt;&amp;);</div><div class="line"></div><div class="line"></div><div class="line">template &lt;class _Tp, class _Sequence&gt;</div><div class="line">class queue &#123;</div><div class="line"></div><div class="line">.....</div><div class="line"></div><div class="line">#ifdef __STL_MEMBER_TEMPLATES </div><div class="line">  template &lt;class _Tp1, class _Seq1&gt;</div><div class="line">  friend bool operator== (const queue&lt;_Tp1, _Seq1&gt;&amp;,</div><div class="line">                          const queue&lt;_Tp1, _Seq1&gt;&amp;);</div><div class="line">  template &lt;class _Tp1, class _Seq1&gt;</div><div class="line">  friend bool operator&lt; (const queue&lt;_Tp1, _Seq1&gt;&amp;,</div><div class="line">                         const queue&lt;_Tp1, _Seq1&gt;&amp;);</div><div class="line">#else /* __STL_MEMBER_TEMPLATES */</div><div class="line">  friend bool __STD_QUALIFIER</div><div class="line">  operator== __STL_NULL_TMPL_ARGS (const queue&amp;, const queue&amp;);</div><div class="line">  friend bool __STD_QUALIFIER</div><div class="line">  operator&lt;  __STL_NULL_TMPL_ARGS (const queue&amp;, const queue&amp;);</div><div class="line">#endif /* __STL_MEMBER_TEMPLATES */</div><div class="line"></div><div class="line">.....</div><div class="line"></div><div class="line">protected:</div><div class="line">  _Sequence c;</div><div class="line">public:</div><div class="line">  queue() : c() &#123;&#125;</div><div class="line">  explicit queue(const _Sequence&amp; __c) : c(__c) &#123;&#125;</div><div class="line"></div><div class="line">  bool empty() const &#123; return c.empty(); &#125;</div><div class="line">  size_type size() const &#123; return c.size(); &#125;</div><div class="line">  reference front() &#123; return c.front(); &#125;</div><div class="line">  const_reference front() const &#123; return c.front(); &#125;</div><div class="line">  reference back() &#123; return c.back(); &#125;</div><div class="line">  const_reference back() const &#123; return c.back(); &#125;</div><div class="line">  void push(const value_type&amp; __x) &#123; c.push_back(__x); &#125;</div><div class="line">  void pop() &#123; c.pop_front(); &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h1><p>堆也就是个完全二叉树。用个数组或者vector就能实现<br>stl中的heap是保证每个父节点大于等于子节点，每次插入删除节点需要重新调整树</p>
<h2 id="push-heap"><a href="#push-heap" class="headerlink" title="push_heap"></a>push_heap</h2><p>push操作,后调整树，查看父节点是不是符合要求<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">__push_heap(_RandomAccessIterator __first,</div><div class="line">            _Distance __holeIndex, _Distance __topIndex, _Tp __value)</div><div class="line">&#123;</div><div class="line">  _Distance __parent = (__holeIndex - <span class="number">1</span>) / <span class="number">2</span>;<span class="comment">//父节点</span></div><div class="line">  <span class="keyword">while</span> (__holeIndex &gt; __topIndex &amp;&amp; *(__first + __parent) &lt; __value) &#123;</div><div class="line">    <span class="comment">//调整节点</span></div><div class="line">    *(__first + __holeIndex) = *(__first + __parent);</div><div class="line">    __holeIndex = __parent;</div><div class="line">    __parent = (__holeIndex - <span class="number">1</span>) / <span class="number">2</span>;<span class="comment">//再判断父节点</span></div><div class="line">  &#125;    </div><div class="line">  *(__first + __holeIndex) = __value;<span class="comment">//把新值移动到新位置</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _RandomAccessIterator, <span class="keyword">class</span> _Distance, <span class="keyword">class</span> _Tp&gt;</div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> </div><div class="line">__push_heap_aux(_RandomAccessIterator __first,</div><div class="line">                _RandomAccessIterator __last, _Distance*, _Tp*)</div><div class="line">&#123;</div><div class="line">  __push_heap(__first, _Distance((__last - __first) - <span class="number">1</span>), _Distance(<span class="number">0</span>), </div><div class="line">              _Tp(*(__last - <span class="number">1</span>)));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//push_heap算法，这个时候值已经插入heap的最尾端，调用此函数调整heap</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _RandomAccessIterator&gt;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> </span></div><div class="line"><span class="title">push_heap</span><span class="params">(_RandomAccessIterator __first, _RandomAccessIterator __last)</span></div><div class="line">&#123;</div><div class="line">  __STL_REQUIRES(_RandomAccessIterator, _Mutable_RandomAccessIterator);</div><div class="line">  __STL_REQUIRES(<span class="keyword">typename</span> iterator_traits&lt;_RandomAccessIterator&gt;::value_type,</div><div class="line">                 _LessThanComparable);</div><div class="line">  __push_heap_aux(__first, __last,</div><div class="line">                  __DISTANCE_TYPE(__first), __VALUE_TYPE(__first));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="pop-heap"><a href="#pop-heap" class="headerlink" title="pop_heap"></a>pop_heap</h2><p>调整相关节点，使得上部全部填满，最底层空出区域。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _RandomAccessIterator, <span class="keyword">class</span> _Distance, <span class="keyword">class</span> _Tp&gt;</div><div class="line"><span class="keyword">void</span> </div><div class="line">__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,</div><div class="line">              _Distance __len, _Tp __value)</div><div class="line">&#123;</div><div class="line">  _Distance __topIndex = __holeIndex;</div><div class="line">  _Distance __secondChild = <span class="number">2</span> * __holeIndex + <span class="number">2</span>;</div><div class="line">  <span class="keyword">while</span> (__secondChild &lt; __len) &#123;</div><div class="line">    <span class="keyword">if</span> (*(__first + __secondChild) &lt; *(__first + (__secondChild - <span class="number">1</span>)))</div><div class="line">      __secondChild--;</div><div class="line">    *(__first + __holeIndex) = *(__first + __secondChild);</div><div class="line">    __holeIndex = __secondChild;</div><div class="line">    __secondChild = <span class="number">2</span> * (__secondChild + <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (__secondChild == __len) &#123;</div><div class="line">    *(__first + __holeIndex) = *(__first + (__secondChild - <span class="number">1</span>));</div><div class="line">    __holeIndex = __secondChild - <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  __push_heap(__first, __holeIndex, __topIndex, __value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _RandomAccessIterator, <span class="keyword">class</span> _Tp, <span class="keyword">class</span> _Distance&gt;</div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> </div><div class="line">__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,</div><div class="line">           _RandomAccessIterator __result, _Tp __value, _Distance*)</div><div class="line">&#123;</div><div class="line">  <span class="comment">//把first放到last-1</span></div><div class="line">  *__result = *__first;</div><div class="line">  <span class="comment">//重新整理first到last-1之间重新成为heap</span></div><div class="line">  __adjust_heap(__first, _Distance(<span class="number">0</span>), _Distance(__last - __first), __value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _RandomAccessIterator, <span class="keyword">class</span> _Tp&gt;</div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> </div><div class="line">__pop_heap_aux(_RandomAccessIterator __first, _RandomAccessIterator __last,</div><div class="line">               _Tp*)</div><div class="line">&#123;</div><div class="line">  <span class="comment">//pop出的是最大值，也就是删除掉first，把first放到last-1，然后重新整理first到last-1之间重新成为heap</span></div><div class="line">  <span class="comment">//这样之后只要去取last-1的值，就是弹出的值了。</span></div><div class="line">  __pop_heap(__first, __last - <span class="number">1</span>, __last - <span class="number">1</span>, </div><div class="line">             _Tp(*(__last - <span class="number">1</span>)), __DISTANCE_TYPE(__first));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//pop</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _RandomAccessIterator&gt;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop_heap</span><span class="params">(_RandomAccessIterator __first, </span></span></div><div class="line">                     _RandomAccessIterator __last)</div><div class="line">&#123;</div><div class="line">  __STL_REQUIRES(_RandomAccessIterator, _Mutable_RandomAccessIterator);</div><div class="line">  __STL_REQUIRES(<span class="keyword">typename</span> iterator_traits&lt;_RandomAccessIterator&gt;::value_type,</div><div class="line">                 _LessThanComparable);</div><div class="line">  __pop_heap_aux(__first, __last, __VALUE_TYPE(__first));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="make-heap"><a href="#make-heap" class="headerlink" title="make_heap"></a>make_heap</h2><p>不断调用__adjust_heap调整heap的话，最终会是一个heap<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _RandomAccessIterator, <span class="keyword">class</span> _Tp, <span class="keyword">class</span> _Distance&gt;</div><div class="line"><span class="keyword">void</span> </div><div class="line">__make_heap(_RandomAccessIterator __first,</div><div class="line">            _RandomAccessIterator __last, _Tp*, _Distance*)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> (__last - __first &lt; <span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">  _Distance __len = __last - __first;</div><div class="line">  _Distance __parent = (__len - <span class="number">2</span>)/<span class="number">2</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">    __adjust_heap(__first, __parent, __len, _Tp(*(__first + __parent)));</div><div class="line">    <span class="keyword">if</span> (__parent == <span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">    __parent--;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _RandomAccessIterator&gt;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> </span></div><div class="line"><span class="title">make_heap</span><span class="params">(_RandomAccessIterator __first, _RandomAccessIterator __last)</span></div><div class="line">&#123;</div><div class="line">  __STL_REQUIRES(_RandomAccessIterator, _Mutable_RandomAccessIterator);</div><div class="line">  __STL_REQUIRES(<span class="keyword">typename</span> iterator_traits&lt;_RandomAccessIterator&gt;::value_type,</div><div class="line">                 _LessThanComparable);</div><div class="line">  __make_heap(__first, __last,</div><div class="line">              __VALUE_TYPE(__first), __DISTANCE_TYPE(__first));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="sort-heap"><a href="#sort-heap" class="headerlink" title="sort_heap"></a>sort_heap</h2><p>对一个heap一直pop，最大值移到末尾，那么就是增序序列 了。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _RandomAccessIterator&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_heap</span><span class="params">(_RandomAccessIterator __first, _RandomAccessIterator __last)</span></span></div><div class="line">&#123;</div><div class="line">  __STL_REQUIRES(_RandomAccessIterator, _Mutable_RandomAccessIterator);</div><div class="line">  __STL_REQUIRES(<span class="keyword">typename</span> iterator_traits&lt;_RandomAccessIterator&gt;::value_type,</div><div class="line">                 _LessThanComparable);</div><div class="line">  <span class="keyword">while</span> (__last - __first &gt; <span class="number">1</span>)</div><div class="line">    pop_heap(__first, __last--);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h1><p>优先弹出权值高的项目，用上面的max_heap就能够实现。<br>操作不多。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">template &lt;class _Tp, </div><div class="line">          class _Sequence __STL_DEPENDENT_DEFAULT_TMPL(vector&lt;_Tp&gt;),</div><div class="line">          class _Compare</div><div class="line">          __STL_DEPENDENT_DEFAULT_TMPL(less&lt;typename _Sequence::value_type&gt;) &gt;</div><div class="line">class priority_queue &#123;</div><div class="line">......</div><div class="line">protected:</div><div class="line">  _Sequence c;</div><div class="line">  _Compare comp;</div><div class="line">public:</div><div class="line">  priority_queue() : c() &#123;&#125;</div><div class="line">  explicit priority_queue(const _Compare&amp; __x) :  c(), comp(__x) &#123;&#125;</div><div class="line">  priority_queue(const _Compare&amp; __x, const _Sequence&amp; __s) </div><div class="line">    : c(__s), comp(__x) </div><div class="line">    &#123; make_heap(c.begin(), c.end(), comp); &#125;</div><div class="line">.....</div><div class="line">  bool empty() const &#123; return c.empty(); &#125;</div><div class="line">  size_type size() const &#123; return c.size(); &#125;</div><div class="line">  const_reference top() const &#123; return c.front(); &#125;</div><div class="line">  void push(const value_type&amp; __x) &#123;</div><div class="line">    __STL_TRY &#123;</div><div class="line">      c.push_back(__x); </div><div class="line">      push_heap(c.begin(), c.end(), comp);</div><div class="line">    &#125;</div><div class="line">    __STL_UNWIND(c.clear());</div><div class="line">  &#125;</div><div class="line">  void pop() &#123;</div><div class="line">    __STL_TRY &#123;</div><div class="line">      pop_heap(c.begin(), c.end(), comp);</div><div class="line">      c.pop_back();</div><div class="line">    &#125;</div><div class="line">    __STL_UNWIND(c.clear());</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;容器分类&lt;br&gt;&lt;img src=&quot;/img/20161120124915.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h1 id=&quot;vector&quot;&gt;&lt;a href=&quot;#vector&quot; class=&quot;headerlink&quot; title=&quot;vector&quot;&gt;&lt;/a&gt;vector&lt;/h1&gt;&lt;p&gt;vector还是比较简单，也就是一个动态数组，提供了些操作，带三个指针，start/finish/end&lt;br&gt;核心就是动态调整内存的方法，也就是满了开大一倍空间，拷贝过去。&lt;br&gt;push_back等操作都是值语义的，拷贝传进来的内容放入到vector中。&lt;br&gt;因为是连续的空间，所有元素连续存储在一整块内存上，迭代器直接用的原始指针。&lt;/p&gt;
&lt;h1 id=&quot;list&quot;&gt;&lt;a href=&quot;#list&quot; class=&quot;headerlink&quot; title=&quot;list&quot;&gt;&lt;/a&gt;list&lt;/h1&gt;&lt;p&gt;list复杂些.&lt;br&gt;模型和常见的list是一致的，动态创建节点，插入。&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _List_node_base &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _List_node_base* _M_next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _List_node_base* _M_prev;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; _Tp&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _List_node : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; _List_node_base &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _Tp _M_data;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//迭代器base&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _List_iterator_base &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt;                     size_type;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ptrdiff_t&lt;/span&gt;                  difference_type;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; bidirectional_iterator_tag iterator_category;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _List_node_base* _M_node;&lt;span class=&quot;comment&quot;&gt;//节点指针&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _List_iterator_base(_List_node_base* __x) : _M_node(__x) &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _List_iterator_base() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; _M_incr() &amp;#123; _M_node = _M_node-&amp;gt;_M_next; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; _M_decr() &amp;#123; _M_node = _M_node-&amp;gt;_M_prev; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;==(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; _List_iterator_base&amp;amp; __x) &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _M_node == __x._M_node;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;!=(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; _List_iterator_base&amp;amp; __x) &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _M_node != __x._M_node;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//迭代器,重载了++ -- == * -&amp;gt;等操作&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; _Tp, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; _Ref, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; _Ptr&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _List_iterator : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; _List_iterator_base &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _List_iterator&amp;lt;_Tp,_Tp&amp;amp;,_Tp*&amp;gt;             iterator;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _List_iterator&amp;lt;_Tp,&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; _Tp&amp;amp;,&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; _Tp*&amp;gt; const_iterator;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _List_iterator&amp;lt;_Tp,_Ref,_Ptr&amp;gt;             _Self;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _Tp value_type;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _Ptr pointer;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _Ref reference;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _List_node&amp;lt;_Tp&amp;gt; _Node;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _List_iterator(_Node* __x) : _List_iterator_base(__x) &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _List_iterator() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _List_iterator(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; iterator&amp;amp; __x) : _List_iterator_base(__x._M_node) &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  reference &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;*() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ((_Node*) _M_node)-&amp;gt;_M_data; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifndef&lt;/span&gt; __SGI_STL_NO_ARROW_OPERATOR&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  pointer &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;-&amp;gt;() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;*()); &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* __SGI_STL_NO_ARROW_OPERATOR */&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _Self&amp;amp; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;++() &amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;_M_incr();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _Self &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;++(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) &amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _Self __tmp = *&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;_M_incr();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; __tmp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _Self&amp;amp; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;--() &amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;_M_decr();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _Self &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;--(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) &amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _Self __tmp = *&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;_M_decr();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; __tmp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/child/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="stl源码剖析" scheme="http://yoursite.com/child/tags/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>[读书笔记] stl源码剖析 第三章 迭代器</title>
    <link href="http://yoursite.com/child//blog/2016/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E8%BF%AD%E4%BB%A3%E5%99%A8.html"/>
    <id>http://yoursite.com/child//blog/2016/11/读书笔记-stl源码剖析-第三章-迭代器.html</id>
    <published>2016-11-17T12:32:26.000Z</published>
    <updated>2016-11-20T21:10:12.383Z</updated>
    
    <content type="html"><![CDATA[<p>迭代器是一种抽象的设计概念。iterator模式：提供一种方法，使能够依序寻访某个聚合物所含的各个元素，而又无需暴露该聚合物的内部表述方式。</p>
<h1 id="迭代器的设计思维-stl关键所在"><a href="#迭代器的设计思维-stl关键所在" class="headerlink" title="迭代器的设计思维-stl关键所在"></a>迭代器的设计思维-stl关键所在</h1><p>STL的中心思想在于：将数据容器和算法分开，彼此独立设计。容器和算法的泛型化。<br>迭代器就是扮演着粘胶角色。</p>
<h1 id="迭代器是一种smart-pointer"><a href="#迭代器是一种smart-pointer" class="headerlink" title="迭代器是一种smart pointer"></a>迭代器是一种smart pointer</h1><p>list迭代器stl的实现<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//listnode的基础类</span></div><div class="line"><span class="keyword">struct</span> _List_node_base &#123;</div><div class="line">  _List_node_base* _M_next;</div><div class="line">  _List_node_base* _M_prev;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//listnode</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _Tp&gt;</div><div class="line"><span class="keyword">struct</span> _List_node : <span class="keyword">public</span> _List_node_base &#123;</div><div class="line">  _Tp _M_data;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//迭代器基础类</span></div><div class="line"><span class="keyword">struct</span> _List_iterator_base &#123;</div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">size_t</span>                     size_type;</div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span>                  difference_type;</div><div class="line">  <span class="keyword">typedef</span> bidirectional_iterator_tag iterator_category;</div><div class="line"></div><div class="line">  _List_node_base* _M_node;<span class="comment">//包含一个node</span></div><div class="line"></div><div class="line">  _List_iterator_base(_List_node_base* __x) : _M_node(__x) &#123;&#125;</div><div class="line">  _List_iterator_base() &#123;&#125;</div><div class="line"></div><div class="line">  <span class="keyword">void</span> _M_incr() &#123; _M_node = _M_node-&gt;_M_next; &#125;</div><div class="line">  <span class="keyword">void</span> _M_decr() &#123; _M_node = _M_node-&gt;_M_prev; &#125;</div><div class="line"></div><div class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> _List_iterator_base&amp; __x) <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">return</span> _M_node == __x._M_node;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> _List_iterator_base&amp; __x) <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">return</span> _M_node != __x._M_node;</div><div class="line">  &#125;</div><div class="line">&#125;;  </div><div class="line"><span class="comment">//迭代器</span></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _Tp, <span class="keyword">class</span> _Ref, <span class="keyword">class</span> _Ptr&gt;</div><div class="line"><span class="keyword">struct</span> _List_iterator : <span class="keyword">public</span> _List_iterator_base &#123;</div><div class="line">  <span class="keyword">typedef</span> _List_iterator&lt;_Tp,_Tp&amp;,_Tp*&gt;             iterator;</div><div class="line">  <span class="keyword">typedef</span> _List_iterator&lt;_Tp,<span class="keyword">const</span> _Tp&amp;,<span class="keyword">const</span> _Tp*&gt; const_iterator;</div><div class="line">  <span class="keyword">typedef</span> _List_iterator&lt;_Tp,_Ref,_Ptr&gt;             _Self;</div><div class="line"></div><div class="line">  <span class="keyword">typedef</span> _Tp value_type;</div><div class="line">  <span class="keyword">typedef</span> _Ptr pointer;</div><div class="line">  <span class="keyword">typedef</span> _Ref reference;</div><div class="line">  <span class="keyword">typedef</span> _List_node&lt;_Tp&gt; _Node;</div><div class="line"></div><div class="line">  _List_iterator(_Node* __x) : _List_iterator_base(__x) &#123;&#125;</div><div class="line">  _List_iterator() &#123;&#125;</div><div class="line">  _List_iterator(<span class="keyword">const</span> iterator&amp; __x) : _List_iterator_base(__x._M_node) &#123;&#125;</div><div class="line"></div><div class="line">  reference <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> ((_Node*) _M_node)-&gt;_M_data; &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __SGI_STL_NO_ARROW_OPERATOR</span></div><div class="line">  pointer <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> &amp;(<span class="keyword">operator</span>*()); &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __SGI_STL_NO_ARROW_OPERATOR */</span></span></div><div class="line">  <span class="comment">//重载了几个操作实现了迭代器，不是很复杂</span></div><div class="line">  <span class="comment">//++i</span></div><div class="line">  _Self&amp; <span class="keyword">operator</span>++() &#123; </div><div class="line">    <span class="keyword">this</span>-&gt;_M_incr();</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//i++</span></div><div class="line">  _Self <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123; </div><div class="line">    _Self __tmp = *<span class="keyword">this</span>;</div><div class="line">    <span class="keyword">this</span>-&gt;_M_incr();</div><div class="line">    <span class="keyword">return</span> __tmp;</div><div class="line">  &#125;</div><div class="line">  _Self&amp; <span class="keyword">operator</span>--() &#123; </div><div class="line">    <span class="keyword">this</span>-&gt;_M_decr();</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">  _Self <span class="keyword">operator</span>--(<span class="keyword">int</span>) &#123; </div><div class="line">    _Self __tmp = *<span class="keyword">this</span>;</div><div class="line">    <span class="keyword">this</span>-&gt;_M_decr();</div><div class="line">    <span class="keyword">return</span> __tmp;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="Traits编程技法"><a href="#Traits编程技法" class="headerlink" title="Traits编程技法"></a>Traits编程技法</h1><p>之前就见到用过，通过类型获取，其余的类型。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _Category, <span class="keyword">class</span> _Tp, <span class="keyword">class</span> _Distance = <span class="keyword">ptrdiff_t</span>,</div><div class="line">          <span class="keyword">class</span> _Pointer = _Tp*, <span class="keyword">class</span> _Reference = _Tp&amp;&gt;</div><div class="line"><span class="keyword">struct</span> iterator &#123;</div><div class="line">  <span class="keyword">typedef</span> _Category  iterator_category;</div><div class="line">  <span class="keyword">typedef</span> _Tp        value_type;</div><div class="line">  <span class="keyword">typedef</span> _Distance  difference_type;</div><div class="line">  <span class="keyword">typedef</span> _Pointer   pointer;</div><div class="line">  <span class="keyword">typedef</span> _Reference reference;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _Iterator&gt;</div><div class="line"><span class="keyword">struct</span> iterator_traits &#123;</div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::iterator_category iterator_category;</div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::value_type        value_type;</div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::difference_type   difference_type;</div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::pointer           pointer;</div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::reference         reference;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//对原生指针特化</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _Tp&gt;</div><div class="line"><span class="keyword">struct</span> iterator_traits&lt;_Tp*&gt; &#123;</div><div class="line">  <span class="keyword">typedef</span> random_access_iterator_tag iterator_category;</div><div class="line">  <span class="keyword">typedef</span> _Tp                         value_type;</div><div class="line">  <span class="comment">//ptrdiff_t是C/C++标准库中定义的一个与机器相关的数据类型。ptrdiff_t类型变量通常用来保存两个指针减法操作的结果。ptrdiff_t定义在stddef.h（cstddef）这个文件内。ptrdiff_t通常被定义为long int类型。</span></div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span>                   difference_type;</div><div class="line">  <span class="keyword">typedef</span> _Tp*                        pointer;</div><div class="line">  <span class="keyword">typedef</span> _Tp&amp;                        reference;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _Tp&gt;</div><div class="line"><span class="keyword">struct</span> iterator_traits&lt;<span class="keyword">const</span> _Tp*&gt; &#123;</div><div class="line">  <span class="keyword">typedef</span> random_access_iterator_tag iterator_category;</div><div class="line">  <span class="keyword">typedef</span> _Tp                         value_type;</div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span>                   difference_type;</div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">const</span> _Tp*                  pointer;</div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">const</span> _Tp&amp;                  reference;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>迭代器的分类：<br>input iter：只读iter<br>output iter:只写iter<br>forward iter:允许写入型算法在这种迭代器所形成的区间操作，前向迭代器<br>bidirectional iterator：双向移动iter。<br>random access iter：前三种支持++,第四种支持++ –。这种支持所有指针的算术能力。</p>
<p><img src="/img/20161116205706.png" alt=""><br>typedef typename _Iterator::iterator_category iterator_category;的作用就是能够在编译器发现迭代器的类型，选用最合适的函数版本。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> input_iterator_tag &#123;&#125;;</div><div class="line"><span class="keyword">struct</span> output_iterator_tag &#123;&#125;;</div><div class="line"><span class="keyword">struct</span> forward_iterator_tag : <span class="keyword">public</span> input_iterator_tag &#123;&#125;;</div><div class="line"><span class="keyword">struct</span> bidirectional_iterator_tag : <span class="keyword">public</span> forward_iterator_tag &#123;&#125;;</div><div class="line"><span class="keyword">struct</span> random_access_iterator_tag : <span class="keyword">public</span> bidirectional_iterator_tag &#123;&#125;;</div></pre></td></tr></table></figure></p>
<p>例子<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _InputIter, <span class="keyword">class</span> _Distance&gt;</div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> __advance(_InputIter&amp; __i, _Distance __n, input_iterator_tag) &#123;</div><div class="line">  <span class="keyword">while</span> (__n--) ++__i;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _BidirectionalIterator, <span class="keyword">class</span> _Distance&gt;</div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> __advance(_BidirectionalIterator&amp; __i, _Distance __n, </div><div class="line">                      bidirectional_iterator_tag) &#123;</div><div class="line">  __STL_REQUIRES(_BidirectionalIterator, _BidirectionalIterator);</div><div class="line">  <span class="keyword">if</span> (__n &gt;= <span class="number">0</span>)</div><div class="line">    <span class="keyword">while</span> (__n--) ++__i;</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="keyword">while</span> (__n++) --__i;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _RandomAccessIterator, <span class="keyword">class</span> _Distance&gt;</div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> __advance(_RandomAccessIterator&amp; __i, _Distance __n, </div><div class="line">                      random_access_iterator_tag) &#123;</div><div class="line">  __STL_REQUIRES(_RandomAccessIterator, _RandomAccessIterator);</div><div class="line">  __i += __n;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _InputIterator, <span class="keyword">class</span> _Distance&gt;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">advance</span><span class="params">(_InputIterator&amp; __i, _Distance __n)</span> </span>&#123;</div><div class="line">  __STL_REQUIRES(_InputIterator, _InputIterator);</div><div class="line">  <span class="comment">//通过下面的函数，选用合适的版本</span></div><div class="line">  <span class="comment">//不需要传递参数，能够在编译器选定版本</span></div><div class="line">  __advance(__i, __n, iterator_category(__i));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="type-traits"><a href="#type-traits" class="headerlink" title="__type_traits"></a>__type_traits</h1><p>提供一种机制，允许针对不同的型别熟悉，完成函数派送。<br>在内存配置器中就用到了，比如有没有拷贝构造函数等</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> __true_type &#123;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> __false_type &#123;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//选择使用__false_type为struct的目的是为了类型推倒，而不是使用bool值作为参数的话只是运行时的选择。</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _Tp&gt;</div><div class="line"><span class="keyword">struct</span> __type_traits &#123; </div><div class="line">   <span class="keyword">typedef</span> __true_type     this_dummy_member_must_be_first;</div><div class="line">                   <span class="comment">/* Do not remove this member. It informs a compiler which</span></div><div class="line">                      automatically specializes __type_traits that this</div><div class="line">                      __type_traits template is special. It just makes sure that</div><div class="line">                      things work if an implementation is using a template</div><div class="line">                      called __type_traits for something unrelated. */</div><div class="line"></div><div class="line">   <span class="comment">/* The following restrictions should be observed for the sake of</span></div><div class="line">      compilers which automatically produce type specific specializations </div><div class="line">      of this class:</div><div class="line">          - You may reorder the members below if you wish</div><div class="line">          - You may remove any of the members below if you wish</div><div class="line">          - You must not rename members without making the corresponding</div><div class="line">            name change in the compiler</div><div class="line">          - Members you add will be treated like regular members unless</div><div class="line">            you add the appropriate support in the compiler. */</div><div class="line"> </div><div class="line"></div><div class="line">   <span class="keyword">typedef</span> __false_type    has_trivial_default_constructor;</div><div class="line">   <span class="keyword">typedef</span> __false_type    has_trivial_copy_constructor;</div><div class="line">   <span class="keyword">typedef</span> __false_type    has_trivial_assignment_operator;</div><div class="line">   <span class="keyword">typedef</span> __false_type    has_trivial_destructor;</div><div class="line">   <span class="keyword">typedef</span> __false_type    is_POD_type;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后在这个文件里定义了大量的特化，主要是特化C++标准类型。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">__STL_TEMPLATE_NULL <span class="keyword">struct</span> __type_traits&lt;<span class="keyword">bool</span>&gt; &#123;</div><div class="line">   <span class="keyword">typedef</span> __true_type    has_trivial_default_constructor;</div><div class="line">   <span class="keyword">typedef</span> __true_type    has_trivial_copy_constructor;</div><div class="line">   <span class="keyword">typedef</span> __true_type    has_trivial_assignment_operator;</div><div class="line">   <span class="keyword">typedef</span> __true_type    has_trivial_destructor;</div><div class="line">   <span class="keyword">typedef</span> __true_type    is_POD_type;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//等。。。</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迭代器是一种抽象的设计概念。iterator模式：提供一种方法，使能够依序寻访某个聚合物所含的各个元素，而又无需暴露该聚合物的内部表述方式。&lt;/p&gt;
&lt;h1 id=&quot;迭代器的设计思维-stl关键所在&quot;&gt;&lt;a href=&quot;#迭代器的设计思维-stl关键所在&quot; class=&quot;headerlink&quot; title=&quot;迭代器的设计思维-stl关键所在&quot;&gt;&lt;/a&gt;迭代器的设计思维-stl关键所在&lt;/h1&gt;&lt;p&gt;STL的中心思想在于：将数据容器和算法分开，彼此独立设计。容器和算法的泛型化。&lt;br&gt;迭代器就是扮演着粘胶角色。&lt;/p&gt;
&lt;h1 id=&quot;迭代器是一种smart-pointer&quot;&gt;&lt;a href=&quot;#迭代器是一种smart-pointer&quot; class=&quot;headerlink&quot; title=&quot;迭代器是一种smart pointer&quot;&gt;&lt;/a&gt;迭代器是一种smart pointer&lt;/h1&gt;&lt;p&gt;list迭代器stl的实现&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//listnode的基础类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _List_node_base &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _List_node_base* _M_next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _List_node_base* _M_prev;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//listnode&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; _Tp&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _List_node : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; _List_node_base &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _Tp _M_data;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//迭代器基础类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _List_iterator_base &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt;                     size_type;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ptrdiff_t&lt;/span&gt;                  difference_type;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; bidirectional_iterator_tag iterator_category;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _List_node_base* _M_node;&lt;span class=&quot;comment&quot;&gt;//包含一个node&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _List_iterator_base(_List_node_base* __x) : _M_node(__x) &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _List_iterator_base() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; _M_incr() &amp;#123; _M_node = _M_node-&amp;gt;_M_next; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; _M_decr() &amp;#123; _M_node = _M_node-&amp;gt;_M_prev; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;==(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; _List_iterator_base&amp;amp; __x) &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _M_node == __x._M_node;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;!=(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; _List_iterator_base&amp;amp; __x) &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _M_node != __x._M_node;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//迭代器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; _Tp, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; _Ref, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; _Ptr&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _List_iterator : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; _List_iterator_base &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _List_iterator&amp;lt;_Tp,_Tp&amp;amp;,_Tp*&amp;gt;             iterator;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _List_iterator&amp;lt;_Tp,&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; _Tp&amp;amp;,&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; _Tp*&amp;gt; const_iterator;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _List_iterator&amp;lt;_Tp,_Ref,_Ptr&amp;gt;             _Self;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _Tp value_type;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _Ptr pointer;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _Ref reference;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _List_node&amp;lt;_Tp&amp;gt; _Node;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _List_iterator(_Node* __x) : _List_iterator_base(__x) &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _List_iterator() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _List_iterator(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; iterator&amp;amp; __x) : _List_iterator_base(__x._M_node) &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  reference &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;*() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ((_Node*) _M_node)-&amp;gt;_M_data; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifndef&lt;/span&gt; __SGI_STL_NO_ARROW_OPERATOR&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  pointer &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;-&amp;gt;() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;*()); &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* __SGI_STL_NO_ARROW_OPERATOR */&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//重载了几个操作实现了迭代器，不是很复杂&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//++i&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _Self&amp;amp; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;++() &amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;_M_incr();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//i++&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _Self &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;++(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) &amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _Self __tmp = *&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;_M_incr();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; __tmp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _Self&amp;amp; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;--() &amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;_M_decr();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _Self &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;--(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) &amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _Self __tmp = *&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;_M_decr();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; __tmp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/child/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="stl源码剖析" scheme="http://yoursite.com/child/tags/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>[读书笔记] stl源码剖析 第一章、第二章 概论、内存配置器</title>
    <link href="http://yoursite.com/child//blog/2016/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E7%AC%AC%E4%B8%80%E3%80%81%E4%BA%8C%E7%AB%A0-%E6%A6%82%E8%AE%BA%E3%80%81%E5%86%85%E5%AD%98%E9%85%8D%E7%BD%AE%E5%99%A8.html"/>
    <id>http://yoursite.com/child//blog/2016/11/读书笔记-stl源码剖析-第一、二章-概论、内存配置器.html</id>
    <published>2016-11-16T00:32:26.000Z</published>
    <updated>2016-11-16T14:13:43.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h1><p>第一章基本都是C++基础的知识，读了《C++ Primer》的话都懂。关于各种C++的特性、STL特性都有。</p>
<h2 id="STL六大组件-功能与运用"><a href="#STL六大组件-功能与运用" class="headerlink" title="STL六大组件 功能与运用"></a>STL六大组件 功能与运用</h2><p>STL提供六大组件，彼此可以组合套用</p>
<ol>
<li>容器：各种数据结构。Vector,list,deque,set,map</li>
<li>算法：各种常用算法如sort,search,copy,erase</li>
<li>迭代器：扮演容器与算法之间的粘合剂，所谓的泛型指针。五种类型</li>
<li>仿函数：行为类似函数，可以作为算法的某种策略。仿函数是重载了()的class或者class template，一般函数指针可视为狭义的仿函数</li>
<li>配接器：一种用来修饰容器或者仿函数或迭代器接口的东西。</li>
<li>配置器：负责控件的配置与管理。</li>
</ol>
<a id="more"></a>
<p><img src="/img/20161108212017.png" alt=""></p>
<h1 id="空间配置器"><a href="#空间配置器" class="headerlink" title="空间配置器"></a>空间配置器</h1><p>SGI STL时间了一个专属的，拥有次层配置能力的、效率优越的特殊配置器。<br>SGI STL的缺省分配器都是其自己的分配器。</p>
<h2 id="SGI特殊的空间配置器-std-alloc"><a href="#SGI特殊的空间配置器-std-alloc" class="headerlink" title="SGI特殊的空间配置器 std::alloc"></a>SGI特殊的空间配置器 std::alloc</h2><p>使用::construct() ::destroy()构造和析构<br>使用alloc::allocate() alloc::deallocate()分配 释放<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//直接利用这个类能够用指定类型指针，转换为其他引用等</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _Tp&gt;</div><div class="line"><span class="keyword">struct</span> iterator_traits&lt;<span class="keyword">const</span> _Tp*&gt; &#123;</div><div class="line">  <span class="keyword">typedef</span> random_access_iterator_tag iterator_category;</div><div class="line">  <span class="keyword">typedef</span> _Tp                         value_type;</div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span>                   difference_type;</div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">const</span> _Tp*                  pointer;</div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">const</span> _Tp&amp;                  reference;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果有non-trivial 析构函数</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _ForwardIterator&gt;</div><div class="line"><span class="keyword">void</span></div><div class="line">__destroy_aux(_ForwardIterator __first, _ForwardIterator __last, __false_type)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">for</span> ( ; __first != __last; ++__first)</div><div class="line">    destroy(&amp;*__first);</div><div class="line">&#125;</div><div class="line"><span class="comment">//如果没有non-trivial 析构函数</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _ForwardIterator&gt; </div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type) &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _ForwardIterator, <span class="keyword">class</span> _Tp&gt;</div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> </div><div class="line">__destroy(_ForwardIterator __first, _ForwardIterator __last, _Tp*)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> __type_traits&lt;_Tp&gt;::has_trivial_destructor</div><div class="line">          _Trivial_destructor;</div><div class="line">  __destroy_aux(__first, __last, _Trivial_destructor());<span class="comment">//_Trivial_destructor()将会是_true_type 或者_false_type</span></div><div class="line">  <span class="comment">//利用模板和特化</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _ForwardIterator&gt;</div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _Destroy(_ForwardIterator __first, _ForwardIterator __last) &#123;</div><div class="line">  __destroy(__first, __last, __VALUE_TYPE(__first));<span class="comment">//__VALUE_TYPE(__first)获取到了类型的指针，然后调用上面函数</span></div><div class="line">  <span class="comment">//利用模板和特化</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="空间的配置与释放-std-alloc"><a href="#空间的配置与释放-std-alloc" class="headerlink" title="空间的配置与释放 std::alloc"></a>空间的配置与释放 std::alloc</h2><p>sgi设计了双层级配置器，第一级配置器直接使用malloc()和free()，第二级配置器则视情况采用不同的策略。<br>当分配大于128bytes时候调用第一级，小于128时候，为了降低额外负担，使用负责的memory pool整理方式。</p>
<h3 id="第一级配置器-malloc-alloc-template剖析"><a href="#第一级配置器-malloc-alloc-template剖析" class="headerlink" title="第一级配置器 __malloc_alloc_template剖析"></a>第一级配置器 __malloc_alloc_template剖析</h3><p>以malloc free realloc实现。<br>然后自己实现了一个new handler机制。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> __inst&gt;</div><div class="line"><span class="keyword">void</span>*</div><div class="line">__malloc_alloc_template&lt;__inst&gt;::_S_oom_malloc(<span class="keyword">size_t</span> __n)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">void</span> (* __my_malloc_handler)();</div><div class="line">    <span class="keyword">void</span>* __result;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        __my_malloc_handler = __malloc_alloc_oom_handler;</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> == __my_malloc_handler) &#123; __THROW_BAD_ALLOC; &#125;</div><div class="line">        (*__my_malloc_handler)();</div><div class="line">        __result = <span class="built_in">malloc</span>(__n);</div><div class="line">        <span class="keyword">if</span> (__result) <span class="keyword">return</span>(__result);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="第二级配置器"><a href="#第二级配置器" class="headerlink" title="第二级配置器"></a>第二级配置器</h3><p>SIG第二级配置器的做法，如果区块够大，超过128bytes时候，就移交第一级配置器处理。当区块小鱼128bytes时候，则以内存池管理。每次配置一大块内存，并维护对应之自由链表，下次若再有相同大小的内存需求从free-lists中拨出。如果客端释放小额区块，就由配置器回收到fres-lists中。<br>分配区块时候，自动上调到8的倍数，并维护16个fres-lists,分别管理大小为8/16/24/32/40/48/56/64/72/80/88/96/104/112/120/128的小额区块。</p>
<blockquote>
<p>其实这里和公司用的NG_malloc是一样的策略。ng_malloc之前对于大小的区分是256k的样子，更大。后来又改写了，支持更大的内存块了。</p>
</blockquote>
<p>节点如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">__PRIVATE:</div><div class="line">  <span class="keyword">union</span> _Obj &#123;</div><div class="line">        <span class="keyword">union</span> _Obj* _M_free_list_link;</div><div class="line">        <span class="keyword">char</span> _M_client_data[<span class="number">1</span>];    <span class="comment">/* The client sees this.        */</span></div><div class="line">  &#125;;</div></pre></td></tr></table></figure></p>
<p>使用union的话，可以不用每次都去转换。char _M_client_data的存在是，方便去取首地址。实际上下面用到的就是_M_free_list_link，用来作为链表。这样的话，就可以用一个4字节的空间(32位机器指针大小)，实现两个功能。而不是使用struct，因为那样就会浪费空间。</p>
<h4 id="空间配置函数allocate"><a href="#空间配置函数allocate" class="headerlink" title="空间配置函数allocate()"></a>空间配置函数allocate()</h4><p>功能：判断大小，大于128用第一级分配，小于128就查找free list。如果free list中有可用的区块，就直接拿来用，如果没有就将区块大小上调至8的倍数边界，然后调用refill()，准备为free list重新填充空间。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">allocate</span><span class="params">(<span class="keyword">size_t</span> __n)</span></span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">void</span>* __ret = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">//超过设定的最大值就调用第一级配置器，STL设置为128</span></div><div class="line">    <span class="keyword">if</span> (__n &gt; (<span class="keyword">size_t</span>) _MAX_BYTES) &#123;</div><div class="line">      __ret = malloc_alloc::allocate(__n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">//寻找合适的free lists中适当的一个</span></div><div class="line">      _Obj* __STL_VOLATILE* __my_free_list</div><div class="line">          = _S_free_list + _S_freelist_index(__n);</div><div class="line">      <span class="comment">// Acquire the lock here with a constructor call.</span></div><div class="line">      <span class="comment">// This ensures that it is released in exit or during stack</span></div><div class="line">      <span class="comment">// unwinding.</span></div><div class="line"><span class="meta">#     <span class="meta-keyword">ifndef</span> _NOTHREADS</span></div><div class="line">      <span class="comment">/*REFERENCED*/</span></div><div class="line">      <span class="comment">//多线程锁</span></div><div class="line">      _Lock __lock_instance;</div><div class="line"><span class="meta">#     <span class="meta-keyword">endif</span></span></div><div class="line">      _Obj* __RESTRICT __result = *__my_free_list;</div><div class="line">      <span class="keyword">if</span> (__result == <span class="number">0</span>)</div><div class="line">        <span class="comment">//没找到的话，就重新填充free list</span></div><div class="line">        __ret = _S_refill(_S_round_up(__n));</div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">//指向后一个成员</span></div><div class="line">        *__my_free_list = __result -&gt; _M_free_list_link;</div><div class="line">        __ret = __result;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> __ret;</div><div class="line">  &#125;;</div></pre></td></tr></table></figure></p>
<h4 id="空间释放函数-deallocate"><a href="#空间释放函数-deallocate" class="headerlink" title="空间释放函数 deallocate()"></a>空间释放函数 deallocate()</h4><p>先判断大小，大于128调用第一级，小于128找出对应的free list，将区块回收。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* __p may not be 0 */</span></div><div class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deallocate</span><span class="params">(<span class="keyword">void</span>* __p, <span class="keyword">size_t</span> __n)</span></span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> (__n &gt; (<span class="keyword">size_t</span>) _MAX_BYTES)</div><div class="line">      malloc_alloc::deallocate(__p, __n);</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      _Obj* __STL_VOLATILE*  __my_free_list</div><div class="line">          = _S_free_list + _S_freelist_index(__n);</div><div class="line">      _Obj* __q = (_Obj*)__p;</div><div class="line"></div><div class="line">      <span class="comment">// acquire lock</span></div><div class="line"><span class="meta">#       <span class="meta-keyword">ifndef</span> _NOTHREADS</span></div><div class="line">      <span class="comment">/*REFERENCED*/</span></div><div class="line">      _Lock __lock_instance;</div><div class="line"><span class="meta">#       <span class="meta-keyword">endif</span> <span class="comment">/* _NOTHREADS */</span></span></div><div class="line">      __q -&gt; _M_free_list_link = *__my_free_list;</div><div class="line">      *__my_free_list = __q;</div><div class="line">      <span class="comment">// lock is released here</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h4 id="重新填充free-lists"><a href="#重新填充free-lists" class="headerlink" title="重新填充free lists"></a>重新填充free lists</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span> __threads, <span class="keyword">int</span> __inst&gt;</div><div class="line"><span class="keyword">void</span>*</div><div class="line">__default_alloc_template&lt;__threads, __inst&gt;::_S_refill(<span class="keyword">size_t</span> __n)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> __nobjs = <span class="number">20</span>;</div><div class="line">    <span class="comment">//尝试分配空间 __nobjs是引用传递，作为返回值</span></div><div class="line">    <span class="keyword">char</span>* __chunk = _S_chunk_alloc(__n, __nobjs);</div><div class="line">    _Obj* __STL_VOLATILE* __my_free_list;</div><div class="line">    _Obj* __result;</div><div class="line">    _Obj* __current_obj;</div><div class="line">    _Obj* __next_obj;</div><div class="line">    <span class="keyword">int</span> __i;</div><div class="line">    </div><div class="line">    <span class="comment">//对只分配出一个的时候的优化</span></div><div class="line">    <span class="keyword">if</span> (<span class="number">1</span> == __nobjs) <span class="keyword">return</span>(__chunk);</div><div class="line">    __my_free_list = _S_free_list + _S_freelist_index(__n);</div><div class="line"></div><div class="line">    <span class="comment">//形成链表</span></div><div class="line">    <span class="comment">/* Build free list in chunk */</span></div><div class="line">      __result = (_Obj*)__chunk;</div><div class="line">      *__my_free_list = __next_obj = (_Obj*)(__chunk + __n);</div><div class="line">      <span class="keyword">for</span> (__i = <span class="number">1</span>; ; __i++) &#123;</div><div class="line">        __current_obj = __next_obj;</div><div class="line">        __next_obj = (_Obj*)((<span class="keyword">char</span>*)__next_obj + __n);</div><div class="line">        <span class="keyword">if</span> (__nobjs - <span class="number">1</span> == __i) &#123;</div><div class="line">            __current_obj -&gt; _M_free_list_link = <span class="number">0</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            __current_obj -&gt; _M_free_list_link = __next_obj;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    <span class="keyword">return</span>(__result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="内存池"><a href="#内存池" class="headerlink" title="内存池"></a>内存池</h4><p>从内存池中取空间给free list 使用，是chunk_alloc的工作<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span> __threads, <span class="keyword">int</span> __inst&gt;</div><div class="line"><span class="keyword">char</span>*</div><div class="line">__default_alloc_template&lt;__threads, __inst&gt;::_S_chunk_alloc(<span class="keyword">size_t</span> __size, </div><div class="line">                                                            <span class="keyword">int</span>&amp; __nobjs)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span>* __result;<span class="comment">//返回值</span></div><div class="line">    <span class="keyword">size_t</span> __total_bytes = __size * __nobjs;<span class="comment">//需要分配的空间大小</span></div><div class="line">    <span class="keyword">size_t</span> __bytes_left = _S_end_free - _S_start_free;<span class="comment">//内存池剩余空间</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (__bytes_left &gt;= __total_bytes) &#123;</div><div class="line">        __result = _S_start_free;<span class="comment">//返回</span></div><div class="line">        _S_start_free += __total_bytes;<span class="comment">//内存池可用空间起始处后移</span></div><div class="line">        <span class="keyword">return</span>(__result);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__bytes_left &gt;= __size) &#123;<span class="comment">//能够分配一部分空间</span></div><div class="line">        __nobjs = (<span class="keyword">int</span>)(__bytes_left/__size);<span class="comment">//判断能够分配的块数</span></div><div class="line">        __total_bytes = __size * __nobjs;</div><div class="line">        __result = _S_start_free;</div><div class="line">        _S_start_free += __total_bytes;<span class="comment">//与上同</span></div><div class="line">        <span class="keyword">return</span>(__result);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//不能够分配一块的大小</span></div><div class="line">        <span class="keyword">size_t</span> __bytes_to_get = </div><div class="line">	  <span class="number">2</span> * __total_bytes + _S_round_up(_S_heap_size &gt;&gt; <span class="number">4</span>);</div><div class="line">        <span class="comment">// Try to make use of the left-over piece.</span></div><div class="line">        <span class="keyword">if</span> (__bytes_left &gt; <span class="number">0</span>) &#123;<span class="comment">//把剩余空间，分配到合适的free list</span></div><div class="line">            _Obj* __STL_VOLATILE* __my_free_list =</div><div class="line">                        _S_free_list + _S_freelist_index(__bytes_left);</div><div class="line"></div><div class="line">            ((_Obj*)_S_start_free) -&gt; _M_free_list_link = *__my_free_list;</div><div class="line">            *__my_free_list = (_Obj*)_S_start_free;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//从堆上重新分配出部分空间</span></div><div class="line">        _S_start_free = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(__bytes_to_get);</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> == _S_start_free) &#123;</div><div class="line">            <span class="keyword">size_t</span> __i;</div><div class="line">            _Obj* __STL_VOLATILE* __my_free_list;</div><div class="line">	    _Obj* __p;</div><div class="line">            <span class="comment">// Try to make do with what we have.  That can't</span></div><div class="line">            <span class="comment">// hurt.  We do not try smaller requests, since that tends</span></div><div class="line">            <span class="comment">// to result in disaster on multi-process machines.</span></div><div class="line">            <span class="keyword">for</span> (__i = __size;</div><div class="line">                 __i &lt;= (<span class="keyword">size_t</span>) _MAX_BYTES;</div><div class="line">                 __i += (<span class="keyword">size_t</span>) _ALIGN) &#123;</div><div class="line">                __my_free_list = _S_free_list + _S_freelist_index(__i);</div><div class="line">                __p = *__my_free_list;</div><div class="line">                <span class="comment">//malloc失败的话，在现有的free list中找未用的、足够大的fee list分配</span></div><div class="line">                <span class="keyword">if</span> (<span class="number">0</span> != __p) &#123;</div><div class="line">                    *__my_free_list = __p -&gt; _M_free_list_link;</div><div class="line">                    _S_start_free = (<span class="keyword">char</span>*)__p;</div><div class="line">                    _S_end_free = _S_start_free + __i;</div><div class="line">                    <span class="keyword">return</span>(_S_chunk_alloc(__size, __nobjs));</div><div class="line">                    <span class="comment">// Any leftover piece will eventually make it to the</span></div><div class="line">                    <span class="comment">// right free list.</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">	    _S_end_free = <span class="number">0</span>;	<span class="comment">// In case of exception.</span></div><div class="line">            _S_start_free = (<span class="keyword">char</span>*)malloc_alloc::allocate(__bytes_to_get);</div><div class="line">            <span class="comment">// This should either throw an</span></div><div class="line">            <span class="comment">// exception or remedy the situation.  Thus we assume it</span></div><div class="line">            <span class="comment">// succeeded.</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//拿到新空间</span></div><div class="line">        _S_heap_size += __bytes_to_get;</div><div class="line">        _S_end_free = _S_start_free + __bytes_to_get;</div><div class="line">        <span class="keyword">return</span>(_S_chunk_alloc(__size, __nobjs));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="内存基本处理工具"><a href="#内存基本处理工具" class="headerlink" title="内存基本处理工具"></a>内存基本处理工具</h3><p>uninitialized_copy、uninitialized_fill、uninitialized_fill_n用来处理一些特殊的复制构造的情况。</p>
<h4 id="uninitialized-fill-n实现"><a href="#uninitialized-fill-n实现" class="headerlink" title="uninitialized_fill_n实现"></a>uninitialized_fill_n实现</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _ForwardIter, <span class="keyword">class</span> _Size, <span class="keyword">class</span> _Tp&gt;</div><div class="line"><span class="keyword">inline</span> _<span class="function">ForwardIter </span></div><div class="line"><span class="title">uninitialized_fill_n</span><span class="params">(_ForwardIter __first, _Size __n, <span class="keyword">const</span> _Tp&amp; __x)</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> __uninitialized_fill_n(__first, __n, __x, __VALUE_TYPE(__first));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _ForwardIter, <span class="keyword">class</span> _Size, <span class="keyword">class</span> _Tp, <span class="keyword">class</span> _Tp1&gt;</div><div class="line"><span class="keyword">inline</span> _ForwardIter </div><div class="line">__uninitialized_fill_n(_ForwardIter __first, _Size __n, <span class="keyword">const</span> _Tp&amp; __x, _Tp1*)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> __type_traits&lt;_Tp1&gt;::is_POD_type _Is_POD;</div><div class="line">  <span class="keyword">return</span> __uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());<span class="comment">//判断有没有复制构造函数，调用不同的函数处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//没有复制构造函数的版本</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _ForwardIter, <span class="keyword">class</span> _Size, <span class="keyword">class</span> _Tp&gt;</div><div class="line"><span class="keyword">inline</span> _ForwardIter</div><div class="line">__uninitialized_fill_n_aux(_ForwardIter __first, _Size __n,</div><div class="line">                           <span class="keyword">const</span> _Tp&amp; __x, __true_type)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> fill_n(__first, __n, __x);</div><div class="line">&#125;</div><div class="line"><span class="comment">//有复制构造函数的版本</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _ForwardIter, <span class="keyword">class</span> _Size, <span class="keyword">class</span> _Tp&gt;</div><div class="line">_ForwardIter</div><div class="line">__uninitialized_fill_n_aux(_ForwardIter __first, _Size __n,</div><div class="line">                           <span class="keyword">const</span> _Tp&amp; __x, __false_type)</div><div class="line">&#123;</div><div class="line">  _ForwardIter __cur = __first;</div><div class="line">  __STL_TRY &#123;</div><div class="line">    <span class="keyword">for</span> ( ; __n &gt; <span class="number">0</span>; --__n, ++__cur)</div><div class="line">      _Construct(&amp;*__cur, __x);</div><div class="line">    <span class="keyword">return</span> __cur;</div><div class="line">  &#125;</div><div class="line">  __STL_UNWIND(_Destroy(__first, __cur));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>uninitialized_copy、uninitialized_fill的实现类似</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概论&quot;&gt;&lt;a href=&quot;#概论&quot; class=&quot;headerlink&quot; title=&quot;概论&quot;&gt;&lt;/a&gt;概论&lt;/h1&gt;&lt;p&gt;第一章基本都是C++基础的知识，读了《C++ Primer》的话都懂。关于各种C++的特性、STL特性都有。&lt;/p&gt;
&lt;h2 id=&quot;STL六大组件-功能与运用&quot;&gt;&lt;a href=&quot;#STL六大组件-功能与运用&quot; class=&quot;headerlink&quot; title=&quot;STL六大组件 功能与运用&quot;&gt;&lt;/a&gt;STL六大组件 功能与运用&lt;/h2&gt;&lt;p&gt;STL提供六大组件，彼此可以组合套用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;容器：各种数据结构。Vector,list,deque,set,map&lt;/li&gt;
&lt;li&gt;算法：各种常用算法如sort,search,copy,erase&lt;/li&gt;
&lt;li&gt;迭代器：扮演容器与算法之间的粘合剂，所谓的泛型指针。五种类型&lt;/li&gt;
&lt;li&gt;仿函数：行为类似函数，可以作为算法的某种策略。仿函数是重载了()的class或者class template，一般函数指针可视为狭义的仿函数&lt;/li&gt;
&lt;li&gt;配接器：一种用来修饰容器或者仿函数或迭代器接口的东西。&lt;/li&gt;
&lt;li&gt;配置器：负责控件的配置与管理。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/child/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="stl源码剖析" scheme="http://yoursite.com/child/tags/stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>阅读谷歌编程规范</title>
    <link href="http://yoursite.com/child//blog/2016/11/%E9%98%85%E8%AF%BB%E8%B0%B7%E6%AD%8C%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83.html"/>
    <id>http://yoursite.com/child//blog/2016/11/阅读谷歌编程规范.html</id>
    <published>2016-11-06T07:47:25.000Z</published>
    <updated>2016-11-06T08:22:22.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事情的起因"><a href="#事情的起因" class="headerlink" title="事情的起因"></a>事情的起因</h1><p>好的东西就是这样，你每次看都能够有新的收获。<br>这次也一样，读了一遍谷歌编程规范，又有些新的理解，也有一些需要重新让自己记住的点。<br>遂记录下来，成此博文。</p>
<a id="more"></a>
<h1 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h1><h2 id="define保护"><a href="#define保护" class="headerlink" title="#define保护"></a>#define保护</h2><p>谷歌的格式是<br>当是： <project> <em> <path></path> </em> <file> <em>H</em><br>为保证唯一性，头文件的命名应基于其所在项目源代码树的全路径。例如，项目 foo 中的头<br>文件 foo/src/bar/baz.h 按如下方式保护：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FOO_BAR_BAZ_H_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOO_BAR_BAZ_H_</span></div><div class="line">...</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// FOO_BAR_BAZ_H_</span></span></div></pre></td></tr></table></figure></file></project></p>
<p>比较起来我们的格式是使用项目前缀来防止重复，考虑到我们项目的规模一般是不会重复的，因为文件命名上就不一致。</p>
<h2 id="头文件依赖"><a href="#头文件依赖" class="headerlink" title="头文件依赖"></a>头文件依赖</h2><p>尽量使用前置声明减少头文件的依赖。<br>因为引入一个新的头文件，头文件改变时，包含这个头文件的其他头文件也会被重新编译。<br>1.强数据成员声明为Foo* Foo&amp;<br>2.参数、返回值类型为Foo的函数，只是声明<br>3.今天数据成员的类型可以被声明为Foo，因为静态数据成员定义在类定义之外<br>至于使用指针成员替代成员对象，则会降低可读性，执行效率，不要这样做。</p>
<h2 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h2><p>少于十行的函数定义为内联函数。<br>小巧的代码更好的利用指令缓存。<br>短小的内联函数直接放在.h文件中，对于比较复杂的内联应该放在-inl.h文件中</p>
<h2 id="函数参数的顺序"><a href="#函数参数的顺序" class="headerlink" title="函数参数的顺序"></a>函数参数的顺序</h2><p>输入参数在前，输出在后。</p>
<h2 id="包含文件顺序"><a href="#包含文件顺序" class="headerlink" title="包含文件顺序"></a>包含文件顺序</h2><p>C库 C++库 其他库 项目内的<br>头文件应该有带有目录信息,不要使用当前目录和父目录<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">举例来说， google-awesome-project<span class="meta-keyword">/src/</span>foo<span class="meta-keyword">/internal/</span>fooserver.cc 的包含次序如下 ：</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"foo/public/fooserver.h"</span> // 优先位置</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hash_map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"base/basictypes.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"base/commandlineflags.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"foo/public/bar.h"</span></span></div></pre></td></tr></table></figure></p>
<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>在.CC文件中，允许甚至提倡使用不具名命名空间，以避免运行时候的命名冲突。<br>最好不要使用using，不要声明命名空间std下的恩和内容。</p>
<h2 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h2><p>公开嵌套类作为接口的一部分时候，虽然可以直接放在全局作用域中，但是最好还是放在命名空间里。<br>使用起来的话，</p>
<h2 id="非成员函数、静态成员函数和全局函数"><a href="#非成员函数、静态成员函数和全局函数" class="headerlink" title="非成员函数、静态成员函数和全局函数"></a>非成员函数、静态成员函数和全局函数</h2><p>尽量放在命名空间里。</p>
<h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>将函数变量尽可能置于最小作用域内，在声明变量时候将其初始化。靠近第一次使用，利于阅读。</p>
<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>全局变量的构造函数、西沟函数以及初始化操作的调用顺序只是被部分规定，每次生产可能会有变化。<br>很多可以用单例模式替代。</p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="构造函数中只进行哪些没有实际意义的初始化。在Init中集中初始化有意义的数据。"><a href="#构造函数中只进行哪些没有实际意义的初始化。在Init中集中初始化有意义的数据。" class="headerlink" title="构造函数中只进行哪些没有实际意义的初始化。在Init中集中初始化有意义的数据。"></a>构造函数中只进行哪些没有实际意义的初始化。在Init中集中初始化有意义的数据。</h2><p>构造函数的问题是，没有异常处理。</p>
<h2 id="明确的构造函数"><a href="#明确的构造函数" class="headerlink" title="明确的构造函数"></a>明确的构造函数</h2><p>使用explicit，防止自动转换。</p>
<h2 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h2><p>大量类并不要拷贝构造函数，所以应该使用DISALLOW_COPY_AND_ASSIGN来防止拷贝构造函数的自动生成<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 禁止使用拷贝构造函数和赋值操作的宏</span></div><div class="line"><span class="comment">// 应在类的 private:中使用</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DISALLOW_COPY_AND_ASSIGN(TypeName) \</span></div><div class="line">TypeName(<span class="keyword">const</span> TypeName&amp;); \</div><div class="line"><span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> TypeName&amp;)</div><div class="line"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">Foo(<span class="keyword">int</span> f);</div><div class="line">~Foo();</div><div class="line"><span class="keyword">private</span>:</div><div class="line">DISALLOW_COPY_AND_ASSIGN(Foo);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>使用组合一般都比使用继承合适，继承只使用public继承<br>虚析构函数只在有继承同时有虚函数的时候使用。</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口是指满足特定条件的类，这些类以Interface为后缀<br>定义：纯接口</p>
<blockquote>
<p>只有纯虚函数和静态函数<br>没有非静态数据成员<br>没有定义任何构造函数，如果有，也不含参数，并且为protected<br>如果是子类，也只能继承满足上述条件并以Interface为后缀的类</p>
</blockquote>
<h2 id="操作符重载"><a href="#操作符重载" class="headerlink" title="操作符重载"></a>操作符重载</h2><p>除了少数特定环境外，不要重载操作符。<br>缺点</p>
<blockquote>
<p>混淆你的直觉，让你误以为费时的操作和内建操作一样轻巧<br>查找重载操作符的调用处困难<br>有的操作符可以对指针进行操作<br>重载的副作用，重载操作符&amp;的类不能被前置声明</p>
</blockquote>
<h2 id="声明次序"><a href="#声明次序" class="headerlink" title="声明次序"></a>声明次序</h2><p>在类中使用特定的声明次序：public:在 private:之前，成员函数在数据成员（变量）前。<br>定义次序如下：public:、protected:、private:，如果那一块没有，直接忽略即可。<br>每一块中，声明次序一般如下：<br>1) typedefs 和 enums；<br>2) 常量；<br>3) 构造函数；<br>4) 析构函数；<br>5) 成员函数，含静态成员函数；<br>6) 数据成员，含静态数据成员。<br>宏 DISALLOW_COPY_AND_ASSIGN 置于 private:块之后，作为类的最后部分。参考 拷<br>贝构造函数。<br>.cc 文件中函数的定义应尽可能和声明次序一致。<br>不要将大型函数内联到类的定义中，通常，只有那些没有特别意义的或者性能要求高的，并<br>且是比较短小的函数才被定义为内联函数。更多细节参考译文第一篇的 内联函数。</p>
<h2 id="编写短小函数"><a href="#编写短小函数" class="headerlink" title="编写短小函数"></a>编写短小函数</h2><p>超过40行，考虑分割。</p>
<h1 id="Google特有的风情"><a href="#Google特有的风情" class="headerlink" title="Google特有的风情"></a>Google特有的风情</h1><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><p>需要使用智能指针的话scoped_ptr完全可以胜任。特殊情况下使用share_ptr。不要使用auto_ptr。<br>倾向于设计对象隶属明确的代码。最明确的对象隶属是根本不使用指针，直接将对象作为一个域或者局部变量使用。</p>
<h1 id="其他C-特征"><a href="#其他C-特征" class="headerlink" title="其他C++特征"></a>其他C++特征</h1><h2 id="引用参数"><a href="#引用参数" class="headerlink" title="引用参数"></a>引用参数</h2><p>所有按引用传递的参数必须加上const </p>
<h2 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h2><p>禁止使用缺省函数参数，所有参数必须明确指定的话，避免程序员不知道存在的缺省参数。</p>
<h2 id="编程数组和alloca"><a href="#编程数组和alloca" class="headerlink" title="编程数组和alloca"></a>编程数组和alloca</h2><p>禁止使用变长数组。使用安全的分配器。</p>
<h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><p>将一个单元测试用类声明为待测类的友元，很方便。</p>
<h2 id="不使用C-异常"><a href="#不使用C-异常" class="headerlink" title="不使用C++异常"></a>不使用C++异常</h2><h2 id="不使用RTTI"><a href="#不使用RTTI" class="headerlink" title="不使用RTTI"></a>不使用RTTI</h2><p>直接利用虚函数处理不同类型就好了。</p>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>使用 static_cast<br>比较好处理，直接查找static_cast，就能找到哪里用了转换。C语言转换语义模糊。<br>1) static_cast：和 C 风格转换相似可做值的强制转换，或指针的父类到子类的明确的向上<br>转换；<br>2) const_cast：移除 const 属性；<br>3) reinterpret_cast：指针类型和整型或其他指针间不安全的相互转换，仅在你对所做一<br>切了然于心时使用；<br>4) dynamic_cast：除测试外不要使用，除单元测试外，如果你需要在运行时确定类型信<br>息，说明设计有缺陷（参考  RTTI）。</p>
<h2 id="流-streams"><a href="#流-streams" class="headerlink" title="流 streams"></a>流 streams</h2><p>只在记录日志的时候使用。<br>其他时候使用printf替代。<br>估计是stream的构造使用成本高，printf简单直接。<br>然后steam重载&lt;&lt;会产生很多意想不到的错误，在深入理解C++面向对象的书里面也有提到。</p>
<h2 id="前置自增和自减"><a href="#前置自增和自减" class="headerlink" title="前置自增和自减"></a>前置自增和自减</h2><p>效率更高。<br>对于简单数值来说无所谓，但是对于迭代器这种，前置更好。</p>
<h2 id="const的使用"><a href="#const的使用" class="headerlink" title="const的使用"></a>const的使用</h2><p>在能够使用const的时候使用const.</p>
<h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>C++中使用 stdint.h中的确定大小整型<br>不要使用无符号，使用断言声明变量非负数。也就是在传参的时候，在执行前断言判断。</p>
<h2 id="预处理宏"><a href="#预处理宏" class="headerlink" title="预处理宏"></a>预处理宏</h2><p>宏尽量被内联函数、枚举和常量替代<br>下面给出的用法模式可以避免一些使用宏的问题，供使用宏时参考：<br>1) 不要在.h 文件中定义宏；<br>2) 使用前正确#define，使用后正确#undef；<br>3) 不要只是对已经存在的宏使用#undef，选择一个不会冲突的名称；<br>4) 不使用会导致不稳定的 C++构造（unbalanced C++ constructs，译者注） 的宏，<br>至少文档说明其行为。<br>像我们项目里的宏，完全应该被替代，起码使用一个命名空间，防止污染全局空间事情的发生。</p>
<h1 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h1><h2 id="通用命名规则"><a href="#通用命名规则" class="headerlink" title="通用命名规则"></a>通用命名规则</h2><p>不缩写<br>易于理解第一</p>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><h2 id="TODO注释"><a href="#TODO注释" class="headerlink" title="TODO注释"></a>TODO注释</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// TODO(kl@gmail.com): Use a "*" here for concatenation operator.</span></div><div class="line"><span class="comment">// TODO(Zeke) change this to use relations.</span></div></pre></td></tr></table></figure>
<h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><h2 id="swich"><a href="#swich" class="headerlink" title="swich"></a>swich</h2><p>如果 default 永不会执行，可以简单的使用 assert：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (var) &#123;</div><div class="line"><span class="keyword">case</span> <span class="number">0</span>: &#123; <span class="comment">// 2 space indent</span></div><div class="line">... <span class="comment">// 4 space indent</span></div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;</div><div class="line">...</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">default</span>: &#123;</div><div class="line">assert(<span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;事情的起因&quot;&gt;&lt;a href=&quot;#事情的起因&quot; class=&quot;headerlink&quot; title=&quot;事情的起因&quot;&gt;&lt;/a&gt;事情的起因&lt;/h1&gt;&lt;p&gt;好的东西就是这样，你每次看都能够有新的收获。&lt;br&gt;这次也一样，读了一遍谷歌编程规范，又有些新的理解，也有一些需要重新让自己记住的点。&lt;br&gt;遂记录下来，成此博文。&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/child/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="google" scheme="http://yoursite.com/child/tags/google/"/>
    
      <category term="编程规范" scheme="http://yoursite.com/child/tags/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>windows下Pyqt + guiqwt环境的搭建</title>
    <link href="http://yoursite.com/child//blog/2016/10/windows%E4%B8%8BPyqt-guiqwt%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA.html"/>
    <id>http://yoursite.com/child//blog/2016/10/windows下Pyqt-guiqwt环境的搭建.html</id>
    <published>2016-10-19T15:47:25.000Z</published>
    <updated>2016-11-06T08:22:52.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事情的起因"><a href="#事情的起因" class="headerlink" title="事情的起因"></a>事情的起因</h1><p>这几天为了搭一个PyQt的生产环境遇到了好一些坑。<br>本身搭建PyQt的目的是为了进行试验，使用PyQt开发曾经开发过的项目的难度。<br>原项目是使用MFC开发，利用自己开发的折线绘制控件，进行高速的工控数据采集后，显示到界面上。难点主要在，高速采集之后，绘图的效率问题。<br>最终通过自己开发了一套平移显示绘图控件，在新增数据的时候，每一次只绘制一部分数据，然后通过平移之前的图像与之后的链接在一起，这样达到比较高的绘图效率，才解决了问题。但是MFC界面开发复杂，在MFC界面上花费过多的时间。同时本身绘图控件的开发，可能可以利用现有开源控件进行开发来避免重复造轮子。<br>于是利用PyQt+guiqwt绘图库来开发的方案构建起来。guiqwt本身是QT下常用的绘图控件，效率足够高，经过一些优化是能够使用的。相对Python经常使用的matplotlib来说不够漂亮，但是进行实时数据的平移绘图，效率高出很多。PyQt是模仿QT写的图形库，可以利用QTCreate进行快速的界面构建，而Python相对C++来说，需要处理的坑更少，出现各类崩溃的异常的情况会更少一些。<br>本文主要讲的是PyQt+guiqwt在windows上的搭建。<br>目的是在之后能够通过本文进行快速的开发环境的搭建。</p>
<a id="more"></a>
<h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><h2 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h2><p><a href="https://www.python.org/downloads/" target="_blank" rel="external">Python官网</a><br>通过Python官网下载相应版本的Python,我这里下载的是：python-3.5.2-amd64。<br>64位版本，记住版本号，用于之后的库的选择。</p>
<h2 id="安装PyQt"><a href="#安装PyQt" class="headerlink" title="安装PyQt"></a>安装PyQt</h2><p>PyQt有完整的安装包，过程中会自动安装PyQt+Qt等完整的依赖库。<br><a href="https://sourceforge.net/projects/pyqt/?source=directory" target="_blank" rel="external">PyQt下载站点</a><br>浏览所有文件找到对应的PyQt完整安装包。<br>我下的是下面网址中的64位版本。<br>PyQt5-5.6-gpl-Py3.5-Qt5.6.0-x64-2<br><a href="https://sourceforge.net/projects/pyqt/files/PyQt5/PyQt-5.6/" target="_blank" rel="external">PyQt完整安装包下载</a><br>安装一路下一步完成。</p>
<h2 id="安装NumPy"><a href="#安装NumPy" class="headerlink" title="安装NumPy"></a>安装NumPy</h2><p>为了能够使用guiqwt必须安装依赖的库。<br>首先安装numpy，注意的是需要安装+mk1的numpy库，否则scipy无法正常安装后使用。<br><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">下载地址</a><br>搜索Numpy找到相应的位置。<br>我选择下载的是，与Python版本对应：numpy-1.11.2+mkl-cp35-cp35m-win_amd64.whl<br>使用pip3.5安装</p>
<h2 id="安装scipy"><a href="#安装scipy" class="headerlink" title="安装scipy"></a>安装scipy</h2><p>同上，在上面的网站找到scipy。<br>版本我选择的是：scipy-0.18.1-cp35-cp35m-win_amd64<br>使用pip3.5在numpy之后安装</p>
<h2 id="安装guiqwt"><a href="#安装guiqwt" class="headerlink" title="安装guiqwt"></a>安装guiqwt</h2><p>安装guiqwt<br>上面网站搜索guiqwt<br>选择guiqwt-3.0.3-cp35-cp35m-win_amd64。<br>在sicpy之后使用pip3.5安装</p>
<h2 id="安装eric6"><a href="#安装eric6" class="headerlink" title="安装eric6"></a>安装eric6</h2><p><a href="https://sourceforge.net/projects/eric-ide/" target="_blank" rel="external">下载地址</a><br>我选择的是：eric6-6.1.10和eric6-i18n-zh_CN-6.1.10<br>解压，放到python的安装目录下：python35/eric6<br>运行python35/eric6、install.py进行安装。<br>运行Python35\Scripts\eric6.bat 就打开了eric6</p>
<p>至此开发环境搭建完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;事情的起因&quot;&gt;&lt;a href=&quot;#事情的起因&quot; class=&quot;headerlink&quot; title=&quot;事情的起因&quot;&gt;&lt;/a&gt;事情的起因&lt;/h1&gt;&lt;p&gt;这几天为了搭一个PyQt的生产环境遇到了好一些坑。&lt;br&gt;本身搭建PyQt的目的是为了进行试验，使用PyQt开发曾经开发过的项目的难度。&lt;br&gt;原项目是使用MFC开发，利用自己开发的折线绘制控件，进行高速的工控数据采集后，显示到界面上。难点主要在，高速采集之后，绘图的效率问题。&lt;br&gt;最终通过自己开发了一套平移显示绘图控件，在新增数据的时候，每一次只绘制一部分数据，然后通过平移之前的图像与之后的链接在一起，这样达到比较高的绘图效率，才解决了问题。但是MFC界面开发复杂，在MFC界面上花费过多的时间。同时本身绘图控件的开发，可能可以利用现有开源控件进行开发来避免重复造轮子。&lt;br&gt;于是利用PyQt+guiqwt绘图库来开发的方案构建起来。guiqwt本身是QT下常用的绘图控件，效率足够高，经过一些优化是能够使用的。相对Python经常使用的matplotlib来说不够漂亮，但是进行实时数据的平移绘图，效率高出很多。PyQt是模仿QT写的图形库，可以利用QTCreate进行快速的界面构建，而Python相对C++来说，需要处理的坑更少，出现各类崩溃的异常的情况会更少一些。&lt;br&gt;本文主要讲的是PyQt+guiqwt在windows上的搭建。&lt;br&gt;目的是在之后能够通过本文进行快速的开发环境的搭建。&lt;/p&gt;
    
    </summary>
    
      <category term="开发环境" scheme="http://yoursite.com/child/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="windows" scheme="http://yoursite.com/child/tags/windows/"/>
    
      <category term="环境搭建" scheme="http://yoursite.com/child/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>[读书笔记] sicp 第三章 模块化 对象和状态</title>
    <link href="http://yoursite.com/child//blog/2016/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A8%A1%E5%9D%97%E5%8C%96-%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%8A%B6%E6%80%81.html"/>
    <id>http://yoursite.com/child//blog/2016/09/读书笔记-sicp-第三章-模块化-对象和状态.html</id>
    <published>2016-09-10T00:33:32.000Z</published>
    <updated>2016-10-16T06:35:48.571Z</updated>
    
    <content type="html"><![CDATA[<p>有效的程序综合还需要一些组织原则，它们能够指导我们系统化地完成系统的整体设计。特别的需要一些能够帮助我们构造起模块化的大型系统策略，也就是说，使这些系统能够“自然地”划分为一些具有内聚力的部分，使这些部分可以分别进行开发和维护。<br>有一种非常强有力的设计策略，特别适合用于构造那类模拟真实物理系统的程序，那就是基于被模拟程序的结构去设计程序的结构。那么有关的物理系统里的每一个对象，我们构造起一个与之对象的计算对象；对该系统里的每种活动，我们在自己的计算系统里顶一种符号操作。采用这一策略时的希望是，在需要针对系统中的新对象或者新活动扩充对应的计算模型时候，我们能够不必对程序的组织方面做得很成功，那么在需要添加新特城或者排除旧东西里的错误时候，就只需要在系统里的一些小局部中工作。<br>本章研究两种特点鲜明的策略。第一种策略将注意力集中在对象上，将大型系统看成一大批对象，它们的行为可能随着时间的进展而不断的变化。另一种组织策略将注意力集中在流过的系统的信息流上，非常像电子工程师观察一个信号处理系统。<br>对于对象途径而言，我们必须关注计算对象可以怎样变化而又同时保持其标识。这将迫使我们抛弃老的计算的代换模型，转向更机械式的，理论上也更不同意把握的计算的环境模型。在处理对象、变化和标识时，各种困难的基本根源在于我们需要在这一计算模型中与时间搏斗。如果允许程序并发指向的可能性，事情会变得更困难许多。流方式特别能用于松解在我们模型中对时间的模拟与计算机求值过程中的各种时间发生的顺序。我们将通过一种称为延时求值的技术做到这一点。</p>
<h1 id="赋值和局部状态"><a href="#赋值和局部状态" class="headerlink" title="赋值和局部状态"></a>赋值和局部状态</h1><p>一个由许多对象组成的系统里，其中的这些对象极少会是完全独立的。每个对象都可能通过交互作用，影响其他对象的状态，所谓交互就是建立起一个对象的状态变量与其他对象的状态变量之间的联系。确实如果一个系统中的状态变量可以分组，形成一些内部紧密结合的子系统，每个子系统与其他子系统之间只存在松散的练习，此时将这个系统看作是由一些独立对象组成的观点就会特别有用。<br>对于一个系统的这种观点，有可能成为组织这一系统的计算模型的有力框架。要使这样的一个模型成为模块化的，就要求它能够分解为一批计算对象，使它们能够模拟系统里的实际对象。每个计算对象必须有它自己的一些局部状态变量，用于描述实际对象的状态。对于被模拟系统里的对象的状态是随着时间的变化的，与它们对象的计算对象的状态也必须变化。<br><a id="more"></a></p>
<h2 id="局部状态变量"><a href="#局部状态变量" class="headerlink" title="局部状态变量"></a>局部状态变量</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(<span class="name">set!</span> &lt;name&gt; &lt;new-value&gt;)<span class="comment">;设置值</span></div><div class="line">(<span class="name">begin</span> &lt;exp1&gt; &lt;exp2&gt;)<span class="comment">;顺序求值</span></div><div class="line"></div><div class="line">(<span class="name">define</span> balance <span class="number">100</span>)</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">withdraw</span> amount)</div><div class="line">  (<span class="name">if</span> (<span class="name">&gt;=</span> balance amount)</div><div class="line">      (<span class="name">begin</span> (<span class="name">set!</span> balance (<span class="name">-</span> balance amount))</div><div class="line">             balance)</div><div class="line">      <span class="string">"Insufficient funds"</span>))</div></pre></td></tr></table></figure>
<p>上面使用了全局变量<br>下面使用局部变量</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> new-withdraw</div><div class="line">  (<span class="name">let</span> ((<span class="name">balance</span> <span class="number">100</span>))</div><div class="line">    (<span class="name">lambda</span> (<span class="name">amount</span>)</div><div class="line">      (<span class="name">if</span> (<span class="name">&gt;=</span> balance amount)</div><div class="line">          (<span class="name">begin</span> (<span class="name">set!</span> balance (<span class="name">-</span> balance amount))</div><div class="line">                 balance)</div><div class="line">          <span class="string">"Insufficient funds"</span>))))</div></pre></td></tr></table></figure>
<p>构建一个提款机<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">make-withdraw</span> balance)</div><div class="line">  (<span class="name">lambda</span> (<span class="name">amount</span>)</div><div class="line">    (<span class="name">if</span> (<span class="name">&gt;=</span> balance amount)</div><div class="line">        (<span class="name">begin</span> (<span class="name">set!</span> balance (<span class="name">-</span> balance amount))</div><div class="line">               balance)</div><div class="line">        <span class="string">"Insufficient funds"</span>)))</div></pre></td></tr></table></figure></p>
<p>创建一个账户<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">make-withdraw</span> balance)</div><div class="line">  (<span class="name">define</span> (<span class="name">withdraw</span> amount)</div><div class="line">    (<span class="name">if</span> (<span class="name">&gt;=</span> balance amount)</div><div class="line">        (<span class="name">begin</span> (<span class="name">set!</span> balance (<span class="name">-</span> balance amount))</div><div class="line">               balance)</div><div class="line">        <span class="string">"Insufficient funds"</span>))</div><div class="line">  (<span class="name">define</span> (<span class="name">deposit</span> amount)</div><div class="line">    (<span class="name">set!</span> balance (<span class="name">+</span> balance amount))</div><div class="line">    balance)</div><div class="line">  (<span class="name">define</span> (<span class="name">dispatch</span> m)</div><div class="line">    (<span class="name">cond</span> ((<span class="name">eq</span>? m 'withdraw) withdraw)</div><div class="line">          ((<span class="name">eq</span>? m 'deposit) deposit)</div><div class="line">          (<span class="name">else</span> (<span class="name">error</span> <span class="string">"Unknoew request --MAKE-ACCOUNT"</span></div><div class="line">                       m))))</div><div class="line">  dispatch)</div></pre></td></tr></table></figure></p>
<h2 id="引进赋值带来的收益"><a href="#引进赋值带来的收益" class="headerlink" title="引进赋值带来的收益"></a>引进赋值带来的收益</h2><p>能够简化一部分需要变量状态的过程。</p>
<h2 id="引进赋值的代价"><a href="#引进赋值的代价" class="headerlink" title="引进赋值的代价"></a>引进赋值的代价</h2><p>相比函数是编程，输入什么结果就是什么。显然引进赋值让程序变得更复杂。<br>需要存在一个位置存储变量。</p>
<h3 id="命令式程序设计的缺陷"><a href="#命令式程序设计的缺陷" class="headerlink" title="命令式程序设计的缺陷"></a>命令式程序设计的缺陷</h3><p>与函数式程序设计相对，广泛采用的赋值程序设计被称为命令是程序设计。<br>求值顺序需要保证。</p>
<h1 id="求值的环境模型"><a href="#求值的环境模型" class="headerlink" title="求值的环境模型"></a>求值的环境模型</h1><p>类似于C++的区域。<br>过程也是对象。<br>调用过程就会产生新的上下文环境，过程内的是过程内的环境。过程外全局环境等。</p>
<p>过程应用的环境模型两条规则：</p>
<ol>
<li>将一个过程对象应用于一集实际参数，将构造出一个新框架，其中将过程的形式参数约束到调用时的实际参数，而后在构造起的这一新环境的上下文中求</li>
<li>相对于一个给定的环境求值一个lambda表达式，将创建其一个过程对象，这个过程对象是一个序对，由该lambda表达式的征文和一个指向环境的指针组成，这一指针指向的就是创建这个过程对象时候的环境。</li>
</ol>
<h2 id="简单过程的应用"><a href="#简单过程的应用" class="headerlink" title="简单过程的应用"></a>简单过程的应用</h2><h2 id="将框架看做局部状态的展台"><a href="#将框架看做局部状态的展台" class="headerlink" title="将框架看做局部状态的展台"></a>将框架看做局部状态的展台</h2><h2 id="内部定义"><a href="#内部定义" class="headerlink" title="内部定义"></a>内部定义</h2><ol>
<li>局部过程的名字不会与包容它们的过程之外的名字互相干扰，这是因为这些局部过程名 都是该过程运行时创建的框架里约束的，而不是在全局环境里约束的。</li>
<li>局部过程只需将包含着它们的过程的形参作为自由变量，就可以访问该过程的实际参数，这是因为对于局部过程体的求值所在的环境是外围过程求值所在的环境的下属。</li>
</ol>
<h1 id="用变动的数据做模拟"><a href="#用变动的数据做模拟" class="headerlink" title="用变动的数据做模拟"></a>用变动的数据做模拟</h1><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">append!</span> x y)</div><div class="line">  (<span class="name">set-cdr!</span> (<span class="name">last-pair</span> x) y)</div><div class="line">  x)</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">last-pair</span> x)</div><div class="line">  (<span class="name">if</span> (<span class="name">null</span>? (<span class="name">cdr</span> x))</div><div class="line">      x</div><div class="line">      (<span class="name">last-pair</span> (<span class="name">cdr</span> x))))</div></pre></td></tr></table></figure>
<h3 id="共享与相等"><a href="#共享与相等" class="headerlink" title="共享与相等"></a>共享与相等</h3><p>共享会导致多个对象都拥有同一个对象，修改一个会导致另外的也跟着被修改。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="name">eq</span>? x y)<span class="comment">;检查是不是一个对象</span></div></pre></td></tr></table></figure></p>
<h3 id="改变也就是赋值"><a href="#改变也就是赋值" class="headerlink" title="改变也就是赋值"></a>改变也就是赋值</h3><p>主要是构建了一前一后两个指针。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">cons</span> x y)</div><div class="line">  (<span class="name">define</span> (<span class="name">set-x!</span> v) (<span class="name">set!</span> x v))</div><div class="line">  (<span class="name">define</span> (<span class="name">set-y!</span> v) (<span class="name">set!</span> y v))</div><div class="line">  (<span class="name">define</span> (<span class="name">dispatch</span> m)</div><div class="line">    (<span class="name">cond</span> ((<span class="name">eq</span>? m 'car) x)</div><div class="line">          ((<span class="name">eq</span>? m 'cdr) y)</div><div class="line">          ((<span class="name">eq</span>? m 'set-car!) set-x!)</div><div class="line">          ((<span class="name">eq</span>? m 'set-cdr!) set-y!)</div><div class="line">          (<span class="name">else</span> (<span class="name">error</span> <span class="string">"Undefined operation -- CONS"</span> m))))</div><div class="line">  dispatch)</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">car</span> z) (<span class="name">z</span> 'car))</div><div class="line">(<span class="name">define</span> (<span class="name">cdr</span> z) (<span class="name">z</span> 'cdr))</div><div class="line">(<span class="name">define</span> (<span class="name">set-car!</span> z new-value)</div><div class="line">  ((<span class="name">z</span> 'set-car!) new-value)</div><div class="line">  z)</div><div class="line">(<span class="name">define</span> (<span class="name">set-cdr!</span> z new-value)</div><div class="line">  ((<span class="name">z</span> 'set-cdr!) new-value)</div><div class="line">  z)</div></pre></td></tr></table></figure></p>
<h2 id="队列的表示"><a href="#队列的表示" class="headerlink" title="队列的表示"></a>队列的表示</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;构造函数</span></div><div class="line">(<span class="name">define</span> (<span class="name">make-queue</span>) (<span class="name">cons</span> '() '()))</div><div class="line"><span class="comment">;选择函数</span></div><div class="line">(<span class="name">define</span> (<span class="name">front-queue</span> queue)</div><div class="line">  (<span class="name">if</span> (<span class="name">empty-queue</span>? queue)</div><div class="line">      (<span class="name">error</span> <span class="string">"FRONT called with an empty queue"</span> queue)</div><div class="line">      (<span class="name">car</span> (<span class="name">front-ptr</span> queue))))</div><div class="line"><span class="comment">;检测队列是否为空</span></div><div class="line">(<span class="name">define</span> (<span class="name">empty-queue</span>? queue) (<span class="name">null</span>? (<span class="name">front-ptr</span> queue)))</div><div class="line"><span class="comment">;改变函数</span></div><div class="line">(<span class="name">define</span> (<span class="name">insert-queue!</span> queue item)</div><div class="line">  (<span class="name">let</span> ((<span class="name">new-pair</span> (<span class="name">cons</span> item '())))</div><div class="line">    (<span class="name">cond</span> ((<span class="name">empty-queue</span>? queue)</div><div class="line">           (<span class="name">set-front-ptr!</span> queue new-pair)</div><div class="line">           (<span class="name">set-rear-ptr!</span> queue new-pair)</div><div class="line">           queue)</div><div class="line">          (<span class="name">else</span></div><div class="line">           (<span class="name">set-cdr!</span> (<span class="name">rear-ptr</span> queue) new-pair)</div><div class="line">           (<span class="name">set-rear-ptr!</span> queue new-pair)</div><div class="line">           queue))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">delete-queue!</span> queue)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">empty-queue</span>? queue)</div><div class="line">         (<span class="name">error</span> <span class="string">"DELETE! called with an empty queue"</span> queue))</div><div class="line">        (<span class="name">else</span></div><div class="line">         (<span class="name">set-front-ptr!</span> queue (<span class="name">cdr</span> (<span class="name">front-ptr</span> queue)))</div><div class="line">         queue)))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">front-ptr</span> queue) (<span class="name">car</span> queue))</div><div class="line">(<span class="name">define</span> (<span class="name">rear-ptr</span> queue) (<span class="name">cdr</span> queue))</div><div class="line">(<span class="name">define</span> (<span class="name">set-front-ptr!</span> queue item) (<span class="name">set-car!</span> queue item))</div><div class="line">(<span class="name">define</span> (<span class="name">set-rear-ptr!</span> queue item) (<span class="name">set-car!</span> queue item))</div></pre></td></tr></table></figure>
<h2 id="表格的表示"><a href="#表格的表示" class="headerlink" title="表格的表示"></a>表格的表示</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">lookup</span> key table)</div><div class="line">  (<span class="name">let</span> ((<span class="name">record</span> (<span class="name">assoc</span> key (<span class="name">cdr</span> table))))</div><div class="line">    (<span class="name">if</span> record</div><div class="line">        (<span class="name">cdr</span> record)</div><div class="line">        false)))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">assoc</span> key records)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">null</span>? records) false)</div><div class="line">        ((<span class="name">equal</span>? key (<span class="name">caar</span> records)) (<span class="name">car</span> records))</div><div class="line">        (<span class="name">else</span> (<span class="name">assoc</span> key (<span class="name">cdr</span> records)))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">insert!</span> key value table)</div><div class="line">  (<span class="name">let</span> ((<span class="name">record</span> (<span class="name">assoc</span> key (<span class="name">cdr</span> table))))</div><div class="line">    (<span class="name">if</span> record</div><div class="line">        (<span class="name">set-cdr!</span> record value)</div><div class="line">        (<span class="name">set-cdr!</span> table</div><div class="line">                  (<span class="name">cons</span> (<span class="name">cons</span> key value) (<span class="name">cdr</span> table))))))</div><div class="line">(<span class="name">define</span> (<span class="name">make-table</span>)</div><div class="line">  (<span class="name">list</span> '*table*))</div></pre></td></tr></table></figure>
<h2 id="数字电路的模拟器"><a href="#数字电路的模拟器" class="headerlink" title="数字电路的模拟器"></a>数字电路的模拟器</h2><h1 id="并发：时间本质是个问题"><a href="#并发：时间本质是个问题" class="headerlink" title="并发：时间本质是个问题"></a>并发：时间本质是个问题</h1><p>和普通的并发问题是一致的。<br>串行化共享部分。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> s make-serializer)</div><div class="line">(<span class="name">define</span> (<span class="name">make-account</span> balance)</div><div class="line">  (<span class="name">define</span> (<span class="name">withdraw</span> amount)</div><div class="line">    (<span class="name">if</span> (<span class="name">&gt;=</span> balance amount)</div><div class="line">        (<span class="name">begin</span> (<span class="name">set!</span> balance (<span class="name">=</span> balance amount))</div><div class="line">               balance)</div><div class="line">        <span class="string">"Insufficient funds"</span>))</div><div class="line">  (<span class="name">define</span> (<span class="name">deposit</span> amount)</div><div class="line">    (<span class="name">set!</span> balance (<span class="name">+</span> balance amount))</div><div class="line">    balance)</div><div class="line">  (<span class="name">let</span> ((<span class="name">protected</span> (<span class="name">make-serializer</span>)))</div><div class="line">    (<span class="name">define</span> (<span class="name">dispatch</span> m)</div><div class="line">      (<span class="name">cond</span> ((<span class="name">eq</span>? m 'withdraw) (<span class="name">protected</span> withdraw))</div><div class="line">            ((<span class="name">eq</span>? m 'deposit) (<span class="name">protected</span> deposit))</div><div class="line">            ((<span class="name">eq</span>? m 'balance) balance)</div><div class="line">            (<span class="name">else</span> (<span class="name">error</span> <span class="string">"Unknown request --MAKE-ACCOUNT"</span></div><div class="line">                         m))))</div><div class="line">    dispatch))</div></pre></td></tr></table></figure></p>
<h2 id="串行化的实现"><a href="#串行化的实现" class="headerlink" title="串行化的实现"></a>串行化的实现</h2><p>互斥元同步机制。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">make-serializer</span>)</div><div class="line">  (<span class="name">let</span> ((<span class="name">mutex</span> (<span class="name">make-mutex</span>)))</div><div class="line">    (<span class="name">lambda</span> (<span class="name">p</span>)</div><div class="line">      (<span class="name">define</span> (<span class="name">serialized-p</span> . args)</div><div class="line">        (<span class="name">mutex</span> 'acquire)</div><div class="line">        (<span class="name">let</span> ((<span class="name">val</span> (<span class="name">apply</span> p args)))</div><div class="line">          (<span class="name">mutex</span> 'release)</div><div class="line">          val))</div><div class="line">      serialized-p)))</div><div class="line"></div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">make-mutex</span>)</div><div class="line">  (<span class="name">let</span> ((<span class="name">cell</span> (<span class="name">list</span> false)))</div><div class="line">    (<span class="name">define</span> (<span class="name">the-mutex</span> m)</div><div class="line">      (<span class="name">cond</span> ((<span class="name">eq</span>? m 'acquire)</div><div class="line">             (<span class="name">if</span> (<span class="name">test-and-set!</span> cell)</div><div class="line">                 (<span class="name">the-mutex</span> 'acquire)))</div><div class="line">            ((<span class="name">eq</span>? m 'release) (<span class="name">clea!</span> cell))))</div><div class="line">    the-mutex))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">test-and-set!</span> cell)</div><div class="line">  (<span class="name">if</span> (<span class="name">car</span> cell)</div><div class="line">      true</div><div class="line">      (<span class="name">begin</span> (<span class="name">set-car!</span> cell true)</div><div class="line">             false)))</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有效的程序综合还需要一些组织原则，它们能够指导我们系统化地完成系统的整体设计。特别的需要一些能够帮助我们构造起模块化的大型系统策略，也就是说，使这些系统能够“自然地”划分为一些具有内聚力的部分，使这些部分可以分别进行开发和维护。&lt;br&gt;有一种非常强有力的设计策略，特别适合用于构造那类模拟真实物理系统的程序，那就是基于被模拟程序的结构去设计程序的结构。那么有关的物理系统里的每一个对象，我们构造起一个与之对象的计算对象；对该系统里的每种活动，我们在自己的计算系统里顶一种符号操作。采用这一策略时的希望是，在需要针对系统中的新对象或者新活动扩充对应的计算模型时候，我们能够不必对程序的组织方面做得很成功，那么在需要添加新特城或者排除旧东西里的错误时候，就只需要在系统里的一些小局部中工作。&lt;br&gt;本章研究两种特点鲜明的策略。第一种策略将注意力集中在对象上，将大型系统看成一大批对象，它们的行为可能随着时间的进展而不断的变化。另一种组织策略将注意力集中在流过的系统的信息流上，非常像电子工程师观察一个信号处理系统。&lt;br&gt;对于对象途径而言，我们必须关注计算对象可以怎样变化而又同时保持其标识。这将迫使我们抛弃老的计算的代换模型，转向更机械式的，理论上也更不同意把握的计算的环境模型。在处理对象、变化和标识时，各种困难的基本根源在于我们需要在这一计算模型中与时间搏斗。如果允许程序并发指向的可能性，事情会变得更困难许多。流方式特别能用于松解在我们模型中对时间的模拟与计算机求值过程中的各种时间发生的顺序。我们将通过一种称为延时求值的技术做到这一点。&lt;/p&gt;
&lt;h1 id=&quot;赋值和局部状态&quot;&gt;&lt;a href=&quot;#赋值和局部状态&quot; class=&quot;headerlink&quot; title=&quot;赋值和局部状态&quot;&gt;&lt;/a&gt;赋值和局部状态&lt;/h1&gt;&lt;p&gt;一个由许多对象组成的系统里，其中的这些对象极少会是完全独立的。每个对象都可能通过交互作用，影响其他对象的状态，所谓交互就是建立起一个对象的状态变量与其他对象的状态变量之间的联系。确实如果一个系统中的状态变量可以分组，形成一些内部紧密结合的子系统，每个子系统与其他子系统之间只存在松散的练习，此时将这个系统看作是由一些独立对象组成的观点就会特别有用。&lt;br&gt;对于一个系统的这种观点，有可能成为组织这一系统的计算模型的有力框架。要使这样的一个模型成为模块化的，就要求它能够分解为一批计算对象，使它们能够模拟系统里的实际对象。每个计算对象必须有它自己的一些局部状态变量，用于描述实际对象的状态。对于被模拟系统里的对象的状态是随着时间的变化的，与它们对象的计算对象的状态也必须变化。&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/child/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="sicp" scheme="http://yoursite.com/child/tags/sicp/"/>
    
      <category term="计算机程序的构造与解释" scheme="http://yoursite.com/child/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E8%A7%A3%E9%87%8A/"/>
    
  </entry>
  
  <entry>
    <title>[读书笔记] sicp 第二章 带有通用型操作的系统</title>
    <link href="http://yoursite.com/child//blog/2016/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%B8%A6%E6%9C%89%E9%80%9A%E7%94%A8%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%9A%84%E7%B3%BB%E7%BB%9F.html"/>
    <id>http://yoursite.com/child//blog/2016/09/读书笔记-sicp-第二章-带有通用型操作的系统.html</id>
    <published>2016-09-10T00:32:54.000Z</published>
    <updated>2016-10-16T06:35:48.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通用型算术运算"><a href="#通用型算术运算" class="headerlink" title="通用型算术运算"></a>通用型算术运算</h1><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">add</span> x y) (<span class="name">apply-generic</span> 'add x y))</div><div class="line">(<span class="name">define</span> (<span class="name">sub</span> x y) (<span class="name">apply-generic</span> 'sub x y))</div><div class="line">(<span class="name">define</span> (<span class="name">mul</span> x y) (<span class="name">apply-generic</span> 'mul x y))</div><div class="line">(<span class="name">define</span> (<span class="name">div</span> x y) (<span class="name">apply-generic</span> 'div x y))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">install-scheme-number-package</span>)</div><div class="line">  (<span class="name">define</span> (<span class="name">tag</span> x)</div><div class="line">    (<span class="name">attach-tag</span> 'scheme-number x))</div><div class="line">  (<span class="name">put</span> 'add '(scheme-number scheme-number)</div><div class="line">       (<span class="name">lambda</span> (<span class="name">x</span> y) (<span class="name">tag</span> (<span class="name">+</span> x y))))</div><div class="line">  (<span class="name">put</span> 'sub '(scheme-number scheme-number)</div><div class="line">       (<span class="name">lambda</span> (<span class="name">x</span> y) (<span class="name">tag</span> (<span class="name">-</span> x y))))</div><div class="line">  (<span class="name">put</span> 'mul '(scheme-number scheme-number)</div><div class="line">       (<span class="name">lambda</span> (<span class="name">x</span> y) (<span class="name">tag</span> (<span class="name">*</span> x y))))</div><div class="line">  (<span class="name">put</span> 'div '(scheme-number scheme-number)</div><div class="line">       (<span class="name">lambda</span> (<span class="name">x</span> y) (<span class="name">tag</span> (<span class="name">/</span> x y))))</div><div class="line">  (<span class="name">put</span> 'make '(scheme-number scheme-number)</div><div class="line">       (<span class="name">lambda</span> (<span class="name">x</span>) (<span class="name">tag</span> x)))</div><div class="line">  'done)</div><div class="line">  </div><div class="line">  (<span class="name">define</span> (<span class="name">make-scheme-number</span> n)</div><div class="line">  ((<span class="name">get</span> 'make 'scheme-number) n))</div></pre></td></tr></table></figure>
<p>利用同样的方法可以加入有理数/复数等操作</p>
<a id="more"></a>
<h1 id="不同类型数据的组合"><a href="#不同类型数据的组合" class="headerlink" title="不同类型数据的组合"></a>不同类型数据的组合</h1><p>处理跨类型的操作。<br>为每一种跨类型操作提供专门的过程处理，是可以，但是太麻烦。每添加一种类型，要增加太多过程。</p>
<h2 id="强制"><a href="#强制" class="headerlink" title="强制"></a>强制</h2><p>类型转换处理能够解决一部分问题。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;实数转虚数</span></div><div class="line">(<span class="name">define</span> (<span class="name">scheme-number-&gt;complex</span> n)</div><div class="line">  (<span class="name">make-complex-from-real-imag</span> (<span class="name">contents</span> n) <span class="number">0</span>))</div></pre></td></tr></table></figure></p>
<p>将这些强制过程安装到一个特护的表格里，用两个类型的名字作为索引。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="name">put-coercion</span> 'scheme-number 'complex scheme-number-&gt;complex)</div></pre></td></tr></table></figure></p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">apply-generic</span> op . args)</div><div class="line">  (<span class="name">let</span> ((<span class="name">type-tags</span> (<span class="name">map</span> type-tag args)))</div><div class="line">    (<span class="name">let</span> ((<span class="name">proc</span> (<span class="name">get</span> op type-tags)))</div><div class="line">      (<span class="name">if</span> proc</div><div class="line">          (<span class="name">apply</span> proc (<span class="name">map</span> contents args))</div><div class="line">          (<span class="name">if</span> (<span class="name">=</span> (<span class="name">length</span> args) <span class="number">2</span>)</div><div class="line">              (<span class="name">let</span> ((<span class="name">type1</span> (<span class="name">car</span> type-tags))</div><div class="line">                    (<span class="name">type2</span> (<span class="name">cadr</span> type-tags))</div><div class="line">                    (<span class="name">a1</span> (<span class="name">car</span> args))</div><div class="line">                    (<span class="name">a2</span> (<span class="name">cadr</span> args)))</div><div class="line">                (<span class="name">let</span> ((<span class="name">t1-&gt;t2</span> (<span class="name">get-coercion</span> type1 type2))</div><div class="line">                      (<span class="name">t2-&gt;t1</span> (<span class="name">get-coercion</span> type2 type1)))</div><div class="line">                  (<span class="name">cond</span> (<span class="name">t1-&gt;t2</span></div><div class="line">                         (<span class="name">apply-generic</span> op (<span class="name">t1-&gt;t2</span> a1) a2))</div><div class="line">                        (<span class="name">t2-&gt;t1</span></div><div class="line">                         (<span class="name">apply-generic</span> op a1 (<span class="name">t2-&gt;t1</span> a2)))</div><div class="line">                        (<span class="name">else</span></div><div class="line">                         (<span class="name">error</span> <span class="string">"No method for these types"</span></div><div class="line">                                (<span class="name">list</span> op type-tags))))))</div><div class="line">              (<span class="name">error</span> <span class="string">"No method for these types"</span></div><div class="line">                     (<span class="name">list</span> op type-tags)))))))</div></pre></td></tr></table></figure>
<h1 id="类型的层次结构"><a href="#类型的层次结构" class="headerlink" title="类型的层次结构"></a>类型的层次结构</h1><p>就是继承嘛。子类型有父类型的所有操作。</p>
<p>#层次结构的不足<br>可能产生菱形的层次结构。</p>
<p>在设计大型系统时，处理好一大批相互有关的类型而同时又能保持模块性，这是一个困难的问题，也是当前正在继续研究的领域。<br>编者注：这句话出现在书的第一版本。它的现在就像20年前写出时候正确。开发出一种有用的，具有一般意义的框架，以描述不同类型对象之间的关系(哲学中本体论)，看来是一件极其困难的工作。在10年前存在的混乱和今天存在的混乱之间的主要差异在于，今天已经有了一批各式各样的并不合适的本体理论，它们已经嵌入数量过多而又先天不足的各种程序设计语言里。举例来说，面向对象语言的大部分复杂性-以及当前各种面向对象语言之间细微的而且诗人迷惑的差异-的核心，就是类型之间通用型操作的处理。我们在第三章有关计算性对象的讨论中完全避免了这些问题。熟悉面向对象程序涉及到读者将会注意到，在第三章里关于局部状态说了许多东西，但是却根本没有提到“类”或者“继承”。事实上，我们的猜想是，如果没有知识表示和自动推理工作的帮助，这些问题是无法仅仅通过计算机语言设计的方式合理处理的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;通用型算术运算&quot;&gt;&lt;a href=&quot;#通用型算术运算&quot; class=&quot;headerlink&quot; title=&quot;通用型算术运算&quot;&gt;&lt;/a&gt;通用型算术运算&lt;/h1&gt;&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;add&lt;/span&gt; x y) (&lt;span class=&quot;name&quot;&gt;apply-generic&lt;/span&gt; &#39;add x y))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;sub&lt;/span&gt; x y) (&lt;span class=&quot;name&quot;&gt;apply-generic&lt;/span&gt; &#39;sub x y))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;mul&lt;/span&gt; x y) (&lt;span class=&quot;name&quot;&gt;apply-generic&lt;/span&gt; &#39;mul x y))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; x y) (&lt;span class=&quot;name&quot;&gt;apply-generic&lt;/span&gt; &#39;div x y))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;install-scheme-number-package&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;tag&lt;/span&gt; x)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;attach-tag&lt;/span&gt; &#39;scheme-number x))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;put&lt;/span&gt; &#39;add &#39;(scheme-number scheme-number)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt; y) (&lt;span class=&quot;name&quot;&gt;tag&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; x y))))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;put&lt;/span&gt; &#39;sub &#39;(scheme-number scheme-number)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt; y) (&lt;span class=&quot;name&quot;&gt;tag&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;-&lt;/span&gt; x y))))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;put&lt;/span&gt; &#39;mul &#39;(scheme-number scheme-number)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt; y) (&lt;span class=&quot;name&quot;&gt;tag&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; x y))))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;put&lt;/span&gt; &#39;div &#39;(scheme-number scheme-number)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt; y) (&lt;span class=&quot;name&quot;&gt;tag&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;/&lt;/span&gt; x y))))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;put&lt;/span&gt; &#39;make &#39;(scheme-number scheme-number)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       (&lt;span class=&quot;name&quot;&gt;lambda&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;tag&lt;/span&gt; x)))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &#39;done)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;make-scheme-number&lt;/span&gt; n)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ((&lt;span class=&quot;name&quot;&gt;get&lt;/span&gt; &#39;make &#39;scheme-number) n))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;利用同样的方法可以加入有理数/复数等操作&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/child/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="sicp" scheme="http://yoursite.com/child/tags/sicp/"/>
    
      <category term="计算机程序的构造与解释" scheme="http://yoursite.com/child/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E8%A7%A3%E9%87%8A/"/>
    
  </entry>
  
  <entry>
    <title>[读书笔记] sicp 第二章 抽象数据的多重表示</title>
    <link href="http://yoursite.com/child//blog/2016/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A4%9A%E9%87%8D%E8%A1%A8%E7%A4%BA.html"/>
    <id>http://yoursite.com/child//blog/2016/09/读书笔记-sicp-第二章-抽象数据的多重表示.html</id>
    <published>2016-09-10T00:32:38.000Z</published>
    <updated>2016-10-16T06:35:48.593Z</updated>
    
    <content type="html"><![CDATA[<p>对于一个数据对象可以能存在多种有用的表示形式，而且我们也希望所涉及的系统能够处理多种表示形式。<br>例子：复数的极坐标形式和直角坐标的形式<br>构造通用型过程：可以在不止一种数据表示上操作的过程。采用的技术：让它们在带有类型标志的数据对象上工作。也就是说，让数据对象包含着它们应该如何处理的明确信息。</p>
<h1 id="复数的表示"><a href="#复数的表示" class="headerlink" title="复数的表示"></a>复数的表示</h1><p>为一个数据提供了多种操作，存在多种形式<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">real-part</span> z) (<span class="name">car</span> z))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">imag-part</span> z) (<span class="name">cdr</span> z))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">magnitude</span> z)</div><div class="line">  (<span class="name">sqrt</span> (<span class="name">+</span> (<span class="name">square</span> (<span class="name">real-part</span> z)) (<span class="name">square</span> (<span class="name">imag-part</span> z)))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">angle</span> z)</div><div class="line">  (<span class="name">atan</span> (<span class="name">imag-part</span> z) (<span class="name">real-part</span> z)))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">make-from-real-imag</span> x y) (<span class="name">cons</span> x y))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">make-from-mag-ang</span> r a)</div><div class="line">  (<span class="name">cons</span> (<span class="name">*</span> r (<span class="name">cos</span> a)) (<span class="name">*</span> r (<span class="name">sin</span> a))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">add-complex</span> z1 z2)</div><div class="line">  (<span class="name">make-from-real-imag</span> (<span class="name">+</span> (<span class="name">real-part</span> z1) (<span class="name">real-part</span> z2))</div><div class="line">                       (<span class="name">+</span> (<span class="name">imag-part</span> z1) (<span class="name">imag-part</span> z2))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">sub-complex</span> z1 z2)</div><div class="line">  (<span class="name">make-from-real-imag</span> (<span class="name">-</span> (<span class="name">real-part</span> z1) (<span class="name">real-part</span> z2))</div><div class="line">                       (<span class="name">-</span> (<span class="name">imag-part</span> z1) (<span class="name">imag-part</span> z2))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">mul-complex</span> z1 z2)</div><div class="line">  (<span class="name">make-from-mag-ang</span> (<span class="name">*</span> (<span class="name">magnitude</span> z1) (<span class="name">magnitude</span> z2))</div><div class="line">                     (<span class="name">+</span> (<span class="name">angle</span> z1) (<span class="name">angle</span> z2))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">div-complex</span> z1 z2)</div><div class="line">  (<span class="name">make-from-mag-ang</span> (<span class="name">/</span> (<span class="name">magnitude</span> z1) (<span class="name">magnitude</span> z2))</div><div class="line">                     (<span class="name">-</span> (<span class="name">angle</span> z1) (<span class="name">angle</span> z2))))</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="带标志数据"><a href="#带标志数据" class="headerlink" title="带标志数据"></a>带标志数据</h1><p>认识数据抽象的一种方式是将其看做”最小允诺原则“的一个应用。在实现上面的复数系统的时候，采用两种形式，由选择函数和构造函数形成的抽象屏障，使我们可以把为自己所用的数据对象选择具体表现形式的事情尽量往后推，而且还能够保持系统设计的最大灵活性。<br>方式，利用类型标志，来确定什么类型，选择什么函数。<br>增加类型标示<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">attach-tag</span> type-tag contents)</div><div class="line">  (<span class="name">cons</span> type-tag contents))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">type-tag</span> datum)</div><div class="line">  (<span class="name">if</span> (<span class="name">pair</span>? datum)</div><div class="line">      (<span class="name">car</span> datum)</div><div class="line">      (<span class="name">error</span> <span class="string">"Bad tagged datum -- TYPE-TAG"</span> datum)))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">contents</span> datum)</div><div class="line">  (<span class="name">if</span> (<span class="name">pair</span>? datum)</div><div class="line">      (<span class="name">cdr</span> datum)</div><div class="line">      (<span class="name">error</span> <span class="string">"Bad tagged datum -- CONTENTS"</span> datum)))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">rectangular</span>? z)</div><div class="line">  (<span class="name">eq</span>? (<span class="name">type-tag</span> z) 'rectangular))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">polar</span>? z)</div><div class="line">  (<span class="name">eq</span>? (<span class="name">type-tag</span> z) 'polar))</div></pre></td></tr></table></figure></p>
<p>修改新的直角坐标表示<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">real-part-rectangular</span> z) (<span class="name">car</span> z))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">imag-part-rectangular</span> z) (<span class="name">cdr</span> z))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">magnitude-rectangular</span> z)</div><div class="line">  (<span class="name">sqrt</span> (<span class="name">+</span> (<span class="name">square</span> (<span class="name">real-part-rectangular</span> z)) (<span class="name">square</span> (<span class="name">imag-part-rectangular</span> z)))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">angle-rectangular</span> z)</div><div class="line">  (<span class="name">atan</span> (<span class="name">imag-part-rectangular</span> z) (<span class="name">real-part-rectangular</span> z)))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">make-from-real-imag-rectangular</span> x y) (<span class="name">attach-tag</span> 'rectangular (<span class="name">cons</span> x y)))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">make-from-mag-ang-rectangular</span> r a)</div><div class="line">  (<span class="name">attach-tag</span> 'rectangular (<span class="name">cons</span> (<span class="name">*</span> r (<span class="name">cos</span> a)) (<span class="name">*</span> r (<span class="name">sin</span> a)))))</div></pre></td></tr></table></figure></p>
<p>修改极坐标的表现形式<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">real-part-polat</span> z)</div><div class="line">  (<span class="name">*</span> (<span class="name">magnitude-polat</span> z) (<span class="name">cos</span> (<span class="name">angle-polat</span> z))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">imag-part-polat</span> z)</div><div class="line">  (<span class="name">*</span> (<span class="name">magnitude-polat</span> z) (<span class="name">sin</span> (<span class="name">angle-polat</span> z))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">magnitude-polat</span> z)</div><div class="line">  (<span class="name">car</span> z))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">angle-polat</span> z)</div><div class="line">  (<span class="name">cdr</span> z))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">make-from-real-imag-polatr</span> x y)</div><div class="line">  (<span class="name">attach-tag</span> 'polar</div><div class="line">              (<span class="name">cons</span> (<span class="name">sqrt</span> (<span class="name">+</span> (<span class="name">square</span> x) (<span class="name">square</span> y)))</div><div class="line">                    (<span class="name">atan</span> y x))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">make-from-mag-ang-polat</span> r a)</div><div class="line">  (<span class="name">attach-tag</span> 'polar (<span class="name">cons</span> r a)))</div></pre></td></tr></table></figure></p>
<p>在通用选择函数都添加检查类型的标志，调用合适的函数。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">real-patr</span> z)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">rectangular</span>? z)</div><div class="line">         (<span class="name">real-part-rectangular</span> (<span class="name">contents</span> z)))</div><div class="line">        ((<span class="name">polar</span>? z)</div><div class="line">         (<span class="name">real-part-polat</span> (<span class="name">contents</span> z)))</div><div class="line">        (<span class="name">else</span> (<span class="name">error</span> <span class="string">"Unknown type -- REAL-PART"</span> z))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">imag-patr</span> z)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">rectangular</span>? z)</div><div class="line">         (<span class="name">imag-part-rectangular</span> (<span class="name">contents</span> z)))</div><div class="line">        ((<span class="name">polar</span>? z)</div><div class="line">         (<span class="name">imag-part-polat</span> (<span class="name">contents</span> z)))</div><div class="line">        (<span class="name">else</span> (<span class="name">error</span> <span class="string">"Unknown type -- IMAG-PART"</span> z))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">magnitude</span> z)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">rectangular</span>? z)</div><div class="line">         (<span class="name">magnitude-rectangular</span> (<span class="name">contents</span> z)))</div><div class="line">        ((<span class="name">polar</span>? z)</div><div class="line">         (<span class="name">magnitude-polat</span> (<span class="name">contents</span> z)))</div><div class="line">        (<span class="name">else</span> (<span class="name">error</span> <span class="string">"Unknown type -- MAGNITUDE"</span> z))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">angle</span> z)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">rectangular</span>? z)</div><div class="line">         (<span class="name">angle-rectangular</span> (<span class="name">contents</span> z)))</div><div class="line">        ((<span class="name">polar</span>? z)</div><div class="line">         (<span class="name">angle-polat</span> (<span class="name">contents</span> z)))</div><div class="line">        (<span class="name">else</span> (<span class="name">error</span> <span class="string">"Unknown type -- ANGLE"</span> z))))</div></pre></td></tr></table></figure></p>
<p>实现算数操作的时候不需要改变。还是原来的形式就可以。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">add-complex</span> z1 z2)</div><div class="line">  (<span class="name">make-from-real-imag</span> (<span class="name">+</span> (<span class="name">real-part</span> z1) (<span class="name">real-part</span> z2))</div><div class="line">                       (<span class="name">+</span> (<span class="name">imag-part</span> z1) (<span class="name">imag-part</span> z2))))</div></pre></td></tr></table></figure></p>
<p>需要修改下构造函数<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">make-from-real-imag</span> x y)</div><div class="line">  (<span class="name">make-from-real-imag-rectangular</span> x y))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">make-from-mag-ang</span> r a)</div><div class="line">  (<span class="name">make-from-mag-ang-polat</span> r a))</div></pre></td></tr></table></figure></p>
<h1 id="数据导向的程序设计和可加性"><a href="#数据导向的程序设计和可加性" class="headerlink" title="数据导向的程序设计和可加性"></a>数据导向的程序设计和可加性</h1><p>检查一个数据项的类型，并据此去调用某个适当的过程称为基于类型的分派。<br>在系统设计中，这是一种获得模块性的强有力策略（可能oo是更好的方式，检测类型还是比较麻烦的）。<br>存在两个弱点：</p>
<ol>
<li>其中的通用型接口过程，必须知道素有的不同表示。需要检测类型，选择适当函数</li>
<li>独立的表现形式分别设计，需要拥有不同的名字。<br>那么这就导致，这种实现不具有可加性。在每一次增加一种新形式的时候，需要去修改原过程，修改类型判断，增加代码，修改过程名字。</li>
</ol>
<p>现在我们需要的是一种能够将系统设计进一步模块化的方法。一种称为数据导向的程序设计都编程技术提供了这种能力（其实在数据中保存能够处理数据的过程，就能够不用选择函数直接处理了嘛）。<br>（实际上这里讲的是一种注册机制）<br>假定存在put get来制造表格<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">install-rectangular-package</span>)</div><div class="line">  <span class="comment">;internal procedures</span></div><div class="line">  (<span class="name">define</span> (<span class="name">real-part</span> z) (<span class="name">car</span> z))</div><div class="line">  (<span class="name">define</span> (<span class="name">imag-part</span> z) (<span class="name">cdr</span> z))</div><div class="line">  (<span class="name">define</span> (<span class="name">make-from-real-imag</span> x y) (<span class="name">cons</span> x y))</div><div class="line">  (<span class="name">define</span> (<span class="name">magnitude</span> z)</div><div class="line">  (<span class="name">sqrt</span> (<span class="name">+</span> (<span class="name">square</span> (<span class="name">real-part</span> z)) (<span class="name">square</span> (<span class="name">imag-part</span> z)))))</div><div class="line">  (<span class="name">define</span> (<span class="name">angle</span> z)</div><div class="line">  (<span class="name">atan</span> (<span class="name">imag-part</span> z) (<span class="name">real-part</span> z)))</div><div class="line">  (<span class="name">define</span> (<span class="name">make-from-mag-ang</span> r a)</div><div class="line">  (<span class="name">cons</span> (<span class="name">*</span> r (<span class="name">cos</span> a)) (<span class="name">*</span> r (<span class="name">sin</span> a))))</div><div class="line">  <span class="comment">;interface the rest of the system</span></div><div class="line">  (<span class="name">define</span> (<span class="name">tag</span> x) (<span class="name">attach-tag</span> 'rectangular x))</div><div class="line">  (<span class="name">put</span> 'real-part '('rectangular) real-part)</div><div class="line">  (<span class="name">put</span> 'imag-part '('rectangular) imag-part)</div><div class="line">  (<span class="name">put</span> 'magnitude '('rectangular) magnitude)</div><div class="line">  (<span class="name">put</span> 'angle '('rectangular) angle)</div><div class="line">  (<span class="name">put</span> 'make-from-real-imag '('rectangular)</div><div class="line">       (<span class="name">lambda</span> (<span class="name">x</span> y) (<span class="name">tag</span> (<span class="name">make-from-real-imag</span> x y))))</div><div class="line">  (<span class="name">put</span> 'make-from-mag-ang '('rectangular)</div><div class="line">       (<span class="name">lambda</span> (<span class="name">r</span> a) (<span class="name">tag</span> (<span class="name">make-from-mag-ang</span> r a))))</div><div class="line">  'done)</div></pre></td></tr></table></figure></p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">install-polar-package</span>)</div><div class="line">  <span class="comment">;internal procedures</span></div><div class="line">  (<span class="name">define</span> (<span class="name">magnitude</span> z) (<span class="name">car</span> z))</div><div class="line">  (<span class="name">define</span> (<span class="name">angle</span> z) (<span class="name">cdr</span> z))</div><div class="line">  (<span class="name">define</span> (<span class="name">make-from-mag-ang</span> r a) (<span class="name">cons</span> r a))</div><div class="line">  (<span class="name">define</span> (<span class="name">real-part</span> z)</div><div class="line">  (<span class="name">*</span> (<span class="name">magnitude</span> z) (<span class="name">cos</span> (<span class="name">angle</span> z))))</div><div class="line">  (<span class="name">define</span> (<span class="name">imag-part</span> z)</div><div class="line">   (<span class="name">*</span> (<span class="name">magnitude</span> z) (<span class="name">sin</span> (<span class="name">angle</span> z))))</div><div class="line">  (<span class="name">define</span> (<span class="name">make-from-real-imag</span> x y)</div><div class="line">    (<span class="name">cons</span> (<span class="name">sqrt</span> (<span class="name">+</span> (<span class="name">square</span> x) (<span class="name">square</span> y)))</div><div class="line">          (<span class="name">atan</span> y x)))</div><div class="line">  <span class="comment">;interface the rest of the system</span></div><div class="line">  (<span class="name">define</span> (<span class="name">tag</span> x) (<span class="name">attach-tag</span> 'polar x))</div><div class="line">  (<span class="name">put</span> 'real-part '('polar) real-part)</div><div class="line">  (<span class="name">put</span> 'imag-part '('polar) imag-part)</div><div class="line">  (<span class="name">put</span> 'magnitude '('polar) magnitude)</div><div class="line">  (<span class="name">put</span> 'angle '('polar) angle)</div><div class="line">  (<span class="name">put</span> 'make-from-real-imag '('polar)</div><div class="line">       (<span class="name">lambda</span> (<span class="name">x</span> y) (<span class="name">tag</span> (<span class="name">make-from-real-imag</span> x y))))</div><div class="line">  (<span class="name">put</span> 'make-from-mag-ang '('polar)</div><div class="line">       (<span class="name">lambda</span> (<span class="name">r</span> a) (<span class="name">tag</span> (<span class="name">make-from-mag-ang</span> r a))))</div><div class="line">  'done)</div></pre></td></tr></table></figure>
<p>下面操作用于访问表格<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">apply-generic</span> op . args)</div><div class="line">  (<span class="name">let</span> ((<span class="name">type-tags</span> (<span class="name">map</span> type-tag args)))</div><div class="line">    (<span class="name">let</span> ((<span class="name">proc</span> (<span class="name">get</span> op type-tags)))</div><div class="line">      (<span class="name">if</span> proc</div><div class="line">          (<span class="name">apply</span> proc (<span class="name">map</span> contents args))</div><div class="line">          (<span class="name">error</span></div><div class="line">           <span class="string">"No method for these types -- APPLY-GENERIC"</span></div><div class="line">           (<span class="name">list</span> op type-tags))))))</div></pre></td></tr></table></figure></p>
<p>那么通用操作。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">real-part</span> z) (<span class="name">apply-generic</span> 'real-part z))</div><div class="line">(<span class="name">define</span> (<span class="name">imag-part</span> z) (<span class="name">apply-generic</span> 'imag-part z))</div><div class="line">(<span class="name">define</span> (<span class="name">magnitude</span> z) (<span class="name">apply-generic</span> 'magnitude z))</div><div class="line">(<span class="name">define</span> (<span class="name">angle</span> z) (<span class="name">apply-generic</span> 'angle z))</div></pre></td></tr></table></figure></p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">make-from-real-imag</span> x y)</div><div class="line">  ((<span class="name">get</span> 'make-from-real-imag 'rectangular) x y))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">make-from-mag-ang</span> r a)</div><div class="line">  ((<span class="name">get</span> 'make-from-mag-ang 'polat) r a))</div></pre></td></tr></table></figure>
<h2 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h2><p>数据导向的程序设计，最关键的思想是通过显式的操作-类型表格的方式，管理程序中的各种通用性操作。上面使用的程序设计风格是一种基于类型进行分派的组织方式，其中让每个操作管理自己的分派。从效果上看，这种方式就是将操作-类型表哥格分解位一行一行，每个通用型过程表示表格中的一行。<br>另一种实现策略是将这一表格按列进行分解，不是采用一批“只能”操作区基于数据类型进行分派，而是采用“只能数据对象”，让它们基于操作名完成所需要的分派工作。<br>需要做的，将每一个数据对象表示为一个过程。（实际上类似于数据封装，每个数据对象保存专有的函数，利用虚函数就行了。思想是一致的。stl）</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">make-from-real-imag</span> x y)</div><div class="line">  (<span class="name">define</span> (<span class="name">dispatch</span> op)</div><div class="line">    (<span class="name">cond</span> ((<span class="name">eq</span>? op 'real-part) x)</div><div class="line">          ((<span class="name">eq</span>? op 'iamg-part) y)</div><div class="line">          ((<span class="name">eq</span>? op 'magnitude)</div><div class="line">           (<span class="name">sqrt</span> (<span class="name">+</span> (<span class="name">square</span> x) (<span class="name">square</span> y))))</div><div class="line">          ((<span class="name">eq</span>? op 'angle) (<span class="name">atan</span> y x))</div><div class="line">          (<span class="name">else</span></div><div class="line">           (<span class="name">error</span> <span class="string">"Unkonown op -- MAKE-FROM-REAL-IMAG"</span> op))))</div><div class="line">dispatch)</div><div class="line"><span class="comment">;查找函数</span></div><div class="line">(<span class="name">define</span> (<span class="name">apply-generic</span> op arg)</div><div class="line">  (<span class="name">arg</span> op))</div></pre></td></tr></table></figure>
<p>这种风格的程序设计称为消息传递，将数据对象设想位一个实体，它以消息的方式接受所需要操作的名字。（设计模式里面有一种这种模式）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于一个数据对象可以能存在多种有用的表示形式，而且我们也希望所涉及的系统能够处理多种表示形式。&lt;br&gt;例子：复数的极坐标形式和直角坐标的形式&lt;br&gt;构造通用型过程：可以在不止一种数据表示上操作的过程。采用的技术：让它们在带有类型标志的数据对象上工作。也就是说，让数据对象包含着它们应该如何处理的明确信息。&lt;/p&gt;
&lt;h1 id=&quot;复数的表示&quot;&gt;&lt;a href=&quot;#复数的表示&quot; class=&quot;headerlink&quot; title=&quot;复数的表示&quot;&gt;&lt;/a&gt;复数的表示&lt;/h1&gt;&lt;p&gt;为一个数据提供了多种操作，存在多种形式&lt;br&gt;&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;real-part&lt;/span&gt; z) (&lt;span class=&quot;name&quot;&gt;car&lt;/span&gt; z))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;imag-part&lt;/span&gt; z) (&lt;span class=&quot;name&quot;&gt;cdr&lt;/span&gt; z))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;magnitude&lt;/span&gt; z)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;sqrt&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;square&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;real-part&lt;/span&gt; z)) (&lt;span class=&quot;name&quot;&gt;square&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;imag-part&lt;/span&gt; z)))))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;angle&lt;/span&gt; z)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;atan&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;imag-part&lt;/span&gt; z) (&lt;span class=&quot;name&quot;&gt;real-part&lt;/span&gt; z)))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;make-from-real-imag&lt;/span&gt; x y) (&lt;span class=&quot;name&quot;&gt;cons&lt;/span&gt; x y))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;make-from-mag-ang&lt;/span&gt; r a)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;cons&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; r (&lt;span class=&quot;name&quot;&gt;cos&lt;/span&gt; a)) (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; r (&lt;span class=&quot;name&quot;&gt;sin&lt;/span&gt; a))))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;add-complex&lt;/span&gt; z1 z2)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;make-from-real-imag&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;real-part&lt;/span&gt; z1) (&lt;span class=&quot;name&quot;&gt;real-part&lt;/span&gt; z2))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                       (&lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;imag-part&lt;/span&gt; z1) (&lt;span class=&quot;name&quot;&gt;imag-part&lt;/span&gt; z2))))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;sub-complex&lt;/span&gt; z1 z2)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;make-from-real-imag&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;-&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;real-part&lt;/span&gt; z1) (&lt;span class=&quot;name&quot;&gt;real-part&lt;/span&gt; z2))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                       (&lt;span class=&quot;name&quot;&gt;-&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;imag-part&lt;/span&gt; z1) (&lt;span class=&quot;name&quot;&gt;imag-part&lt;/span&gt; z2))))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;mul-complex&lt;/span&gt; z1 z2)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;make-from-mag-ang&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;magnitude&lt;/span&gt; z1) (&lt;span class=&quot;name&quot;&gt;magnitude&lt;/span&gt; z2))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                     (&lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;angle&lt;/span&gt; z1) (&lt;span class=&quot;name&quot;&gt;angle&lt;/span&gt; z2))))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;div-complex&lt;/span&gt; z1 z2)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;make-from-mag-ang&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;/&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;magnitude&lt;/span&gt; z1) (&lt;span class=&quot;name&quot;&gt;magnitude&lt;/span&gt; z2))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                     (&lt;span class=&quot;name&quot;&gt;-&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;angle&lt;/span&gt; z1) (&lt;span class=&quot;name&quot;&gt;angle&lt;/span&gt; z2))))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/child/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="sicp" scheme="http://yoursite.com/child/tags/sicp/"/>
    
      <category term="计算机程序的构造与解释" scheme="http://yoursite.com/child/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E8%A7%A3%E9%87%8A/"/>
    
  </entry>
  
  <entry>
    <title>[读书笔记] sicp 第二章 符号数据</title>
    <link href="http://yoursite.com/child//blog/2016/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%AC%A6%E5%8F%B7%E6%95%B0%E6%8D%AE.html"/>
    <id>http://yoursite.com/child//blog/2016/09/读书笔记-sicp-第二章-符号数据.html</id>
    <published>2016-09-10T00:32:26.000Z</published>
    <updated>2016-10-16T06:35:48.607Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="name">list</span> 'a 'b)</div><div class="line">(<span class="name">eq</span>? a b)</div></pre></td></tr></table></figure>
<h1 id="符号求导"><a href="#符号求导" class="headerlink" title="符号求导"></a>符号求导</h1><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">;e是变量吗</span></div><div class="line">(<span class="name">define</span> (<span class="name">variable</span>? x)</div><div class="line">  (<span class="name">symbol</span>? x))<span class="comment">;symbol?判断变量是不是符号</span></div><div class="line"></div><div class="line"><span class="comment">;v1和v2是同一个变量吗</span></div><div class="line">(<span class="name">define</span> (<span class="name">same-variable</span>? v1 v2)</div><div class="line">  (<span class="name">and</span> (<span class="name">variable</span>? v1) (<span class="name">variable</span>? v2) (<span class="name">eq</span>? v1 v2)))</div><div class="line"></div><div class="line"><span class="comment">;e是和式吗</span></div><div class="line">(<span class="name">define</span> (<span class="name">sum</span>? x)</div><div class="line">  (<span class="name">and</span> (<span class="name">pair</span>? x) (<span class="name">eq</span>? (<span class="name">car</span> x) '+)))</div><div class="line"></div><div class="line"><span class="comment">;e的被加数</span></div><div class="line">(<span class="name">define</span> (<span class="name">addend</span> s) (<span class="name">cadr</span> s))</div><div class="line"></div><div class="line"><span class="comment">;e的加数</span></div><div class="line">(<span class="name">define</span> (<span class="name">augend</span> s) (<span class="name">caddr</span> s))</div><div class="line"></div><div class="line"><span class="comment">;构造起a1和a2的和式</span></div><div class="line">(<span class="name">define</span> (<span class="name">make-sum</span> a1 a2) (<span class="name">list</span> '+ a1 a2))</div><div class="line"></div><div class="line"><span class="comment">;e是乘式吗</span></div><div class="line">(<span class="name">define</span> (<span class="name">product</span>? x)</div><div class="line">  (<span class="name">and</span> (<span class="name">pair</span>? x) (<span class="name">eq</span>? (<span class="name">car</span> x) '*)))</div><div class="line"></div><div class="line"><span class="comment">;e的被乘数</span></div><div class="line">(<span class="name">define</span> (<span class="name">multiplier</span> p) (<span class="name">cadr</span> p))</div><div class="line"></div><div class="line"><span class="comment">;e的乘数</span></div><div class="line">(<span class="name">define</span> (<span class="name">multiplicand</span> p) (<span class="name">caddr</span> p))</div><div class="line"></div><div class="line"><span class="comment">;构造起来m1与m2的乘式</span></div><div class="line">(<span class="name">define</span> (<span class="name">make-product</span> m1 m2)</div><div class="line">       (<span class="name">list</span> '* m1 m2))</div><div class="line"></div><div class="line"><span class="comment">;求导</span></div><div class="line">(<span class="name">define</span> (<span class="name">deriv</span> exp var)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">number</span>? exp) <span class="number">0</span>)</div><div class="line">        ((<span class="name">variable</span>? exp)</div><div class="line">         (<span class="name">if</span> (<span class="name">same-variable</span>? exp var) <span class="number">1</span> <span class="number">0</span>))</div><div class="line">        ((<span class="name">sum</span>? exp)</div><div class="line">         (<span class="name">make-sum</span> (<span class="name">deriv</span> (<span class="name">addend</span> exp) var)</div><div class="line">                   (<span class="name">deriv</span> (<span class="name">augend</span> exp) var)))</div><div class="line">        ((<span class="name">product</span>? exp)</div><div class="line">         (<span class="name">make-sum</span></div><div class="line">          (<span class="name">make-product</span> (<span class="name">multiplier</span> exp)</div><div class="line">                        (<span class="name">deriv</span> (<span class="name">multiplicand</span> exp) var))</div><div class="line">          (<span class="name">make-product</span> (<span class="name">deriv</span> (<span class="name">multiplier</span> exp) var)</div><div class="line">                        (<span class="name">multiplicand</span> exp))))</div><div class="line">        (<span class="name">else</span></div><div class="line">         (<span class="name">error</span> <span class="string">"unknown expression type -- DERIV"</span> exp))))</div><div class="line"></div><div class="line">(<span class="name">deriv</span> '(+ x <span class="number">3</span>) 'x)</div><div class="line">(<span class="name">deriv</span> '(* x y) 'x)</div><div class="line">(deriv '(* (* x y) (+ x <span class="number">3</span>)) 'x)</div><div class="line"></div><div class="line">'(+ <span class="number">1</span> <span class="number">0</span>)</div><div class="line">'(+ (* x <span class="number">0</span>) (* <span class="number">1</span> y))</div><div class="line">'(+ (* (* x y) (+ <span class="number">1</span> <span class="number">0</span>)) (* (+ (* x <span class="number">0</span>) (* <span class="number">1</span> y)) (+ x <span class="number">3</span>)))</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="集合的表示"><a href="#集合的表示" class="headerlink" title="集合的表示"></a>集合的表示</h1><h2 id="集合作为未排序的表"><a href="#集合作为未排序的表" class="headerlink" title="集合作为未排序的表"></a>集合作为未排序的表</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;判断是不是表成员</span></div><div class="line">(<span class="name">define</span> (<span class="name">element-of-set</span>? x set)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">null</span>? set) false)</div><div class="line">        ((<span class="name">equal</span>? x (<span class="name">car</span> set)) true)</div><div class="line">        (<span class="name">else</span> (<span class="name">element-of-set</span>? x (<span class="name">cdr</span> set)))))</div><div class="line"><span class="comment">;向表增加一项</span></div><div class="line">(<span class="name">define</span> (<span class="name">adjoin-set</span> x set)</div><div class="line">  (<span class="name">if</span> (<span class="name">element-of-set</span>? x set)</div><div class="line">      set</div><div class="line">      (<span class="name">cons</span> x set)))</div><div class="line"><span class="comment">;合并</span></div><div class="line">(<span class="name">define</span> (<span class="name">intersection-set</span> set1 set2)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">or</span> (<span class="name">null</span>? set1) (<span class="name">null</span>? set2)) '())</div><div class="line">        ((<span class="name">element-of-set</span>? (<span class="name">car</span> set1) set2)</div><div class="line">         (<span class="name">cons</span> (<span class="name">car</span> set1)</div><div class="line">               (<span class="name">intersection-set</span> (<span class="name">cdr</span> set1) set2)))</div><div class="line">        (<span class="name">else</span> (<span class="name">intersection-set</span> (<span class="name">cdr</span> set1) set2))))</div></pre></td></tr></table></figure>
<h2 id="集合作为排序的表"><a href="#集合作为排序的表" class="headerlink" title="集合作为排序的表"></a>集合作为排序的表</h2><p>排序的存在的好处就是减少复杂度<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">element-of-set</span>? x set)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">null</span>? set) false)</div><div class="line">        ((<span class="name">=</span> x (<span class="name">car</span> set)) true)</div><div class="line">        ((<span class="name">&lt;</span> x (<span class="name">car</span> set)) false)</div><div class="line">        (<span class="name">else</span> (<span class="name">element-of-set</span>? x (<span class="name">cdr</span> set)))))</div><div class="line">    </div><div class="line">(<span class="name">define</span> (<span class="name">intersection-set</span> set1 set2)</div><div class="line">  (<span class="name">if</span> (<span class="name">or</span> (<span class="name">null</span>? set1) (<span class="name">null</span>? set2))</div><div class="line">       '()</div><div class="line">       (<span class="name">let</span> ((<span class="name">x1</span> (<span class="name">car</span> set1)) (<span class="name">x2</span> (<span class="name">car</span> set2)))</div><div class="line">         (<span class="name">cond</span> ((<span class="name">=</span> x1 x2)</div><div class="line">                (<span class="name">cons</span> x1</div><div class="line">                      (<span class="name">intersection-set</span> (<span class="name">cdr</span> set1)</div><div class="line">                                        (<span class="name">cdr</span> set2))))</div><div class="line">               ((<span class="name">&lt;</span> x1 x2)</div><div class="line">                (<span class="name">intersection-set</span> (<span class="name">cdr</span> set1) set2))</div><div class="line">               ((<span class="name">&lt;</span> x2 x1)</div><div class="line">                (<span class="name">intersection-set</span> set (<span class="name">cdr</span> set2)))))))</div></pre></td></tr></table></figure></p>
<h2 id="集合作为二叉树"><a href="#集合作为二叉树" class="headerlink" title="集合作为二叉树"></a>集合作为二叉树</h2><p>有序二叉树<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">entry</span> tree) (<span class="name">car</span> tree))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">left-branch</span> tree) (<span class="name">cadr</span> tree))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">right-branch</span> tree) (<span class="name">caddr</span> tree))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">make-tree</span> entry left right)</div><div class="line">  (<span class="name">list</span> entry left right))</div><div class="line">  </div><div class="line">(<span class="name">define</span> (<span class="name">element-of-set</span>? x set)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">null</span>? set) false)</div><div class="line">        ((<span class="name">=</span> x (<span class="name">entry</span> set)) true)</div><div class="line">        ((<span class="name">&lt;</span> x (<span class="name">entry</span> set))</div><div class="line">         (<span class="name">element-of-set</span>? x (<span class="name">left-branch</span> set)))</div><div class="line">        ((<span class="name">&gt;</span> x (<span class="name">entry</span> set))</div><div class="line">         (<span class="name">element-of-set</span>? x (<span class="name">right-branch</span> set)))))</div><div class="line"><span class="comment">;插入要找到正确位置</span></div><div class="line">(<span class="name">define</span> (<span class="name">adjoin-set</span> x set)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">null</span>? set) (<span class="name">make-tree</span> x '() '()))</div><div class="line">        ((<span class="name">=</span> x (<span class="name">entry</span> set)) set)</div><div class="line">        ((<span class="name">&lt;</span> x (<span class="name">entry</span> set))</div><div class="line">         (<span class="name">make-tree</span> (<span class="name">entry</span> set)</div><div class="line">                    (<span class="name">adjoin-set</span> x (<span class="name">left-branch</span> set))</div><div class="line">                    (<span class="name">right-branch</span> set)))</div><div class="line">        ((<span class="name">&gt;</span> x (<span class="name">entry</span> set))</div><div class="line">         (<span class="name">make-tree</span> (<span class="name">entry</span> set)</div><div class="line">                    (<span class="name">left-branch</span> set)</div><div class="line">                    (<span class="name">adjoin-set</span> x (<span class="name">right-branch</span> set))))))</div></pre></td></tr></table></figure></p>
<h1 id="huffman编码树"><a href="#huffman编码树" class="headerlink" title="huffman编码树"></a>huffman编码树</h1><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;树的表示</span></div><div class="line"><span class="comment">;leaf 符号 权重</span></div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">make-leaf</span> symbol weight)</div><div class="line">  (<span class="name">list</span> 'leaf symbol weight))</div><div class="line">  </div><div class="line">(<span class="name">define</span> (<span class="name">leaf</span>? object)</div><div class="line">  (<span class="name">eq</span>? (<span class="name">car</span> object) 'leaf))</div><div class="line">  </div><div class="line">(<span class="name">define</span> (<span class="name">symbol-leaf</span> x) (<span class="name">cadr</span> x))</div><div class="line">(<span class="name">define</span> (<span class="name">weight-leaf</span> x) (<span class="name">caddr</span> x))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">make-code-tree</span> left right)</div><div class="line">  (<span class="name">list</span> left</div><div class="line">        right</div><div class="line">        (<span class="name">append</span> (<span class="name">symbols</span> left) (<span class="name">symbols</span> right))</div><div class="line">        (<span class="name">+</span> (<span class="name">weight</span> left) (<span class="name">weight</span> right))))</div><div class="line">        </div><div class="line">(<span class="name">define</span> (<span class="name">left-branch</span> tree) (<span class="name">car</span> tree))</div><div class="line">(<span class="name">define</span> (<span class="name">right-branch</span> tree) (<span class="name">cadr</span> tree))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">symbols</span> tree)</div><div class="line">  (<span class="name">if</span> (<span class="name">leaf</span>? tree)</div><div class="line">      (<span class="name">list</span> (<span class="name">symbol-leaf</span> tree))</div><div class="line">      (<span class="name">caddr</span> tree)))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">weight</span> tree)</div><div class="line">  (<span class="name">if</span> (<span class="name">leaf</span>? tree)</div><div class="line">      (<span class="name">weight-leaf</span> tree)</div><div class="line">      (<span class="name">caddr</span> tree)))</div></pre></td></tr></table></figure>
<h2 id="解码过程"><a href="#解码过程" class="headerlink" title="解码过程"></a>解码过程</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">decode</span> bits tree)</div><div class="line">  (<span class="name">define</span> (<span class="name">decode-1</span> bits current-branch)</div><div class="line">    (<span class="name">if</span> (<span class="name">null</span>? bits)</div><div class="line">        '()</div><div class="line">        (<span class="name">let</span> ((<span class="name">next-branch</span></div><div class="line">               (<span class="name">choose-branch</span> (<span class="name">car</span> bits) current-branch)))</div><div class="line">          (<span class="name">if</span> (<span class="name">leaf</span>? next-branch)</div><div class="line">              (<span class="name">cons</span> (<span class="name">symbol-leaf</span> next-branch)</div><div class="line">                    (<span class="name">decode-1</span> (<span class="name">cdr</span> bits) tree))</div><div class="line">              (<span class="name">decode-1</span> (<span class="name">cdr</span> bits) next-branch)))))</div><div class="line">  (<span class="name">decode-1</span> bits tree))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">choose-branch</span> bit branch)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">=</span> bit <span class="number">0</span>) (<span class="name">left-branch</span> branch))</div><div class="line">        ((<span class="name">=</span> bit <span class="number">1</span>) (<span class="name">right-branch</span> branch))</div><div class="line">        (<span class="name">else</span> (<span class="name">error</span> <span class="string">"bad bit -- CHOOSE-BRANCH"</span> bit))))</div></pre></td></tr></table></figure>
<h2 id="带权重的集合"><a href="#带权重的集合" class="headerlink" title="带权重的集合"></a>带权重的集合</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">adjoin-set</span> x set)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">null</span>? set) (<span class="name">list</span> x))</div><div class="line">        ((<span class="name">&lt;</span> (<span class="name">weight</span> x) (<span class="name">weight</span> (<span class="name">car</span> set))) (<span class="name">cons</span> x set))</div><div class="line">        (<span class="name">else</span> (<span class="name">cons</span> (<span class="name">car</span> set)</div><div class="line">                    (<span class="name">adjoin-set</span> x (<span class="name">cdr</span> set))))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">make-leaf-set</span> pairs)</div><div class="line">  (<span class="name">if</span> (<span class="name">null</span>? pairs)</div><div class="line">      '()</div><div class="line">      (<span class="name">let</span> ((<span class="name">pair</span> (<span class="name">car</span> pairs)))</div><div class="line">        (<span class="name">adjoin-set</span> (<span class="name">make-leaf</span> (<span class="name">car</span> pair)</div><div class="line">                               (<span class="name">cadr</span> pair))</div><div class="line">                    (<span class="name">make-leaf-set</span> (<span class="name">cdr</span> pairs))))))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;list&lt;/span&gt; &#39;a &#39;b)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;eq&lt;/span&gt;? a b)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;符号求导&quot;&gt;&lt;a href=&quot;#符号求导&quot; class=&quot;headerlink&quot; title=&quot;符号求导&quot;&gt;&lt;/a&gt;符号求导&lt;/h1&gt;&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;e是变量吗&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;variable&lt;/span&gt;? x)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;symbol&lt;/span&gt;? x))&lt;span class=&quot;comment&quot;&gt;;symbol?判断变量是不是符号&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;v1和v2是同一个变量吗&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;same-variable&lt;/span&gt;? v1 v2)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;and&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;variable&lt;/span&gt;? v1) (&lt;span class=&quot;name&quot;&gt;variable&lt;/span&gt;? v2) (&lt;span class=&quot;name&quot;&gt;eq&lt;/span&gt;? v1 v2)))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;e是和式吗&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;sum&lt;/span&gt;? x)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;and&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;pair&lt;/span&gt;? x) (&lt;span class=&quot;name&quot;&gt;eq&lt;/span&gt;? (&lt;span class=&quot;name&quot;&gt;car&lt;/span&gt; x) &#39;+)))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;e的被加数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;addend&lt;/span&gt; s) (&lt;span class=&quot;name&quot;&gt;cadr&lt;/span&gt; s))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;e的加数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;augend&lt;/span&gt; s) (&lt;span class=&quot;name&quot;&gt;caddr&lt;/span&gt; s))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;构造起a1和a2的和式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;make-sum&lt;/span&gt; a1 a2) (&lt;span class=&quot;name&quot;&gt;list&lt;/span&gt; &#39;+ a1 a2))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;e是乘式吗&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;product&lt;/span&gt;? x)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;and&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;pair&lt;/span&gt;? x) (&lt;span class=&quot;name&quot;&gt;eq&lt;/span&gt;? (&lt;span class=&quot;name&quot;&gt;car&lt;/span&gt; x) &#39;*)))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;e的被乘数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;multiplier&lt;/span&gt; p) (&lt;span class=&quot;name&quot;&gt;cadr&lt;/span&gt; p))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;e的乘数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;multiplicand&lt;/span&gt; p) (&lt;span class=&quot;name&quot;&gt;caddr&lt;/span&gt; p))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;构造起来m1与m2的乘式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;make-product&lt;/span&gt; m1 m2)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       (&lt;span class=&quot;name&quot;&gt;list&lt;/span&gt; &#39;* m1 m2))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;求导&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;deriv&lt;/span&gt; exp var)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;cond&lt;/span&gt; ((&lt;span class=&quot;name&quot;&gt;number&lt;/span&gt;? exp) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ((&lt;span class=&quot;name&quot;&gt;variable&lt;/span&gt;? exp)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         (&lt;span class=&quot;name&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;same-variable&lt;/span&gt;? exp var) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ((&lt;span class=&quot;name&quot;&gt;sum&lt;/span&gt;? exp)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         (&lt;span class=&quot;name&quot;&gt;make-sum&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;deriv&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;addend&lt;/span&gt; exp) var)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   (&lt;span class=&quot;name&quot;&gt;deriv&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;augend&lt;/span&gt; exp) var)))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ((&lt;span class=&quot;name&quot;&gt;product&lt;/span&gt;? exp)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         (&lt;span class=&quot;name&quot;&gt;make-sum&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          (&lt;span class=&quot;name&quot;&gt;make-product&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;multiplier&lt;/span&gt; exp)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        (&lt;span class=&quot;name&quot;&gt;deriv&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;multiplicand&lt;/span&gt; exp) var))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          (&lt;span class=&quot;name&quot;&gt;make-product&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;deriv&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;multiplier&lt;/span&gt; exp) var)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        (&lt;span class=&quot;name&quot;&gt;multiplicand&lt;/span&gt; exp))))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        (&lt;span class=&quot;name&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         (&lt;span class=&quot;name&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;unknown expression type -- DERIV&quot;&lt;/span&gt; exp))))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;deriv&lt;/span&gt; &#39;(+ x &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &#39;x)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;deriv&lt;/span&gt; &#39;(* x y) &#39;x)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(deriv &#39;(* (* x y) (+ x &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)) &#39;x)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&#39;(+ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&#39;(+ (* x &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) (* &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; y))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&#39;(+ (* (* x y) (+ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) (* (+ (* x &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) (* &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; y)) (+ x &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/child/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="sicp" scheme="http://yoursite.com/child/tags/sicp/"/>
    
      <category term="计算机程序的构造与解释" scheme="http://yoursite.com/child/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E8%A7%A3%E9%87%8A/"/>
    
  </entry>
  
  <entry>
    <title>[读书笔记] sicp 第二章 构造数据抽象</title>
    <link href="http://yoursite.com/child//blog/2016/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%9E%84%E9%80%A0%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1.html"/>
    <id>http://yoursite.com/child//blog/2016/09/读书笔记-sicp-第二章-构造数据抽象.html</id>
    <published>2016-09-10T00:32:08.000Z</published>
    <updated>2016-10-16T06:35:48.601Z</updated>
    
    <content type="html"><![CDATA[<p>第一章关注的是计算过程，以及过程在程序中所扮演的角色。<br>本章，讲将数据对象组合起来，形成复合数据的方式。<br>复合数据：能够提升我们在设计程序时所位于的概念层次，提高设计的模块性，增强语言的表达能力。<br>将程序中处理数据对象的表示的部分与处理数据对象的使用部分相互 隔离的技术，称为数据抽象。<br>复合数据中的一个关键性思想是闭包的概念，也就是说，用于组合数据对象的粘合剂不但能用于组合基本的数据对象，也能组合复合数据对象。<br>复合数据对象能够称为以混合与匹配的方式组合程序模块的方便接口。</p>
<h1 id="数据抽象引导"><a href="#数据抽象引导" class="headerlink" title="数据抽象引导"></a>数据抽象引导</h1><p>数据抽象的基本思想，就是设法构造出一些使用复合数据对象的程序，使它们就像是在抽象数据上操作一样。</p>
<h2 id="有理数的算数运算"><a href="#有理数的算数运算" class="headerlink" title="有理数的算数运算"></a>有理数的算数运算</h2><p>假定存在构造函数与选择函数<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(make-rat n d);返回一个有理数，分子是整数n，分母是整数d</div><div class="line">(numer x);返回有理数x的分子</div><div class="line">(denom x));返回有理数x的分母</div></pre></td></tr></table></figure></p>
<p>那么可以定义以下的规则<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;加法</span></div><div class="line">(<span class="name">define</span> (<span class="name">add-rat</span> x y)</div><div class="line">  (<span class="name">make-rat</span> (<span class="name">+</span> (<span class="name">*</span> (<span class="name">numer</span> x) (<span class="name">denom</span> y))</div><div class="line">               (<span class="name">*</span> (<span class="name">numer</span> y) (<span class="name">denom</span> x)))</div><div class="line">            (<span class="name">*</span> (<span class="name">denom</span> x) (<span class="name">denom</span> y))))</div><div class="line"><span class="comment">;减法</span></div><div class="line">(<span class="name">define</span> (<span class="name">sub-rat</span> x y)</div><div class="line">  (<span class="name">make-rat</span> (<span class="name">-</span> (<span class="name">*</span> (<span class="name">numer</span> x) (<span class="name">denom</span> y))</div><div class="line">               (<span class="name">*</span> (<span class="name">numer</span> y) (<span class="name">denom</span> x)))</div><div class="line">            (<span class="name">*</span> (<span class="name">denom</span> x) (<span class="name">denom</span> y))))</div><div class="line"><span class="comment">;乘法</span></div><div class="line">(<span class="name">define</span> (<span class="name">mul-rat</span> x y)</div><div class="line">  (<span class="name">make-rat</span> (<span class="name">*</span> (<span class="name">numer</span> x) (<span class="name">numer</span> y))</div><div class="line">            (<span class="name">*</span> (<span class="name">denom</span> x) (<span class="name">denom</span> y))))</div><div class="line"><span class="comment">;除法</span></div><div class="line">(<span class="name">define</span> (<span class="name">div-rat</span> x y)</div><div class="line">  (<span class="name">make-rat</span> (<span class="name">*</span> (<span class="name">numer</span> x) (<span class="name">denom</span> y))</div><div class="line">            (<span class="name">*</span> (<span class="name">denom</span> x) (<span class="name">numer</span> y))))</div><div class="line"><span class="comment">;等于？</span></div><div class="line">(<span class="name">define</span> (<span class="name">equal-rat</span>? x y)</div><div class="line">  (<span class="name">=</span> (<span class="name">*</span> (<span class="name">numer</span> x) (<span class="name">denom</span> y))</div><div class="line">     (<span class="name">*</span> (<span class="name">numer</span> y) (<span class="name">denom</span> x))))</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="序对"><a href="#序对" class="headerlink" title="序对"></a>序对</h3><p>lisp存在基本过程cons，car,cdr。存在下列关系<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> x (<span class="name">cons</span> <span class="number">1</span> <span class="number">2</span>))</div><div class="line"></div><div class="line">(<span class="name">car</span> x)</div><div class="line"><span class="number">1</span></div><div class="line"></div><div class="line">(<span class="name">cdr</span> x)</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure></p>
<h3 id="有理数的表示"><a href="#有理数的表示" class="headerlink" title="有理数的表示"></a>有理数的表示</h3><p>利用序对完成有理数的实现<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">make-rat</span> n d)</div><div class="line">  (<span class="name">cons</span> n d))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">numer</span> x)</div><div class="line">  (<span class="name">car</span> x))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">denom</span> x)</div><div class="line">  (<span class="name">cdr</span> x))</div></pre></td></tr></table></figure></p>
<p>打印有理数<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">print-rat</span> x)</div><div class="line">  (<span class="name">newline</span>)</div><div class="line">  (<span class="name">display</span> (<span class="name">numer</span> x))</div><div class="line">  (<span class="name">display</span> <span class="string">"/"</span>)</div><div class="line">  (<span class="name">display</span> (<span class="name">denom</span> x)))</div></pre></td></tr></table></figure></p>
<p>化简有理数<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">make-rat</span> n d)</div><div class="line">  (<span class="name">let</span> ((<span class="name">g</span> (<span class="name">gcd</span> n d)))</div><div class="line">  (<span class="name">cons</span> (<span class="name">/</span> n g) (<span class="name">/</span> d g))))</div></pre></td></tr></table></figure></p>
<h2 id="抽象屏障"><a href="#抽象屏障" class="headerlink" title="抽象屏障"></a>抽象屏障</h2><p>每一个层次中国策构成了所定义的抽象 屏障的接口，联系起系统中的不同层次。使得系统简单，修改容易。</p>
<h2 id="数据意味着什么"><a href="#数据意味着什么" class="headerlink" title="数据意味着什么"></a>数据意味着什么</h2><p>一般而言，我们总可以将数据定义为一组适当的选择函数和构造函数，以及使这些过程成为一套合法的表示，它们必须满足一组特定的条件。<br>使用过程实现cons car cdr<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">cons</span> x y)</div><div class="line">  (<span class="name">define</span> (<span class="name">dispatch</span> m)</div><div class="line">    (<span class="name">cond</span> ((<span class="name">=</span> m <span class="number">0</span>) x)</div><div class="line">          ((<span class="name">=</span> n <span class="number">1</span>) y)</div><div class="line">          (<span class="name">else</span> (<span class="name">error</span> <span class="string">"Argument not 0 or 1 -- CONS"</span> m))))</div><div class="line">  dispatch)</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">car</span> z) (<span class="name">z</span> <span class="number">0</span>))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">cdr</span> z) (<span class="name">z</span> <span class="number">1</span>))</div></pre></td></tr></table></figure></p>
<p>尽管实际语言的实现不是上面的形式，但是我们定义的函数已经能够正常完成工作了。过程和数据的界限被模糊，满足关于序对的描述。</p>
<h1 id="层次性数据和闭包性质"><a href="#层次性数据和闭包性质" class="headerlink" title="层次性数据和闭包性质"></a>层次性数据和闭包性质</h1><p>某种组合数据对象的操作满足闭包性质，那就是说，通过它组合起数据对象得到的结果本身可以通过同样的操作再进行组合。闭包性质是任何一种组合功能的威力的关键要素，因为它使我们能够建立起层次性的结构，这种结构由一些部分构成，而其中的各个部分又是由它们的部分构成，并且可以继续下去。</p>
<h2 id="序列的表示"><a href="#序列的表示" class="headerlink" title="序列的表示"></a>序列的表示</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="name">list</span> &lt;a1&gt; &lt;a2&gt;...&lt;an&gt;)</div><div class="line"><span class="comment">;等于</span></div><div class="line">(<span class="name">cons</span> &lt;a1&gt; (<span class="name">cons</span> &lt;a2&gt; (<span class="name">cons</span> ... (<span class="name">cons</span> &lt;an&gt; <span class="literal">nil</span>)...)))</div></pre></td></tr></table></figure>
<p>nil是拉丁词汇nihil的缩写，拉丁语表示什么也没有，表示序对的链结束，代表一个不包含任何元素的序对，空表。</p>
<h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;第n个元素</span></div><div class="line">(<span class="name">define</span> (<span class="name">list-ref</span> items n)</div><div class="line">  (<span class="name">if</span> (<span class="name">=</span> n <span class="number">0</span>)</div><div class="line">      (<span class="name">car</span> items)</div><div class="line">      (<span class="name">list-ref</span> (<span class="name">cdr</span> items) (<span class="name">-</span> n <span class="number">1</span>))))</div><div class="line"></div><div class="line">(<span class="name">define</span> squares (<span class="name">list</span> <span class="number">1</span> <span class="number">4</span> <span class="number">9</span> <span class="number">16</span> <span class="number">25</span>))</div><div class="line"></div><div class="line">(<span class="name">list-ref</span> squares <span class="number">3</span>)</div><div class="line"><span class="number">16</span></div><div class="line"></div><div class="line"><span class="comment">;表长 递归</span></div><div class="line">(<span class="name">define</span> (<span class="name">length</span> items)</div><div class="line">  (<span class="name">if</span> (<span class="name">null</span>? items)</div><div class="line">      <span class="number">0</span></div><div class="line">      (<span class="name">+</span> <span class="number">1</span> (<span class="name">length</span> (<span class="name">cdr</span> items)))))</div><div class="line">  </div><div class="line"><span class="comment">;表长 迭代</span></div><div class="line">(<span class="name">define</span> (<span class="name">length</span> items)</div><div class="line">  (<span class="name">define</span> (<span class="name">length-iter</span> a count)</div><div class="line">    (<span class="name">if</span> (<span class="name">null</span>? a)</div><div class="line">        count</div><div class="line">        (<span class="name">length-iter</span> (<span class="name">cdr</span> a) (<span class="name">+</span> <span class="number">1</span> count))))</div><div class="line">  (<span class="name">length-iter</span> items <span class="number">0</span>))</div><div class="line">  </div><div class="line">(<span class="name">length</span> squares)</div><div class="line"><span class="number">5</span></div><div class="line"></div><div class="line">(<span class="name">define</span> odds (<span class="name">list</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span>))</div><div class="line"></div><div class="line"><span class="comment">;组合两个表</span></div><div class="line">(<span class="name">define</span> (<span class="name">append</span> list1 list2)</div><div class="line">  (<span class="name">if</span> (<span class="name">null</span>? list1)</div><div class="line">      list2</div><div class="line">      (<span class="name">cons</span> (<span class="name">car</span> list1) (<span class="name">append</span> (<span class="name">cdr</span> list1) list2))))</div><div class="line"></div><div class="line">(<span class="name">append</span> odds squares)</div><div class="line">'(<span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">1</span> <span class="number">4</span> <span class="number">9</span> <span class="number">16</span> <span class="number">25</span>)</div></pre></td></tr></table></figure>
<h3 id="对表的映射"><a href="#对表的映射" class="headerlink" title="对表的映射"></a>对表的映射</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;DrRacket中未定义nil，若要使用nil</span></div><div class="line">(<span class="name">define</span> <span class="literal">nil</span> '())</div><div class="line"></div><div class="line"><span class="comment">;缩放</span></div><div class="line">(<span class="name">define</span> (<span class="name">scale-list</span> items factor)</div><div class="line">  (<span class="name">if</span> (<span class="name">null</span>? items)</div><div class="line">      <span class="literal">nil</span></div><div class="line">      (<span class="name">cons</span> (<span class="name">*</span> (<span class="name">car</span> items) factor)</div><div class="line">            (<span class="name">scale-list</span> (<span class="name">cdr</span> items) factor))))</div><div class="line">            </div><div class="line">(<span class="name">scale-list</span> (<span class="name">list</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>) <span class="number">10</span>)</div><div class="line">'(<span class="number">10</span> <span class="number">20</span> <span class="number">30</span> <span class="number">40</span> <span class="number">50</span>)</div><div class="line"></div><div class="line"><span class="comment">;更一般的过程</span></div><div class="line">(<span class="name">define</span> (<span class="name">map</span> proc items)</div><div class="line">  (<span class="name">if</span> (<span class="name">null</span>? items)</div><div class="line">      <span class="literal">nil</span></div><div class="line">      (<span class="name">cons</span> (<span class="name">proc</span> (<span class="name">car</span> items))</div><div class="line">            (<span class="name">map</span> proc (<span class="name">cdr</span> items)))))</div><div class="line">            </div><div class="line">(<span class="name">define</span> (<span class="name">scale-list</span> items factor)</div><div class="line">  (<span class="name">map</span> (<span class="name">lambda</span> (<span class="name">x</span>) (<span class="name">*</span> x factor))</div><div class="line">       items))</div></pre></td></tr></table></figure>
<p>map构建一层抽象屏障，将实现表变换的过程的实现，与如何提取表中元素以及组合结果的细节隔离开。</p>
<h2 id="层次性结构"><a href="#层次性结构" class="headerlink" title="层次性结构"></a>层次性结构</h2><p>树的分支，而那些本身也是序列的元素就形成了树中的子树。<br>实现count-leaver<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">count-leaves</span> x)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">null</span>? x) <span class="number">0</span>)</div><div class="line">        ((<span class="name">not</span> (<span class="name">pair</span>? x)) <span class="number">1</span>)</div><div class="line">        (<span class="name">else</span> (<span class="name">+</span> (<span class="name">count-leaves</span> (<span class="name">car</span> x))</div><div class="line">                 (<span class="name">count-leaves</span> (<span class="name">cdr</span> x))))))</div></pre></td></tr></table></figure></p>
<h2 id="对树的映射"><a href="#对树的映射" class="headerlink" title="对树的映射"></a>对树的映射</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">sacle-tree</span> tree factor)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">null</span>? tree) <span class="literal">nil</span>)</div><div class="line">        ((<span class="name">not</span> (<span class="name">pair</span>? tree)) (<span class="name">*</span> tree factor))</div><div class="line">        (<span class="name">else</span> (<span class="name">cons</span> (<span class="name">sacle-tree</span> (<span class="name">car</span> tree) factor)</div><div class="line">                    (<span class="name">sacle-tree</span> (<span class="name">cdr</span> tree) factor)))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">scale-tree</span> tree factor)</div><div class="line">  (<span class="name">map</span>  (<span class="name">lambda</span> (<span class="name">sub-tree</span>)</div><div class="line">          (<span class="name">if</span> (<span class="name">pair</span>? sub-tree)</div><div class="line">              (<span class="name">scale-tree</span> sub-tree factor)</div><div class="line">              (<span class="name">*</span> sub-tree factor)))</div><div class="line">        tree))</div></pre></td></tr></table></figure>
<h2 id="序列作为一种约定的接口"><a href="#序列作为一种约定的接口" class="headerlink" title="序列作为一种约定的接口"></a>序列作为一种约定的接口</h2><p>强有力的设计原理-使用约定的接口。<br>考虑下面的过程，它以一棵树为参数，计算出那些值为奇数的叶子的平方和。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">sum-odd-squares</span> tree)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">null</span>? tree) <span class="number">0</span>)</div><div class="line">        ((<span class="name">not</span> (<span class="name">pair</span>? tree))</div><div class="line">         (<span class="name">if</span> (<span class="name">odd</span>? tree) (<span class="name">square</span> tree) <span class="number">0</span>))</div><div class="line">        (<span class="name">else</span> (<span class="name">+</span> (<span class="name">sum-odd-squares</span> (<span class="name">car</span> tree))</div><div class="line">                 (<span class="name">sum-odd-squares</span> (<span class="name">cdr</span> tree))))))</div></pre></td></tr></table></figure></p>
<p>偶数的斐波那契数列的表。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">even-fibs</span> n)</div><div class="line">  (<span class="name">define</span> (<span class="name">next</span> k)</div><div class="line">    (<span class="name">if</span> (<span class="name">&gt;</span> k n)</div><div class="line">        <span class="literal">nil</span></div><div class="line">        (<span class="name">let</span> ((<span class="name">f</span> (<span class="name">fib</span> k)))</div><div class="line">          (<span class="name">if</span> (<span class="name">even</span>? f)</div><div class="line">              (<span class="name">cons</span> f (<span class="name">next</span> (<span class="name">+</span> k l)))</div><div class="line">              (<span class="name">next</span> (<span class="name">+</span> k <span class="number">1</span>))))))</div><div class="line">  (<span class="name">next</span> <span class="number">0</span>))</div></pre></td></tr></table></figure></p>
<p>虽然表面上结构差异大，但是计算的抽象描述存在极大的相似性。<br>都是从枚举器开始，产生给定的树的树叶组成的信号。信号流过过滤器，过滤掉不符合规则的信号。通过一个映射，转换每一个元素。积累器把所有的元素组合起来。<br>但是上面的程序是将以上的操作混合在一起。</p>
<h3 id="序列操作"><a href="#序列操作" class="headerlink" title="序列操作"></a>序列操作</h3><p>修改map过程</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="name">map</span> square (<span class="name">list</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>))</div><div class="line">(<span class="number">1</span> <span class="number">4</span> <span class="number">9</span> <span class="number">16</span> <span class="number">25</span>)</div></pre></td></tr></table></figure>
<p>过滤器<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">filter</span> predicate sequence)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">null</span>? sequence) <span class="literal">nil</span>)</div><div class="line">        ((<span class="name">predicate</span> (<span class="name">car</span> sequence))</div><div class="line">         (<span class="name">cond</span> (<span class="name">car</span> sequence)<span class="comment">;真就保留</span></div><div class="line">               (<span class="name">filter</span> predicate (<span class="name">cdr</span> sequence))))</div><div class="line">        (<span class="name">else</span> (<span class="name">filter</span> predicate (<span class="name">cdr</span> sequence)))))</div></pre></td></tr></table></figure></p>
<p>积累器<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">accumulate</span> op initial sequence)</div><div class="line">  (<span class="name">if</span> (<span class="name">null</span>? sequence)</div><div class="line">      initial</div><div class="line">      (<span class="name">op</span> (<span class="name">car</span> sequence)</div><div class="line">          (<span class="name">accumulate</span> op initial (<span class="name">cdr</span> sequence)))))</div></pre></td></tr></table></figure></p>
<p>fib枚举器<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">enumerate-interval</span> low high)</div><div class="line">  (<span class="name">if</span> (<span class="name">&gt;</span> low high)</div><div class="line">      <span class="literal">nil</span></div><div class="line">      (<span class="name">cons</span> low (<span class="name">enumerate-interval</span> (<span class="name">+</span> low <span class="number">1</span>) high))))</div></pre></td></tr></table></figure></p>
<p>树叶枚举器<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">enumerate-tree</span> tree)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">null</span>? tree) <span class="literal">nil</span>)</div><div class="line">        ((<span class="name">not</span> (<span class="name">pair</span>? tree)) (<span class="name">list</span> tree))</div><div class="line">        (<span class="name">else</span> (<span class="name">append</span> (<span class="name">enumerate-tree</span> (<span class="name">car</span> tree))</div><div class="line">                      (<span class="name">enumerate-tree</span> (<span class="name">cdr</span> tree))))))</div></pre></td></tr></table></figure></p>
<p>重构<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">sum-odd-squares</span> tree)</div><div class="line">  (<span class="name">accumulate</span> +</div><div class="line">              <span class="number">0</span></div><div class="line">              (<span class="name">map</span> square</div><div class="line">                   (<span class="name">filter</span> odd?</div><div class="line">                           (<span class="name">enumerate-tree</span> tree)))))</div></pre></td></tr></table></figure></p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">even-fibs</span> n)</div><div class="line">  (<span class="name">accumulate</span> cons</div><div class="line">              <span class="literal">nil</span></div><div class="line">              (<span class="name">filter</span> even?</div><div class="line">                      (<span class="name">map</span> fib</div><div class="line">                           (<span class="name">enumerate-interval</span> <span class="number">0</span> n)))))</div></pre></td></tr></table></figure>
<p>通过提供一个标准不见的库，并使这些不见都有着一些能以灵活方式互相连接的约定接口，将能够进一步推动模块化设计。<br>在工程设计中，模块化结构是控制复杂性的一种威力巨大的策略。（类似西门子的自动化软件 plc等）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一章关注的是计算过程，以及过程在程序中所扮演的角色。&lt;br&gt;本章，讲将数据对象组合起来，形成复合数据的方式。&lt;br&gt;复合数据：能够提升我们在设计程序时所位于的概念层次，提高设计的模块性，增强语言的表达能力。&lt;br&gt;将程序中处理数据对象的表示的部分与处理数据对象的使用部分相互 隔离的技术，称为数据抽象。&lt;br&gt;复合数据中的一个关键性思想是闭包的概念，也就是说，用于组合数据对象的粘合剂不但能用于组合基本的数据对象，也能组合复合数据对象。&lt;br&gt;复合数据对象能够称为以混合与匹配的方式组合程序模块的方便接口。&lt;/p&gt;
&lt;h1 id=&quot;数据抽象引导&quot;&gt;&lt;a href=&quot;#数据抽象引导&quot; class=&quot;headerlink&quot; title=&quot;数据抽象引导&quot;&gt;&lt;/a&gt;数据抽象引导&lt;/h1&gt;&lt;p&gt;数据抽象的基本思想，就是设法构造出一些使用复合数据对象的程序，使它们就像是在抽象数据上操作一样。&lt;/p&gt;
&lt;h2 id=&quot;有理数的算数运算&quot;&gt;&lt;a href=&quot;#有理数的算数运算&quot; class=&quot;headerlink&quot; title=&quot;有理数的算数运算&quot;&gt;&lt;/a&gt;有理数的算数运算&lt;/h2&gt;&lt;p&gt;假定存在构造函数与选择函数&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(make-rat n d);返回一个有理数，分子是整数n，分母是整数d&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(numer x);返回有理数x的分子&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(denom x));返回有理数x的分母&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么可以定义以下的规则&lt;br&gt;&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;加法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;add-rat&lt;/span&gt; x y)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;make-rat&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;numer&lt;/span&gt; x) (&lt;span class=&quot;name&quot;&gt;denom&lt;/span&gt; y))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;numer&lt;/span&gt; y) (&lt;span class=&quot;name&quot;&gt;denom&lt;/span&gt; x)))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;denom&lt;/span&gt; x) (&lt;span class=&quot;name&quot;&gt;denom&lt;/span&gt; y))))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;减法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;sub-rat&lt;/span&gt; x y)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;make-rat&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;-&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;numer&lt;/span&gt; x) (&lt;span class=&quot;name&quot;&gt;denom&lt;/span&gt; y))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;numer&lt;/span&gt; y) (&lt;span class=&quot;name&quot;&gt;denom&lt;/span&gt; x)))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;denom&lt;/span&gt; x) (&lt;span class=&quot;name&quot;&gt;denom&lt;/span&gt; y))))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;乘法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;mul-rat&lt;/span&gt; x y)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;make-rat&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;numer&lt;/span&gt; x) (&lt;span class=&quot;name&quot;&gt;numer&lt;/span&gt; y))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;denom&lt;/span&gt; x) (&lt;span class=&quot;name&quot;&gt;denom&lt;/span&gt; y))))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;除法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;div-rat&lt;/span&gt; x y)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;make-rat&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;numer&lt;/span&gt; x) (&lt;span class=&quot;name&quot;&gt;denom&lt;/span&gt; y))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;denom&lt;/span&gt; x) (&lt;span class=&quot;name&quot;&gt;numer&lt;/span&gt; y))))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;等于？&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;equal-rat&lt;/span&gt;? x y)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;numer&lt;/span&gt; x) (&lt;span class=&quot;name&quot;&gt;denom&lt;/span&gt; y))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;numer&lt;/span&gt; y) (&lt;span class=&quot;name&quot;&gt;denom&lt;/span&gt; x))))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/child/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="sicp" scheme="http://yoursite.com/child/tags/sicp/"/>
    
      <category term="计算机程序的构造与解释" scheme="http://yoursite.com/child/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E8%A7%A3%E9%87%8A/"/>
    
  </entry>
  
  <entry>
    <title>[读书笔记] sicp 第一章 构造过程抽象</title>
    <link href="http://yoursite.com/child//blog/2016/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%9E%84%E9%80%A0%E8%BF%87%E7%A8%8B%E6%8A%BD%E8%B1%A1.html"/>
    <id>http://yoursite.com/child//blog/2016/09/读书笔记-sicp-第一章-构造过程抽象.html</id>
    <published>2016-09-10T00:31:58.000Z</published>
    <updated>2016-10-16T06:35:48.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于读书的目的"><a href="#关于读书的目的" class="headerlink" title="关于读书的目的"></a>关于读书的目的</h1><p>很多时候对于一本比较复杂的书，你在到达一定阶段的时候是难以读进去的。Sicp我曾经在几个月前尝试的去读了第一章。很快就读完的，但是对于其的理解实在浅薄。<br>我希望在这一次的阅读的过程中能够顺利的过一次不本书有所收获。<br>在接下来的日子里，我会记录下读书笔记以及习题的解答。<br>这是一个开始。</p>
<h1 id="构造过程抽象"><a href="#构造过程抽象" class="headerlink" title="构造过程抽象"></a>构造过程抽象</h1><p>每一种强有力的语言为此提供了三种机制</p>
<ul>
<li>基本的表达形式， 用于表示语言所关心的最简单的个体。</li>
<li>组合的方法，通过它们可以从简单的东西出发构建出复合的元素。</li>
<li>抽象的方法，通过它们可以为 复合对象命名，并将它们作为单元去操作。</li>
</ul>
<p>在程序设计中，我们需要处理两类元素：过程和数据。非形式的说，数据是一种我们希望去操作的”东西“，而过程是有关操作这些数据的规则的描述。</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="name">*</span> ( <span class="name">+</span> <span class="number">2</span> ( <span class="name">*</span> <span class="number">5</span> <span class="number">6</span> ))</div><div class="line">	( <span class="name">+</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span>))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">square</span> x) (<span class="name">*</span> x x))</div><div class="line"></div><div class="line">(<span class="name">square</span> <span class="number">21</span>)</div><div class="line"><span class="number">441</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="过程应用的带换模型"><a href="#过程应用的带换模型" class="headerlink" title="过程应用的带换模型"></a>过程应用的带换模型</h2><p>对于符合过程，过程的应用的计算过程是：</p>
<ul>
<li>将复合过程应用于实际参数，就是在将过程体中的每个形参用相应的实参取代之后，对这一过程求值。</li>
</ul>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(<span class="name">f</span> <span class="number">5</span>)</div><div class="line"></div><div class="line">(<span class="name">sum-of-squares</span>(<span class="name">+</span> <span class="number">5</span> <span class="number">1</span>) (<span class="name">*</span> <span class="number">5</span> <span class="number">2</span>))</div><div class="line"></div><div class="line">(<span class="name">+</span> (<span class="name">square</span> <span class="number">6</span>) (<span class="name">square</span> <span class="number">10</span>))</div><div class="line"></div><div class="line">(<span class="name">+</span> (<span class="name">*</span> <span class="number">6</span> <span class="number">6</span>) (<span class="name">*</span> <span class="number">10</span> <span class="number">10</span>))</div><div class="line"></div><div class="line">(<span class="name">+</span> <span class="number">36</span> <span class="number">100</span>)</div><div class="line"></div><div class="line"><span class="number">136</span></div></pre></td></tr></table></figure>
<p>这种计算过程称为过程应用的代换模型。</p>
<h3 id="应用系和正则序"><a href="#应用系和正则序" class="headerlink" title="应用系和正则序"></a>应用系和正则序</h3><p>完全展开而后归约的求值模型是正则序求值。<br>先求值参数而后应用的方式为应用序求值。</p>
<h3 id="条件语法"><a href="#条件语法" class="headerlink" title="条件语法"></a>条件语法</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">abs</span> x)</div><div class="line">	(<span class="name">cond</span> ((<span class="name">&gt;</span> x <span class="number">0</span>) x)</div><div class="line">			  (( <span class="name">=</span> x <span class="number">0</span>) <span class="number">0</span>)</div><div class="line">			  (( <span class="name">&lt;</span> x <span class="number">0</span>) (<span class="name">-</span> x))))</div><div class="line"></div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">abs</span> x)</div><div class="line">	(<span class="name">cond</span> (( <span class="name">&lt;</span> x <span class="number">0</span>) (<span class="name">-</span> x))</div><div class="line">			  (<span class="name">else</span> x)))</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">abs</span> x)</div><div class="line">	(<span class="name">if</span>	( <span class="name">&lt;</span> x <span class="number">0</span>) </div><div class="line">        (<span class="name">-</span> x)</div><div class="line">		x))</div></pre></td></tr></table></figure>
<h2 id="过程与它们所产生的计算"><a href="#过程与它们所产生的计算" class="headerlink" title="过程与它们所产生的计算"></a>过程与它们所产生的计算</h2><p>一个过程也就是一种模式，它描述了一个计算过程的局部演化方法。</p>
<p>两种描述阶乘的方式。（lisp的迭代不是说形式上的迭代，实际上如果说调用本身的层面上还是递归，但是思想是迭代的思想，应用序来看的话。）<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">factorial</span> n)</div><div class="line">	(<span class="name">if</span>  (<span class="name">=</span> n <span class="number">1</span>)</div><div class="line">		 <span class="number">1</span></div><div class="line">		 (<span class="name">*</span> n (<span class="name">factorial</span> (<span class="name">-</span> n <span class="number">1</span>)))))</div><div class="line"></div><div class="line"><span class="comment">;迭代的形式</span></div><div class="line">(<span class="name">define</span> (<span class="name">factorial</span> n)</div><div class="line">	(<span class="name">fact-iter</span> <span class="number">1</span> <span class="number">1</span> n))</div><div class="line"></div><div class="line"><span class="comment">;应用序的话会优先求值，那么就不会有上面的方式那么深的层次，尝试求值都能够求出来。</span></div><div class="line">(<span class="name">define</span> (<span class="name">fact-iter</span> product counter max-count)</div><div class="line">	(<span class="name">if</span> (<span class="name">&gt;</span> counter max-count)</div><div class="line">		product</div><div class="line">		(<span class="name">fact-iter</span> (<span class="name">*</span> counter product)</div><div class="line">					   (<span class="name">+</span> counter <span class="number">1</span>)</div><div class="line">					   max-count)))</div></pre></td></tr></table></figure></p>
<p>迭代计算过程就是那种其状态可以用固定数据的状态变量描述的计算过程，而与此同时，又存在着一套固定的规则，描述了计算过程从一个状态到下一个状态的转换时候，这些变量的更新方式。还有一个结束检测，它描述着一计算过程应该终止的条件。<br>在计算n!时候，所需要的计算不走随着n线性增长，这种过程称为线性迭代过程。<br>在迭代的情况下，在计算过程中的任何一点，那几个程序变量都提供了有关计算状态的一个完整描述。而递归计算过程而言，这里存在着另外的一些隐含信息，它们并未保存在程序变量里面，而是由解释器维持着，指明了在所推迟的运算所形成的链条里的漫游中，这以计算过程处在合出。链条越长，需要保存的信息越多。</p>
<h3 id="换零钱的实现"><a href="#换零钱的实现" class="headerlink" title="换零钱的实现"></a>换零钱的实现</h3><p>采用递归过程：<br>将总数为a的现金换成n中硬币的不同方式的数目等于</p>
<ul>
<li>将现金数a换成除第一种硬币之外的所有其他硬币的不同方式数目，加上</li>
<li>将现金数a-d换成所有种类的硬币的不同数目，其中d是第一种硬币的币值<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">first-denomination</span> kinds-of-coins)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">=</span> kinds-of-coins <span class="number">1</span>) <span class="number">1</span>)</div><div class="line">        ((<span class="name">=</span> kinds-of-coins <span class="number">2</span>) <span class="number">5</span>)</div><div class="line">        ((<span class="name">=</span> kinds-of-coins <span class="number">3</span>) <span class="number">10</span>)</div><div class="line">        ((<span class="name">=</span> kinds-of-coins <span class="number">4</span>) <span class="number">25</span>)</div><div class="line">        ((<span class="name">=</span> kinds-of-coins <span class="number">5</span>) <span class="number">50</span>)))</div><div class="line">  </div><div class="line">(<span class="name">define</span> (<span class="name">cc</span> amount kinds-of-coins)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">=</span> amount <span class="number">0</span>) <span class="number">1</span>)</div><div class="line">        ((<span class="name">or</span> (<span class="name">&lt;</span> amount <span class="number">0</span>) (<span class="name">=</span> kinds-of-coins <span class="number">0</span>)) <span class="number">0</span>)</div><div class="line">        (<span class="name">else</span> (<span class="name">+</span> (<span class="name">cc</span> amount</div><div class="line">                     (<span class="name">-</span> kinds-of-coins <span class="number">1</span>))</div><div class="line">                 (<span class="name">cc</span> (<span class="name">-</span> amount</div><div class="line">                        (<span class="name">first-denomination</span> kinds-of-coins))</div><div class="line">                     kinds-of-coins)))))</div><div class="line">(<span class="name">define</span> (<span class="name">count-change</span> amount)</div><div class="line">  (<span class="name">cc</span> amount <span class="number">5</span>))</div><div class="line"></div><div class="line">(<span class="name">count-change</span> <span class="number">100</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="增长的阶"><a href="#增长的阶" class="headerlink" title="增长的阶"></a>增长的阶</h3><p>空间与时间的消耗。大O记号</p>
<p>一个例子求幂</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">square</span> n)</div><div class="line">  (<span class="name">*</span> n n))</div><div class="line">(<span class="name">define</span> (<span class="name">fast-expt</span> b n)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">=</span> n <span class="number">0</span>) <span class="number">1</span>)</div><div class="line">        ((<span class="name">even</span>? n) (<span class="name">square</span> (<span class="name">fast-expt</span> b (<span class="name">/</span> n <span class="number">2</span>))))</div><div class="line">        (<span class="name">else</span> (<span class="name">*</span> b (<span class="name">fast-expt</span> b (<span class="name">-</span> n <span class="number">1</span>))))))</div><div class="line">(<span class="name">fast-expt</span> <span class="number">2</span> <span class="number">2</span>)</div></pre></td></tr></table></figure>
<h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">gcd</span> a b)</div><div class="line">    (<span class="name">if</span> ( <span class="name">=</span> b <span class="number">0</span>)</div><div class="line">        a</div><div class="line">        (<span class="name">gcd</span> b (<span class="name">remainder</span> a b))))</div></pre></td></tr></table></figure>
<h3 id="素数检测"><a href="#素数检测" class="headerlink" title="素数检测"></a>素数检测</h3><p>两种计算方法<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">square</span> n)</div><div class="line">  (<span class="name">*</span> n n))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">smallest-divisor</span> n)</div><div class="line">  (<span class="name">find-divisor</span> n <span class="number">2</span>))</div><div class="line">  </div><div class="line"><span class="comment">;寻找最小因子</span></div><div class="line">(<span class="name">define</span> (<span class="name">find-divisor</span> n test-divisor)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">&gt;</span> (<span class="name">square</span> test-divisor) n) n)<span class="comment">;根号n为检测上限</span></div><div class="line">        ((<span class="name">divides</span>? test-divisor n) test-divisor)</div><div class="line">        (<span class="name">else</span> (<span class="name">find-divisor</span> n (<span class="name">+</span> test-divisor <span class="number">1</span>)))))<span class="comment">;查找下一个</span></div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">divides</span>? a b)</div><div class="line">  (<span class="name">=</span> (<span class="name">remainder</span> b a) <span class="number">0</span>))</div><div class="line">  </div><div class="line"><span class="comment">;最小因子等于本身的时候为素数</span></div><div class="line">(<span class="name">define</span> (<span class="name">prime</span> n)</div><div class="line">  (<span class="name">=</span> n (<span class="name">smallest-divisor</span> n)))</div></pre></td></tr></table></figure></p>
<p>费马检测<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">square</span> n)</div><div class="line">  (<span class="name">*</span> n n))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">expmod</span> base exp m)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">=</span> exp <span class="number">0</span>) <span class="number">1</span>)</div><div class="line">        ((<span class="name">even</span>? exp)</div><div class="line">         (<span class="name">remainder</span> (<span class="name">square</span> (<span class="name">expmod</span> base (<span class="name">/</span> exp <span class="number">2</span>) m))</div><div class="line">                    m))</div><div class="line">        (<span class="name">else</span></div><div class="line">         (<span class="name">remainder</span> (<span class="name">*</span> base (<span class="name">expmod</span> base (<span class="name">-</span> exp <span class="number">1</span>) m))</div><div class="line">                    m))))</div><div class="line">(<span class="name">define</span> (<span class="name">try-it</span> a n)</div><div class="line">  (<span class="name">=</span> (<span class="name">expmod</span> a n n) a))</div><div class="line"></div><div class="line"><span class="comment">;使用随机数来测试</span></div><div class="line">(<span class="name">define</span> (<span class="name">fermat-test</span> n)</div><div class="line">  (<span class="name">try-it</span> (<span class="name">+</span> <span class="number">1</span> (<span class="name">random</span> (<span class="name">-</span> n <span class="number">1</span>))) n))</div><div class="line"></div><div class="line"><span class="comment">;通过多次的费马测试来概率的推断是不是位素数</span></div><div class="line">(<span class="name">define</span> (<span class="name">fast-prime</span>? n times)</div><div class="line">  (<span class="name">cond</span> ((<span class="name">=</span> times <span class="number">0</span>) true)</div><div class="line">        ((<span class="name">fermat-test</span> n) (<span class="name">fast-prime</span>? n (<span class="name">-</span> times <span class="number">1</span>)))</div><div class="line">        (<span class="name">else</span> false)))</div></pre></td></tr></table></figure></p>
<h2 id="高阶函数抽象"><a href="#高阶函数抽象" class="headerlink" title="高阶函数抽象"></a>高阶函数抽象</h2><p>以过程作为参数。以过程作为返回值。这类操作过程的过程称为高阶过程。</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#lang racket</div><div class="line">(<span class="name">define</span> (<span class="name">cube</span> n)</div><div class="line">  (<span class="name">*</span> n n n))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">sum</span> term a next b)</div><div class="line">  (<span class="name">if</span> (<span class="name">&gt;</span> a b)</div><div class="line">      <span class="number">0</span></div><div class="line">      (<span class="name">+</span> (<span class="name">term</span> a)</div><div class="line">         (<span class="name">sum</span> term (<span class="name">next</span> a) next b))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">inc</span> n) (<span class="name">+</span> n <span class="number">1</span>))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">sum-cubes</span> a b)</div><div class="line">  (<span class="name">sum</span> cube a inc b))</div><div class="line"></div><div class="line">(<span class="name">sum-cubes</span> <span class="number">1</span> <span class="number">10</span>)</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">integral</span> f a b dx)</div><div class="line">  (<span class="name">define</span> (<span class="name">add-dx</span> x) (<span class="name">+</span> x dx))</div><div class="line">  (<span class="name">*</span> (<span class="name">sum</span> f (<span class="name">+</span> a (<span class="name">/</span> dx <span class="number">2.0</span>)) add-dx b)))</div><div class="line"></div><div class="line">(<span class="name">integral</span> cube <span class="number">0</span> <span class="number">1</span> <span class="number">0.01</span>)</div></pre></td></tr></table></figure>
<h3 id="用lambda构造过程"><a href="#用lambda构造过程" class="headerlink" title="用lambda构造过程"></a>用lambda构造过程</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">((<span class="name">lambda</span> (<span class="name">x</span>) (<span class="name">+</span> <span class="number">4</span> x)))</div></pre></td></tr></table></figure>
<p>匿名的过程，对于一些简单的过程构造适合</p>
<h3 id="用let创建局部变了"><a href="#用let创建局部变了" class="headerlink" title="用let创建局部变了"></a>用let创建局部变了</h3><p>一种方法是利用辅助过程去约束局部变量<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">f</span> x y)</div><div class="line">  (<span class="name">let</span> ((<span class="name">a</span> (<span class="name">+</span> <span class="number">1</span> x))</div><div class="line">        (<span class="name">b</span> (<span class="name">+</span> <span class="number">2</span> y)))</div><div class="line">  (<span class="name">+</span> a b)))</div><div class="line">(<span class="name">f</span> <span class="number">1</span> <span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<h3 id="过程作为一般性的方法"><a href="#过程作为一般性的方法" class="headerlink" title="过程作为一般性的方法"></a>过程作为一般性的方法</h3><h4 id="通过区间折半寻找方程的根"><a href="#通过区间折半寻找方程的根" class="headerlink" title="通过区间折半寻找方程的根"></a>通过区间折半寻找方程的根</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span>(<span class="name">close-enough</span>? x y)</div><div class="line">  (<span class="name">&lt;</span> (<span class="name">abs</span> (<span class="name">-</span> x y)) <span class="number">0.001</span>))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">average</span> x y)</div><div class="line">  (<span class="name">/</span> (<span class="name">+</span> x y) <span class="number">2</span>))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">search</span> f neg-point pos-point)</div><div class="line">  (<span class="name">let</span> ((<span class="name">midpoint</span> (<span class="name">average</span> neg-point pos-point)))</div><div class="line">    (<span class="name">if</span> (<span class="name">close-enough</span>? neg-point pos-point)</div><div class="line">        midpoint</div><div class="line">        (<span class="name">let</span> ((<span class="name">test-value</span> (<span class="name">f</span> midpoint)))</div><div class="line">          (<span class="name">cond</span> ((<span class="name">positive</span>? test-value)</div><div class="line">                 (<span class="name">search</span> f neg-point midpoint))</div><div class="line">                ((<span class="name">negative</span>? test-value)</div><div class="line">                 (<span class="name">search</span> f midpoint pos-point))</div><div class="line">                (<span class="name">else</span> midpoint))))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">half-interval-method</span> f a b)</div><div class="line">  (<span class="name">let</span> ((<span class="name">a-value</span> (<span class="name">f</span> a))</div><div class="line">        (<span class="name">b-value</span> (<span class="name">f</span> b)))</div><div class="line">    (<span class="name">cond</span> ((<span class="name">and</span> (<span class="name">negative</span>? a-value) (<span class="name">positive</span>? b-value))</div><div class="line">           (<span class="name">search</span> f a ))</div><div class="line">          ((<span class="name">and</span> (<span class="name">negative</span>? b-value) (<span class="name">positive</span>? a-value))</div><div class="line">           (<span class="name">search</span> f b a))</div><div class="line">          (<span class="name">else</span></div><div class="line">           (<span class="name">error</span> <span class="string">"Values are not of opposite sign"</span> a b)))))</div><div class="line"></div><div class="line">(<span class="name">half-interval-method</span> sin <span class="number">2.0</span> <span class="number">4.0</span>)</div></pre></td></tr></table></figure>
<h3 id="寻找函数不动点"><a href="#寻找函数不动点" class="headerlink" title="寻找函数不动点"></a>寻找函数不动点</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> tolerance <span class="number">0.00001</span>)</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">average</span> x y)</div><div class="line">  (<span class="name">/</span> (<span class="name">+</span> x y) <span class="number">2</span>))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">fixed-point</span> f first-guess)</div><div class="line">  (<span class="name">define</span> (<span class="name">close-enought</span>? v1 v2)</div><div class="line">    (<span class="name">&lt;</span> (<span class="name">abs</span> (<span class="name">-</span> v1 v2)) tolerance))</div><div class="line">  (<span class="name">define</span> (<span class="name">try</span> guess)</div><div class="line">    (<span class="name">let</span> ((<span class="name">next</span> (<span class="name">f</span> guess)))</div><div class="line">      (<span class="name">if</span> (<span class="name">close-enought</span>? guess next)</div><div class="line">          next</div><div class="line">          (<span class="name">try</span> next))))</div><div class="line">  (<span class="name">try</span> first-guess))</div><div class="line"></div><div class="line">(<span class="name">fixed-point</span> cos <span class="number">1.0</span>)</div><div class="line"><span class="comment">;不收敛</span></div><div class="line">(<span class="name">define</span> (<span class="name">sqrt</span> x)</div><div class="line">  (<span class="name">fixed-point</span> (<span class="name">lambda</span> (<span class="name">y</span>) (<span class="name">/</span> x y))</div><div class="line">               <span class="number">1.0</span>))</div><div class="line"><span class="comment">;引入阻尼</span></div><div class="line">(<span class="name">define</span> (<span class="name">sqrt</span> x)</div><div class="line">  (<span class="name">fixed-point</span> (<span class="name">lambda</span> (<span class="name">y</span>) (<span class="name">average</span> y (<span class="name">/</span> x y)))</div><div class="line">               <span class="number">1.0</span>))</div></pre></td></tr></table></figure>
<h3 id="过程作为返回值"><a href="#过程作为返回值" class="headerlink" title="过程作为返回值"></a>过程作为返回值</h3><p>新的开方方法<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">average-damp</span> f)</div><div class="line">  (<span class="name">lambda</span> (<span class="name">x</span>) (<span class="name">average</span> x (<span class="name">f</span> x))))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">sqrt</span> x)</div><div class="line">  (<span class="name">fixed-point</span> (<span class="name">average-damp</span> (<span class="name">lambda</span>(<span class="name">y</span>) (<span class="name">/</span> x y)))))</div></pre></td></tr></table></figure></p>
<p>新的牛顿法</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="name">define</span> (<span class="name">deriv</span> g)</div><div class="line">  (<span class="name">lambda</span> (<span class="name">x</span>)</div><div class="line">    (<span class="name">/</span> (<span class="name">-</span> (<span class="name">+</span> x dx) (<span class="name">g</span> x))</div><div class="line">       dx)))</div><div class="line"></div><div class="line">(<span class="name">define</span> (<span class="name">newton-transform</span> g)</div><div class="line">  (<span class="name">lambda</span> (<span class="name">x</span>)</div><div class="line">    (<span class="name">-</span> x (<span class="name">/</span> (<span class="name">g</span> x) ((<span class="name">deriv</span> g) x)))))</div></pre></td></tr></table></figure>
<h1 id="抽象和第一级过程"><a href="#抽象和第一级过程" class="headerlink" title="抽象和第一级过程"></a>抽象和第一级过程</h1><p>复合过程是一种至关重要的抽象机制，因为它使得我们能将一般性的计算方法，用这一程序设计语言里的元素明确描述。现在我们又看到，高阶函数能如何去操作这一些一般性的方法，以便建立起进一步的抽象。<br>作为编程者，我们应该对这类可能性保持高度敏感，设法从中识别出程序里的基本抽象，基于它们去进一步构造，程序设计专家指导的如何根据工作中的情况，去选择合适的抽象层次。但是，能够基于这种抽象去思考确实是最重要的，只有这样才可能在新的上下文中去应用它们。高阶的过程的重要性，就在于使我们能够显式的用程序设计语言的要素去描述这些抽象，使我们能够像操作其他计算元素一样去操作它们。<br>一般而言，程序设计语言总会对计算元素的可能使用方式强加上某些显式。带有最少限制的元素被称为具有第一级状态。第一级元素的某些权利与特权包括:</p>
<ul>
<li>可以用变量命名</li>
<li>可以提供给过程作为参数</li>
<li>可以由过程作为结果返回</li>
<li>可以包含在数据结构中<br>lisp给了过程完全的第一级的状态。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于读书的目的&quot;&gt;&lt;a href=&quot;#关于读书的目的&quot; class=&quot;headerlink&quot; title=&quot;关于读书的目的&quot;&gt;&lt;/a&gt;关于读书的目的&lt;/h1&gt;&lt;p&gt;很多时候对于一本比较复杂的书，你在到达一定阶段的时候是难以读进去的。Sicp我曾经在几个月前尝试的去读了第一章。很快就读完的，但是对于其的理解实在浅薄。&lt;br&gt;我希望在这一次的阅读的过程中能够顺利的过一次不本书有所收获。&lt;br&gt;在接下来的日子里，我会记录下读书笔记以及习题的解答。&lt;br&gt;这是一个开始。&lt;/p&gt;
&lt;h1 id=&quot;构造过程抽象&quot;&gt;&lt;a href=&quot;#构造过程抽象&quot; class=&quot;headerlink&quot; title=&quot;构造过程抽象&quot;&gt;&lt;/a&gt;构造过程抽象&lt;/h1&gt;&lt;p&gt;每一种强有力的语言为此提供了三种机制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本的表达形式， 用于表示语言所关心的最简单的个体。&lt;/li&gt;
&lt;li&gt;组合的方法，通过它们可以从简单的东西出发构建出复合的元素。&lt;/li&gt;
&lt;li&gt;抽象的方法，通过它们可以为 复合对象命名，并将它们作为单元去操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在程序设计中，我们需要处理两类元素：过程和数据。非形式的说，数据是一种我们希望去操作的”东西“，而过程是有关操作这些数据的规则的描述。&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; ( &lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ( &lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; ))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	( &lt;span class=&quot;name&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;square&lt;/span&gt; x) (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt; x x))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;441&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/child/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="sicp" scheme="http://yoursite.com/child/tags/sicp/"/>
    
      <category term="计算机程序的构造与解释" scheme="http://yoursite.com/child/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E8%A7%A3%E9%87%8A/"/>
    
  </entry>
  
  <entry>
    <title>[读书摘录] 黑客与画家</title>
    <link href="http://yoursite.com/child//blog/2016/09/%E8%AF%BB%E4%B9%A6%E6%91%98%E5%BD%95-%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6.html"/>
    <id>http://yoursite.com/child//blog/2016/09/读书摘录-黑客与画家.html</id>
    <published>2016-09-03T13:34:08.000Z</published>
    <updated>2016-10-16T06:35:48.546Z</updated>
    
    <content type="html"><![CDATA[<p> 2016-08-31 08:09:42</p>
<p>为什么小孩子会这样做呢？</p>
<p>　　一部分原因是，青少年在心理上还没有摆脱儿童状态，许多人都会残忍地对待他人。他们折磨书呆子的原因就像拔掉一条蜘蛛腿一样，觉得很好玩。在一个人产生良知之前，折磨就是一种娱乐。</p>
<p>　　孩子们欺负书呆子的另一个原因是为了让自己感到好受一些。当你踩水的时候，你把水踩下去，你的身体就会被托起来。同样，在任何社会等级制度中，那些对自己没自信的人就会通过虐待他们眼中的下等人来突显自己的身份。我已经意识到，正是因为这个原因，在美国社会中底层白人是对待黑人最残酷的群体。</p>
<p> 2016-08-31 08:12:26</p>
<p>我认为，真实世界的关键并非在于它是由成年人组成的，而在于它的庞大规模使得你做的每件事都能产生真正意义上的效果。学校、监狱、上流社会的女士午餐会，都做不到这一点。这些场合的成员都好像关在封闭的泡沫之中，所作所为只对泡沫内部有影响，对外部没有影响。那么很自然地，这些场合就会产生野蛮的做法。因为它们不具备实际功能，所以也就无所谓采用的形式^。</p>
<p> 2016-08-31 08:13:16</p>
<p>真实世界的特点是，它极其庞大。如果总体足够大，即使是人数最少的少数派，只要聚集在一起，也能产生可观的力量。在真实世界中，书呆子在某些地方聚集起来，形成自己的社区，智力因素成为那里最被看重的东西。有时，这种因素甚至会以相反的形式表现出来，特别是在大学的数理学系，书呆子甚至会夸大笨拙，以显示自己的聪明。约翰·纳什^非常钦佩诺伯特·维纳^^就学维纳的样子，经过走廊的时候都用手扶着墙走路。</p>
<a id="more"></a>
<p> 2016-08-31 08:14:01</p>
<p>书呆子感到不适应的真正原因是其他人都是疯子。我记得读髙中的时候，有一次在体育馆观看校运动队的出征大会，啦啦队把对手的模拟像扔到看台上，观众一哄而起，把它撕成碎片。我感到自己仿佛是一个探险家，正在目睹某种奇特的部落仪式。</p>
<p> 2016-08-31 08:15:36</p>
<p>为什么人们要搬到郊区去住？为了养育下一代！难怪郊区生活是如此地乏味和贫瘠。整个镇子就像一个巨大的幼儿园，所有一切都是为了教育下一代而有意识地造出来的。</p>
<p>　　在我生长的这个地方，感觉整个世界就是这么大，你根本没有别的地方可去，没有别的事情可做。这一点都不令人意外。郊区就是故意这样设计的，与外部世界隔离，不让儿童沾染到外界有害的东西。</p>
<p>　　至于学校，不过是这个虚假环境中关住牲口的围栏。表面上，学校的使命是教育儿童。事实上，学校的真正目的是把儿童都关在同一个地方，以便大人们白天可以腾出手来把事情做完。我对这一点没有意见，在一个高度工业化的社会，对孩子不加管束，让他们四处乱跑，无疑是一场灾难。</p>
<p>　　让我困扰的，不是把孩子关在监狱里，而是（a）不告诉他们这一点，（b）把这监狱的大部分交给犯人来管理。孩子们被送进来，花6年时间，记住一些毫无意义的事实，还要身处在一个由四肢发达的小巨人管理的世界，那些巨人们只知道追逐一个椭圆形的、棕色的球^，好像这是全世界最天经地义的事情。这简直就像一场超现实的鸡尾酒化妆晚会，如果孩子畏缩不前、瑟瑟发抖，他们就会被视为怪人。</p>
<p> 2016-09-01 08:17:47</p>
<p>但是，流行的道德观念不是这样，它们往往不是偶然产生的，而是被刻意创造出来的。如果有些观点我们不能说出口，原因很可能是某些团体不允许我们说。</p>
<p>　　那些团体神经越紧张，它们所产生的禁止力量就越大。伽利略因为宣传日心说而遭到教廷的审判，这件事讽刺的地方在于，他只是在宣传哥白尼的观点，而后者却安然无恙。事实上，哥白尼不仅不反对教廷，还是一个虔诚的天主教教士，他把自己的著作献给教皇。不幸的是，伽利略正赶上教廷内部反对派上台，宗教改革被压制，任何非正统的思想遭受到前所未有的严厉控制和禁止。</p>
<p>　　为了在全社会制造出一个禁忌，负责实施的团体必定既不是特别强大也不是特别弱小。如果一个团体强大到无比自信，它根本不会在乎别人的抨击。美国人或者英国人对外国媒体的诋毁就毫不在意。但是，如果一个团体太弱小，就会无力推行禁忌。有一种行为怪癖叫做“嗜粪症”（coprophila），它的患者人数以及影响势力眼下似乎就不太强大，无法把自己的观点推广给其他人。</p>
<p>注: 穆斯林 女权</p>
<p> 2016-09-01 08:28:17</p>
<p>各种各样的标签可能是外部线索的最大来源，帮助你发现这个时代流行的是什么。如果一个命题是错的，这就是它所能得到的最坏评价，足够批判它了，根本不用再加上任何其他标签。伹是，如果一个命题不是错的，却被加上各种标签，进行压制和批判，那就有问题。因为只要不是错的观点，就不应该被压制讨论。所以每当你看到有些话被攻击为出自XX分子或XX主义，这就是一个明确的信号，表明背后有问题。不管在1630年还是在2030年，都是如此。当你听到有人在用这样的标签，就要问为什么。</p>
<p> 2016-09-01 19:31:06</p>
<p>《人月神话》（The Mythical Man-Month）是布鲁克斯（Frederick Brooks）所写的一本软件项目管理名著。所谓“人月”就是一个人在一个月内所能完成的工作量。假如某个项目预估需要12个人月，那么派4个人处理这个项目，理论上需要3个月，派6个人则只需要2个月。但是，布鲁克斯认为这种换算机制在软件业行不通，是一个神话，因为软件项目是交互关系复杂的工作，需要大量的沟通成本，人力的增加会使沟通成本急剧上升，反而无法达到缩短工期的目的。在本质上，软件项目的人力与工期是无法互换的，当项目进度落后时，光靠增加人力到该项目中，并不会加快进度，反而有可能使进度更加延后。</p>
<p> 2016-09-01 19:35:16</p>
<p>没有盗版是一种“优势”，但也是一个问题。一定数量的盗版对软件公司是有好处的。不管你的软件定价多少，有些用户永远都不会购买。如果这样的用户使用盗版，你并没有任何损失。事实上，你反而赚到了，因为你的软件现在多了一个用户，市场影响力就更大了一些，而这个用户可能毕业以后就会出钱购买你的软件。</p>
<p> 2016-09-01 19:42:05</p>
<p>你可能会问，如果Mac电脑真那么出色，为什么后来它的市场表现不佳？还是那个老生常谈的原因：成本太高。微软公司把所有精力都集中在软件上面，所以很多厂商只要专攻硬件就可以了，把硬件成本降了下来。单单是微软的软件或者第三方厂商的硬件都不足以赢得市场优势，但是它们结合起来，就在个人电脑出现后一段关键时期中主导了市场。苹果公司同时做软件和硬件，所以成本上没有优势。（但是，苹果公司还没有失败，如果它能把iPod升级成手机，并且将网络浏览器包括在其中，那么微软公司就有大麻烦了。）（译者注：这段话写于2001年9月，苹果公司的iPhone手机已于2007年6月上市。</p>
<p>2016-09-02 19:23:17</p>
<p>高级语言比汇编语言更接近人类语言，而某些高级语言又比其他语言更进一步。举例来说，C语言是一种低层次语言，很接近硬件，几乎堪称可移植的汇编语言，而Lisp语言的层次则是相当高。</p>
<p>　　如果高层级语言比汇编语言更有利于编程，你也许会认为语言的层次越高越好。一般情况下确实如此，但不是绝对的。编程语言可以变得很抽象，完全脱离硬件，但也有可能走错了方向。比如，我觉得Prolog语言就有这个问题。它的抽象能力强得不可思议，但是只能用来解决2%的问题，其余时间你苦思冥想、运用这些抽象能力写出来的程序实际上就是Pascal语言的程序。</p>
<p>　　另一个你会用到低层次语言的原因就是效率问题。如果你非常关注运行速度，那么最好使用接近机器的语言。大多数操作系统都是用C语言写的，这并非偶然。不过，硬件的运行速度越来越快了，所以使用C这样的低层次语言开发应用程序的必要性正在不断减少，但是大家似乎还是要求操作系统越快越好。（另一种可能是，人们还是希望“缓存区溢出攻击”继续存在下去，以便让大家时时保持警惕）^。</p>
<p> 2016-09-02 19:29:39</p>
<p>不仅编程语言有这种现象，这实际上是一种普遍的历史趋势。随着技术的发展，每一代人都在做上一代人觉得很浪费的事情。30年前的人要是看到我们今天如此随意地使用长途电话，一定会感到震惊。100年前的人要是看到一个普通的包裹竟然也能享受一天内从波士顿发件、途经孟菲斯、抵达纽约的待遇，恐怕就要更震惊了。</p>
<p> 2016-09-03 08:03:35</p>
<p>Lisp比图灵机表达起来更简洁。证明这一点的一种方法就是写一个Lisp通用函数，证明它比图灵机的一般性描述更短、更易僅。这个Lisp函数就是eval……它用来计算Lisp表达式的值……。编写eval函数需要发明一种表示法，能够把Lisp函数表示成Lisp数据。设计这种书写法完全是为了满足论文写作的需要。（我）根本没有想过用它来编写Lisp程序并在计算机上运行。</p>
<p> 2016-09-03 08:07:56</p>
<p>Lisp语言诞生的时候就包含了9种新思想。其中一些我们今天已经习以为常，另一些则刚刚在其他高级语言中出现，至今还有2种是Lisp独有的。按照被大众接受的程度，这9种思想依次如下排列。</p>
<ol>
<li>条件结构（即if-then-else结构）。现在大家都觉得这是理所当然的，但是Fortran I就没有这个结构，它只有基于底层机器指令的goto结构。</li>
<li>函数也是一种数据类型。在Lisp语言中，函数与整数或字符串一样，也属于数据类型的一种。它有自己的字面表示形式（literal representation），能够存储在变量中，也能当作参数传递。一种数据类型应该有的功能，它都有。</li>
<li>递归。Lisp是第一种支持递归函数的高级语言^。<br>^「Lisp语言的许多特性（比如，把程序写成列表形式以及实现某种形式的递归）都在20世纪50年代的IPL-V语言中出现过。但是，IPL-V更像是汇编语言，它的程序中充满了操作码/地址对。参见Alien Newell等人编著的《IPL-V语言操作手册》（Information Processing Language-V Manual），Prentice-Hail，1961年出版。」</li>
<li>变量的动态类型。在Lisp语言中，所有变量实际上都是指针，所指向的值有类型之分，而变量本身没有。复制变量就相当于复制指针，而不是复制它们指向的数据。</li>
<li>垃圾回收机制。</li>
<li>程序由表达式组成。Lisp程序是一些表达式树的集合，每个表达式都返回一个值。这与Fortran和大多数后来的语言都截然不同，它们的程序由表达式和语句组成。<br>　　区分表达式和语句在Fortran I中是很自然的，因为它不支持语句嵌套。所以，如果你需要用数学式子计算一个值，那就只有用表达式返回这个值，没有其他语法结构可用，否则就无法处理这个值。<br>2016-09-03 08:08:15<br>后来，新的编程语言支持块结构，这种限制当然也就不存在了。但是为时已晚，表达式和语句的区分已经根深蒂固。它从Fortran扩散到Algol语言，接着又扩散到它们两者的后继语言。</li>
<li>符号类型。符号实际上是一种指针，指向存储在散列表中的字符串。所以，比较两个符号是否相等，只要看它们的指针是否一样就行了，不用逐个字符地比较。</li>
<li>代码使用符号和常量组成的树形表示法。</li>
<li>无论什么时候，整个语言都是可用的。Lisp并不真正区分读取期、编译期和运行期。你可以在读取期编译或运行代码，也可以在编译期读取或运行代码，还可以在运行期读取或者编译代码。<br>　　在读取期运行代码，使得用户可以重新调整（reprogram）Lisp的语法；在编译期运行代码，则是Lisp宏的工作基础；在运行期编译代码，使得Lisp可以在Emacs这样的程序中充当扩展语言（extension language）；在运行期读取代码，使得程序之间可以用S表达式（S-expression）通信，近来XML格式的出现使得这个概念被重新“发明”出来了^。<br>「如果你不想让经理发现你正在使用Lisp编程，你可以告诉他你用的是XML。」</li>
</ol>
<p> 2016-09-03 08:20:26</p>
<p>这种实践不仅很普遍，而且已经制度化了。举例来说，在面向对象编程的世界中，我们大量听到“模式”（pattern）这个词，我觉得那些“模式”就是现实中的因素（c），也就是人肉编译器^。当我在自己的程序中发现用到了模式，我觉得这就表明某个地方出错了。程序的形式应该仅仅反映它所要解决的问题。代码中其他任何外加的形式都是一个信号，（至少对我来说）表明我对问题的抽象还不够深，也经常提醒我，自己正在手工完成的事情，本应该写代码通过宏的扩展自动实现。</p>
<p>「皮特·诺维格发现，总共23种设计模式之中，有16种在Lisp语言中“本身就提供，或者被大大简化”。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 2016-08-31 08:09:42&lt;/p&gt;
&lt;p&gt;为什么小孩子会这样做呢？&lt;/p&gt;
&lt;p&gt;　　一部分原因是，青少年在心理上还没有摆脱儿童状态，许多人都会残忍地对待他人。他们折磨书呆子的原因就像拔掉一条蜘蛛腿一样，觉得很好玩。在一个人产生良知之前，折磨就是一种娱乐。&lt;/p&gt;
&lt;p&gt;　　孩子们欺负书呆子的另一个原因是为了让自己感到好受一些。当你踩水的时候，你把水踩下去，你的身体就会被托起来。同样，在任何社会等级制度中，那些对自己没自信的人就会通过虐待他们眼中的下等人来突显自己的身份。我已经意识到，正是因为这个原因，在美国社会中底层白人是对待黑人最残酷的群体。&lt;/p&gt;
&lt;p&gt; 2016-08-31 08:12:26&lt;/p&gt;
&lt;p&gt;我认为，真实世界的关键并非在于它是由成年人组成的，而在于它的庞大规模使得你做的每件事都能产生真正意义上的效果。学校、监狱、上流社会的女士午餐会，都做不到这一点。这些场合的成员都好像关在封闭的泡沫之中，所作所为只对泡沫内部有影响，对外部没有影响。那么很自然地，这些场合就会产生野蛮的做法。因为它们不具备实际功能，所以也就无所谓采用的形式^。&lt;/p&gt;
&lt;p&gt; 2016-08-31 08:13:16&lt;/p&gt;
&lt;p&gt;真实世界的特点是，它极其庞大。如果总体足够大，即使是人数最少的少数派，只要聚集在一起，也能产生可观的力量。在真实世界中，书呆子在某些地方聚集起来，形成自己的社区，智力因素成为那里最被看重的东西。有时，这种因素甚至会以相反的形式表现出来，特别是在大学的数理学系，书呆子甚至会夸大笨拙，以显示自己的聪明。约翰·纳什^非常钦佩诺伯特·维纳^^就学维纳的样子，经过走廊的时候都用手扶着墙走路。&lt;/p&gt;
    
    </summary>
    
      <category term="摘录" scheme="http://yoursite.com/child/categories/%E6%91%98%E5%BD%95/"/>
    
    
      <category term="杂谈" scheme="http://yoursite.com/child/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
