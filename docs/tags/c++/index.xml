<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>c&#43;&#43; - Tag - 鉴心</title>
        <link>http://coderyang.com/tags/c&#43;&#43;/</link>
        <description>c&#43;&#43; - Tag - 鉴心</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 19 Sep 2020 16:04:59 &#43;0000</lastBuildDate><atom:link href="http://coderyang.com/tags/c&#43;&#43;/" rel="self" type="application/rss+xml" /><item>
    <title>简易function</title>
    <link>http://coderyang.com/function/</link>
    <pubDate>Sat, 19 Sep 2020 16:04:59 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/function/</guid>
    <description><![CDATA[本文主要讲一下怎么实现一个简易版本的function&lt;&gt;模板，从c++ templates第二版摘出，相应的技巧在timer中一些应用。
出发点 一个简单的例子，下面这个模板上述能够接受任意可调用的对象，lambda表达式、函数指针、仿函数。
1 2 3 4 5 6 7  template&lt;typename F&gt; void for_int_up(int n, F f) { for (int i = 0; i &lt;= n; ++i) { f(i); } }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  void print_int(int i) { std::count &lt;&lt; i &lt;&lt; &#39; &#39;; } int main() { int sum = 0; for_int_up(5, [&amp;sum](int i) { sum += i; }); for_int_up(5, print_int); return 0; }   像for_int_up这样的函数其实有两个问题：]]></description>
</item><item>
    <title>[读书笔记] 深入探索C&#43;&#43;对象模型 第六章 执行期语意学</title>
    <link>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2c-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E7%AC%AC%E5%85%AD%E7%AB%A0-%E6%89%A7%E8%A1%8C%E6%9C%9F%E8%AF%AD%E6%84%8F%E5%AD%A6/</link>
    <pubDate>Sat, 20 Aug 2016 09:15:53 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2c-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E7%AC%AC%E5%85%AD%E7%AB%A0-%E6%89%A7%E8%A1%8C%E6%9C%9F%E8%AF%AD%E6%84%8F%E5%AD%A6/</guid>
    <description><![CDATA[<h1 id="执行期语意学">执行期语意学</h1>
<p>以下一个简单的式子</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">if</span> <span class="p">(</span><span class="n">yy</span> <span class="o">==</span> <span class="n">xx</span><span class="p">.</span><span class="n">getValue</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>xx  yy定义如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">X</span> <span class="n">xx</span><span class="p">;</span>
<span class="n">Y</span> <span class="n">yy</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">Y</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
  <span class="n">Y</span><span class="p">();</span>
 <span class="o">~</span><span class="n">Y</span><span class="p">();</span>
  <span class="kt">bool</span> <span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="k">const</span><span class="o">&amp;</span> <span class="n">Y</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
<span class="p">};</span>
<span class="k">class</span> <span class="nc">X</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
  <span class="n">X</span><span class="p">();</span>
  <span class="o">~</span><span class="n">X</span><span class="p">();</span>
  <span class="k">operator</span> <span class="nf">Y</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
  <span class="n">X</span> <span class="nf">getValue</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>那么编译器在我们之后做了什么呢</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">if</span><span class="p">(</span><span class="n">yy</span> <span class="o">==</span> <span class="n">xx</span><span class="p">.</span><span class="n">getValue</span><span class="p">())</span>

<span class="c1">//转换为
</span><span class="c1"></span><span class="k">if</span><span class="p">(</span><span class="n">yy</span><span class="p">.</span><span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="n">xx</span><span class="p">.</span><span class="n">getValue</span><span class="p">())</span>

<span class="c1">//接着转换
</span><span class="c1"></span><span class="k">if</span><span class="p">(</span><span class="n">yy</span><span class="p">.</span><span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="n">xx</span><span class="p">.</span><span class="n">getValue</span><span class="p">().</span><span class="k">operator</span> <span class="n">Y</span><span class="p">()))</span>

<span class="c1">//接着转换
</span><span class="c1"></span><span class="n">X</span> <span class="n">temp1</span> <span class="o">=</span> <span class="n">xx</span><span class="p">.</span><span class="n">getValue</span><span class="p">();</span>
<span class="n">Y</span> <span class="n">temp2</span> <span class="o">=</span> <span class="n">temp1</span><span class="p">.</span><span class="k">operator</span> <span class="n">Y</span><span class="p">();</span>
<span class="kt">int</span> <span class="n">temp3</span> <span class="o">=</span> <span class="p">(</span><span class="n">yy</span><span class="p">.</span><span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="n">temp2</span><span class="p">));</span>
<span class="k">if</span><span class="p">(</span><span class="n">temp3</span><span class="p">)</span>

<span class="n">temp2</span><span class="p">.</span><span class="n">y</span><span class="o">::~</span><span class="n">Y</span><span class="p">();</span>
<span class="n">temp1</span><span class="p">.</span><span class="n">x</span><span class="o">::~</span><span class="n">X</span><span class="p">();</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>[读书笔记]深入探索C&#43;&#43;对象模型 第五章 构造 解构 拷贝语意学</title>
    <link>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2c-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%9E%84%E9%80%A0-%E8%A7%A3%E6%9E%84-%E6%8B%B7%E8%B4%9D%E8%AF%AD%E6%84%8F%E5%AD%A6/</link>
    <pubDate>Tue, 16 Aug 2016 21:22:40 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2c-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%9E%84%E9%80%A0-%E8%A7%A3%E6%9E%84-%E6%8B%B7%E8%B4%9D%E8%AF%AD%E6%84%8F%E5%AD%A6/</guid>
    <description><![CDATA[<h1 id="构造解构拷贝语意学">构造、解构、拷贝语意学</h1>
<h3 id="纯虚函数的存在">纯虚函数的存在</h3>
<p>纯虚函数能够被静态的调用，不能经过虚拟机制调用。
虚析构函数不能定义为纯虚的，一定要有定义，否则即使可以编译，但是链接的时候会有错误。因为其子类会静态调用上一层的析构函数。如果说上一层的析构函数是一个纯虚函数的话，那么链接的时候会失败。</p>
<h3 id="虚拟规格的存在">虚拟规格的存在</h3>
<p>不应该把所有的函数都声明为虚函数，然后靠编译器去优化操作吧virtual invocation去除。</p>
<h3 id="虚拟规格中的const的存在">虚拟规格中的const的存在</h3>
<p>实际上你很难知道一个类的子类对于这个函数是不是应该定义为const，因为即使现在你不需要修改类的内容，但子类可能需要修改，你没法预料到。那么最好不要定义一个有const函数的基类了。</p>
<h2 id="无继承情况下的对象构造">“无继承”情况下的对象构造</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">typedef</span> <span class="k">struct</span>
<span class="p">{</span>
    <span class="kt">float</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">;</span>
<span class="p">}</span> <span class="n">Point</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>编译器会分析声明，贴上Plaint OI' Data的卷标，被贴上该卷标的类，不会有构造函数或者析构函数的调用了。直接使用C的方式。</p>]]></description>
</item><item>
    <title>[读书笔记]深入探索C&#43;&#43;对象模型 第四章 Function语意学</title>
    <link>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2c-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E7%AC%AC%E5%9B%9B%E7%AB%A0-function%E8%AF%AD%E6%84%8F%E5%AD%A6/</link>
    <pubDate>Sun, 14 Aug 2016 23:44:43 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2c-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E7%AC%AC%E5%9B%9B%E7%AB%A0-function%E8%AF%AD%E6%84%8F%E5%AD%A6/</guid>
    <description><![CDATA[<h1 id="第三章function语意学">第三章：Function语意学</h1>
<h2 id="member的各种调用方式">Member的各种调用方式</h2>
<h3 id="nonstatic-member-functions">Nonstatic Member Functions</h3>
<p>C++的设计准则之一就是:nonstatic member function 至少必须和一般的nonmember function有相同的效率。
nonstatic member function会转换为nonmember形式。</p>
<ol>
<li>改写函数原型，安插一个额外的参数，也就是this指针。</li>
<li>将每一个对“nonstatic data member的存取操作&quot;改为经由this指针来存取。</li>
<li>将member function重写成一个外部函数，对函数名称进行“mangling&quot;处理，使它在程序中成为一个独一无二的词汇。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">void</span> <span class="nf">normalize__7Point3dFv</span><span class="p">(</span><span class="k">register</span> <span class="k">const</span> <span class="n">Point3d</span> <span class="o">*</span><span class="k">const</span> <span class="k">this</span><span class="p">,</span>
                                                <span class="n">Point3d</span> <span class="o">&amp;</span><span class="n">__result</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">register</span> <span class="kt">float</span> <span class="n">mag</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">magnitude</span><span class="p">();</span>
    <span class="n">__result</span><span class="p">.</span><span class="n">Point3d</span><span class="o">::</span><span class="n">Point3d</span><span class="p">();</span>
    
    <span class="n">__result</span><span class="p">.</span><span class="n">_x</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_x</span><span class="o">/</span><span class="n">mag</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>[读书笔记] 深入探索C&#43;&#43;对象模型 第三章 Data语意学</title>
    <link>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2c-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E7%AC%AC%E4%B8%89%E7%AB%A0-data%E8%AF%AD%E6%84%8F%E5%AD%A6/</link>
    <pubDate>Sun, 14 Aug 2016 20:35:34 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2c-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E7%AC%AC%E4%B8%89%E7%AB%A0-data%E8%AF%AD%E6%84%8F%E5%AD%A6/</guid>
    <description><![CDATA[<h1 id="第三章data语意学">第三章：Data语意学</h1>
<p>class的大小：
内存对齐
空Class需要1byte来占位，说明是独一无二的存在
有虚函数时候会有虚表指针
static 成员不属于类对象，不占空间</p>
<h2 id="data-member的绑定">Data Member的绑定</h2>
<p>早期的编译器可能看不到Class后面的内容，导致数据成员的用了外层的同名的。现在已经没有这种情况了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">length</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">Point3d</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">length</span> <span class="n">x</span><span class="p">;</span><span class="c1">//是long long
</span><span class="c1"></span>    <span class="k">typedef</span> <span class="kt">int</span> <span class="n">length</span><span class="p">;</span>    
    <span class="n">length</span> <span class="n">y</span><span class="p">;</span><span class="c1">//是 int
</span><span class="c1"></span><span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>[读书笔记]深入理解C&#43;&#43;对象模型 第二章 构造函数的语意学</title>
    <link>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3c-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%AD%E6%84%8F%E5%AD%A6/</link>
    <pubDate>Sun, 07 Aug 2016 18:36:20 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3c-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%AD%E6%84%8F%E5%AD%A6/</guid>
    <description><![CDATA[<h1 id="第二章构造函数语意学">第二章：构造函数语意学</h1>
<p>由于C++的编译器在程序员之外做了太多事情，导致会产生很多意料之外的错误。
例子 Conversion运算符。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//为了支持
</span><span class="c1"></span><span class="k">if</span><span class="p">(</span><span class="n">cin</span><span class="p">);</span>
<span class="c1">//定义了一个perator int()
</span><span class="c1">//但是导致了以下错误的代码能够正常运行
</span><span class="c1"></span><span class="kt">int</span> <span class="n">inVal</span><span class="p">;</span>
<span class="n">cin</span> <span class="o">&lt;&lt;</span> <span class="n">inVal</span><span class="p">;</span>
<span class="c1">//此处&lt;&lt;被解释为左移操作符
</span><span class="c1"></span><span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">cin</span><span class="p">.</span><span class="k">operator</span> <span class="kt">int</span><span class="p">();</span>
<span class="n">temp</span> <span class="o">&lt;&lt;</span> <span class="n">intVal</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="default-constructor的构建操作">Default Constructor的构建操作</h1>
<p>默认构造函数只在编译器认为需要的时候才创建。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Foo</span><span class="p">{</span><span class="k">public</span><span class="o">:</span> <span class="kt">int</span> <span class="n">val</span><span class="p">;</span> <span class="n">Foo</span> <span class="o">*</span><span class="n">pnext</span><span class="p">};</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Foo</span> <span class="n">test</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>这种情况实际没有默认构造函数，编译器什么都没做。</p>]]></description>
</item><item>
    <title>[读书笔记]深入探索C&#43;&#43; 对象模型 第一章 关于对象</title>
    <link>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2c-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1/</link>
    <pubDate>Sun, 07 Aug 2016 11:14:03 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2c-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1/</guid>
    <description><![CDATA[<h1 id="阅读的目的">阅读的目的</h1>
<p>在阅读《C++ primer》的时候，书里面写了各种各样的情况下，C++的处理方式。囫囵吞枣的记下后，也就不求甚解了。而C++在工作中的使用已经有了那么一段时间。但是对于C++的很多现象，却依旧是只知道是这样，却不知道为什么是这样。
那么阅读这本同样是 Lippman的书籍，就是为了解惑，为什么C++会导致我们看到的现象，而不是其他情况。
我希望，通过这么本书，能够解答我的一部分疑问。</p>
<h1 id="序">序</h1>
<p>工作里常听到的对于C++的抱怨是C++的编译器为程序员做了太多的服务，导致很多情况不受控制。不像C,大部分都需要手动去执行，可以明确的知道，什么时候做了什么。
我想这部分抱怨一方面来源于对于C++的不熟悉，一方面又来源于C++的特性。那么当对C++怎么实现各种特性了解后，对于编译器的行为有了概念后，我相信我应该能够解答很多疑问了。
就像Lippman在本书贴出的一封信件一般
</p>
<p>他希望这本书是这些问题的解答。</p>]]></description>
</item></channel>
</rss>
