<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>源码阅读 - Tag - 鉴心</title>
        <link>http://coderyang.com/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</link>
        <description>源码阅读 - Tag - 鉴心</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 18 Jul 2017 15:59:57 &#43;0000</lastBuildDate><atom:link href="http://coderyang.com/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/" rel="self" type="application/rss+xml" /><item>
    <title>Redis源码阅读-总结</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E6%80%BB%E7%BB%93/</link>
    <pubDate>Tue, 18 Jul 2017 15:59:57 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[之前的一系列Redis源码阅读的博客都是基于《Redis设计与实现》的，内容上不免和书有雷同。
本来计划是三月份开始看，但是中间由于接到一个开发速度要求很高的项目，加班很多耽误了些进度，只在这一段时间里看了部分小书（部分书摘录成了博客），耽搁了。
然后快到七月的时候，项目在经过编码、测试，最终投用起来之后，又有了更多的时间来学习。便开始了源码的继续阅读。
阅读redis源码的目的:
 为了之后项目如果使用redis的话能够游刃有余。 学习其优秀的编码。  参加工作两年。
第一年是从机械专业学生转变为程序员，更多的是在打基础，看了挺多计算机的基础书籍。那段时间相对是痛苦的，遇到一个问题往往不明白，不断去探究又探究出一个新的不明白的问题。
第二年在积累了几万行之后，开始感觉基础编码方面比较游刃有余了，遇到的问题大多数能提取重点，找到解决方案。但是想着继续提升，于是开始了部分项目的源码阅读。除了公司项目源码的阅读，网上开源项目的源码阅读也提上了日程，在经过了sgi stl的仿写之后，开始了redis的阅读。
redis是我第一个比较完整的看完的现在流行的开源项目源码。不算中间停下来的时间，大概看了三个星期。这三个星期里不能说对redis理解很深透，但是起码整个项目的结构，怎么实现主要的功能，内部模块的互相调用算是理解了。
收获有很多，修炼还需要继续。]]></description>
</item><item>
    <title>redis源码阅读-一个命令的旅程</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E7%9A%84%E6%97%85%E7%A8%8B/</link>
    <pubDate>Tue, 18 Jul 2017 15:28:23 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E7%9A%84%E6%97%85%E7%A8%8B/</guid>
    <description><![CDATA[<p>redis服务器会与多个客户端建立网络连接，处理客户端发送的命令请求，在数据库中保存客户端执行的命令，并通过资源管理来维持整个服务器自身的运转。</p>
<p>本文目的是为了理清楚服务器对于命令请求的整个处理过程，说明这个过程中服务器与客户端如何互相交互，服务器内部如何调用内部组件达到对命令的执行。</p>
<h2 id="命令的处理流程">命令的处理流程</h2>
<p>之前在事务代码部分的阅读，已经对于服务器接收客户端的连接并创建命令请求处理器等待命令请求的过程。</p>
<p>现在以一个简单的set命令为例子，看服务器在接收请求之后如何处理。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">redis</span><span class="o">&gt;</span> <span class="n">SET</span> <span class="n">KEY</span> <span class="n">VALUE</span>
<span class="n">ok</span>
</code></pre></td></tr></table>
</div>
</div><p>从客户端发送set key value命令到接收回复ok，都做了如下操作：</p>
<ul>
<li>客户端发送命令。</li>
<li>服务器命令请求处理器接收，引发命令的执行，并产生命令回复处理器。</li>
<li>命令回复处理器发送ok给客户端。</li>
<li>客户端接收ok，并打印。</li>
</ul>]]></description>
</item><item>
    <title>redis源码阅读-事件</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%BA%8B%E4%BB%B6/</link>
    <pubDate>Sun, 16 Jul 2017 22:24:01 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%BA%8B%E4%BB%B6/</guid>
    <description><![CDATA[<h1 id="redis源码阅读-事件">redis源码阅读-事件</h1>
<p>redis服务器是一个事件驱动程序。当触发一个事件时,redis会创建一个事件,放入到待处理的队列，依次进行处理。</p>
<p>redis事件分为文件时间和时间事件。</p>
<p>文件事件：文件事件是对套接字操作的抽象，当服务器与客户端进行通讯，会产生出各种文件事件，而服务器则通过监听并处理这些事件来完成一系列网络通讯操作。</p>
<p>时间事件：redis一些操作是需要定时进行执行的，而时间事件就是对这类操作的抽象。</p>
<h2 id="事件的实现">事件的实现</h2>
<p>以下是事件结构体定义。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="cm">/* File event structure */</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">aeFileEvent</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">mask</span><span class="p">;</span> <span class="c1">// one of AE_(READABLE|WRITABLE) 类型
</span><span class="c1"></span>    <span class="n">aeFileProc</span> <span class="o">*</span><span class="n">rfileProc</span><span class="p">;</span> <span class="c1">// 读事件处理器
</span><span class="c1"></span>    <span class="n">aeFileProc</span> <span class="o">*</span><span class="n">wfileProc</span><span class="p">;</span> <span class="c1">// 写事件处理器
</span><span class="c1"></span>    <span class="kt">void</span> <span class="o">*</span><span class="n">clientData</span><span class="p">;</span> <span class="c1">// 多路复用库的私有数据
</span><span class="c1"></span><span class="p">}</span> <span class="n">aeFileEvent</span><span class="p">;</span>

<span class="cm">/* Time event structure */</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">aeTimeEvent</span> <span class="p">{</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">id</span><span class="p">;</span>  <span class="c1">// 唯一标志
</span><span class="c1"></span>    <span class="kt">long</span> <span class="n">when_sec</span><span class="p">;</span> <span class="c1">// 事件到达事件s
</span><span class="c1"></span>    <span class="kt">long</span> <span class="n">when_ms</span><span class="p">;</span>  <span class="c1">// 事件到达事件ms
</span><span class="c1"></span>    <span class="n">aeTimeProc</span> <span class="o">*</span><span class="n">timeProc</span><span class="p">;</span> <span class="c1">// 事件处理函数
</span><span class="c1"></span>    <span class="n">aeEventFinalizerProc</span> <span class="o">*</span><span class="n">finalizerProc</span><span class="p">;</span> <span class="c1">// 事件释放函数
</span><span class="c1"></span>    <span class="kt">void</span> <span class="o">*</span><span class="n">clientData</span><span class="p">;</span> <span class="c1">// 多路复用库的私有数据
</span><span class="c1"></span>    <span class="k">struct</span> <span class="n">aeTimeEvent</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span> <span class="c1">//　指向下一个时间事件结构，形成链表
</span><span class="c1"></span><span class="p">}</span> <span class="n">aeTimeEvent</span><span class="p">;</span>

<span class="cm">/* A fired event */</span>
<span class="c1">// 触发的事件结构体
</span><span class="c1"></span><span class="k">typedef</span> <span class="k">struct</span> <span class="n">aeFiredEvent</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span> <span class="c1">// 文件事件描述符
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">mask</span><span class="p">;</span>　<span class="c1">// one of AE_(READABLE|WRITABLE) 类型
</span><span class="c1"></span><span class="p">}</span> <span class="n">aeFiredEvent</span><span class="p">;</span>

<span class="c1">// 事件循环结构体
</span><span class="c1"></span><span class="k">typedef</span> <span class="k">struct</span> <span class="n">aeEventLoop</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">maxfd</span><span class="p">;</span>   <span class="c1">// 当前注册的最大描述符
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">setsize</span><span class="p">;</span> <span class="c1">// 需要监听的描述符个数
</span><span class="c1"></span>    <span class="kt">long</span> <span class="kt">long</span> <span class="n">timeEventNextId</span><span class="p">;</span> <span class="c1">// 下一个时间事件ID
</span><span class="c1"></span>    <span class="n">time_t</span> <span class="n">lastTime</span><span class="p">;</span>     <span class="c1">// 上一次时间循环时间
</span><span class="c1"></span>    <span class="n">aeFileEvent</span> <span class="o">*</span><span class="n">events</span><span class="p">;</span> <span class="c1">// 注册要使用的文件时间
</span><span class="c1"></span>    <span class="n">aeFiredEvent</span> <span class="o">*</span><span class="n">fired</span><span class="p">;</span> <span class="c1">// 已准备好，待处理事件
</span><span class="c1"></span>    <span class="n">aeTimeEvent</span> <span class="o">*</span><span class="n">timeEventHead</span><span class="p">;</span> <span class="c1">// 时间事件
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">stop</span><span class="p">;</span> <span class="c1">// 事件处理器开关
</span><span class="c1"></span>    <span class="kt">void</span> <span class="o">*</span><span class="n">apidata</span><span class="p">;</span> <span class="c1">// 处理多路服用库的私有数据
</span><span class="c1"></span>    <span class="n">aeBeforeSleepProc</span> <span class="o">*</span><span class="n">beforesleep</span><span class="p">;</span> <span class="c1">// 处理事件前要执行的函数
</span><span class="c1"></span><span class="p">}</span> <span class="n">aeEventLoop</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>redis源码阅读-事务</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%BA%8B%E5%8A%A1/</link>
    <pubDate>Sun, 16 Jul 2017 16:11:27 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%BA%8B%E5%8A%A1/</guid>
    <description><![CDATA[<p>redis的事务提供了一种将单个命令请求打包，然后一次性、按照顺序执行多个命令的机制，这种方式服务器会一次性把命令执行完，中间不会执行其他客户端的命令。不过redis的命令不支持错误命令执行后的回滚机制，也就是命令设计者要对命令的正确性负责，即使多个命令中存在部分错误的命令，剩余命令也会继续执行下去。</p>
<h2 id="主要命令">主要命令</h2>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">MULTI</td>
<td style="text-align:center">开始一个新的事务</td>
</tr>
<tr>
<td style="text-align:center">DISCARD</td>
<td style="text-align:center">放弃执行事务</td>
</tr>
<tr>
<td style="text-align:center">EXEC</td>
<td style="text-align:center">执行事务中的所有命令</td>
</tr>
<tr>
<td style="text-align:center">WATCH</td>
<td style="text-align:center">监视key，如果在exec之前被修改，则不执行事务</td>
</tr>
<tr>
<td style="text-align:center">UNWATCH</td>
<td style="text-align:center">取消对所有键的监视</td>
</tr>
</tbody>
</table>
<h2 id="事务的实现">事务的实现</h2>
<p>一个事务分为三个阶段：</p>
<ul>
<li>事务开始</li>
<li>命令入队</li>
<li>事务执行</li>
</ul>
<h3 id="事务开始">事务开始</h3>
<p>使用multi开启事务，redis主要使用redisClient中flag成员记录状态。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c">
<span class="kt">void</span> <span class="nf">multiCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 已经开启事务
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_MULTI</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">addReplyError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;MULTI calls can not be nested&#34;</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 标记事务开启
</span><span class="c1"></span>    <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_MULTI</span><span class="p">;</span>
    <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">ok</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Redis源码阅读-AOF持久化</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-aof%E6%8C%81%E4%B9%85%E5%8C%96/</link>
    <pubDate>Sun, 16 Jul 2017 12:52:43 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-aof%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
    <description><![CDATA[<p>之前看了RDB持久化，功能是把数据库的数据全部使用一种特定格式进行存储。恢复时一个一个数据库键恢复。</p>
<p>AOF持久化与RDB持久化不同，AOF通过保存Redis服务器执行的写命令来记录数据库的状态。</p>
<h2 id="aof持久化的实现">AOF持久化的实现</h2>
<p>AOF持久化功能分为命令追加、文件写入、文件同步三个步骤。</p>
<ul>
<li>命令追加：将命令数据写入aof_buf缓冲区</li>
<li>文件写入：将aof_buff缓冲区数据写入系统IO缓冲区</li>
<li>文件同步：将系统IO缓冲区的数据同步到磁盘文件</li>
</ul>
<h3 id="命令追加">命令追加</h3>
<p>AOF持久化打开时，服务器在执行一个写命令之后，会以协议的格式将执行的命令追加倒服务器状态aof_buf缓冲区尾部。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="k">struct</span> <span class="n">redisServer</span> <span class="p">{</span> 
  <span class="c1">// ...
</span><span class="c1"></span>  <span class="n">sds</span> <span class="n">aof_buf</span><span class="p">;</span>  <span class="c1">// aof缓冲区
</span><span class="c1"></span>  <span class="c1">// ....
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>命令追加的实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 将命令追加到AOF缓冲区中
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">feedAppendOnlyFile</span><span class="p">(</span><span class="k">struct</span> <span class="n">redisCommand</span> <span class="o">*</span><span class="n">cmd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dictid</span><span class="p">,</span> <span class="n">robj</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">sds</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">sdsempty</span><span class="p">();</span>
    <span class="n">robj</span> <span class="o">*</span><span class="n">tmpargv</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>

    <span class="c1">// 如果没切换到正确的数据库，则追加切换数据库命令
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">dictid</span> <span class="o">!=</span> <span class="n">server</span><span class="p">.</span><span class="n">aof_selected_db</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">char</span> <span class="n">seldb</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>

        <span class="n">snprintf</span><span class="p">(</span><span class="n">seldb</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">seldb</span><span class="p">),</span><span class="s">&#34;%d&#34;</span><span class="p">,</span><span class="n">dictid</span><span class="p">);</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">sdscatprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="s">&#34;*2</span><span class="se">\r\n</span><span class="s">$6</span><span class="se">\r\n</span><span class="s">SELECT</span><span class="se">\r\n</span><span class="s">$%lu</span><span class="se">\r\n</span><span class="s">%s</span><span class="se">\r\n</span><span class="s">&#34;</span><span class="p">,</span>
            <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">strlen</span><span class="p">(</span><span class="n">seldb</span><span class="p">),</span><span class="n">seldb</span><span class="p">);</span>
        <span class="n">server</span><span class="p">.</span><span class="n">aof_selected_db</span> <span class="o">=</span> <span class="n">dictid</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 根据命令类型追加命令
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">==</span> <span class="n">expireCommand</span> <span class="o">||</span> <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">==</span> <span class="n">pexpireCommand</span> <span class="o">||</span>
        <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">==</span> <span class="n">expireatCommand</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 追加过期键命令
</span><span class="c1"></span>        <span class="n">buf</span> <span class="o">=</span> <span class="n">catAppendOnlyExpireAtCommand</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="n">cmd</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">==</span> <span class="n">setexCommand</span> <span class="o">||</span> <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">==</span> <span class="n">psetexCommand</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 追加setexCommand或者psetexCommand
</span><span class="c1"></span>        <span class="n">tmpargv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">createStringObject</span><span class="p">(</span><span class="s">&#34;SET&#34;</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
        <span class="n">tmpargv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
        <span class="n">tmpargv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">catAppendOnlyGenericCommand</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">tmpargv</span><span class="p">);</span>
        <span class="n">decrRefCount</span><span class="p">(</span><span class="n">tmpargv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">catAppendOnlyExpireAtCommand</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="n">cmd</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// 追加其他一般修改数据库命令
</span><span class="c1"></span>        <span class="n">buf</span> <span class="o">=</span> <span class="n">catAppendOnlyGenericCommand</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="n">argc</span><span class="p">,</span><span class="n">argv</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// 将格式化的命令字符串追加到aof_buf缓冲区中
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_state</span> <span class="o">==</span> <span class="n">REDIS_AOF_ON</span><span class="p">)</span>
        <span class="n">server</span><span class="p">.</span><span class="n">aof_buf</span> <span class="o">=</span> <span class="n">sdscatlen</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_buf</span><span class="p">,</span><span class="n">buf</span><span class="p">,</span><span class="n">sdslen</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_child_pid</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="c1">// 如果在执行AOF重写，那么追加的新的AOF文件中
</span><span class="c1"></span>        <span class="n">aofRewriteBufferAppend</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buf</span><span class="p">,</span><span class="n">sdslen</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>

    <span class="n">sdsfree</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 根据参数，格式化命令
</span><span class="c1"></span><span class="n">sds</span> <span class="nf">catAppendOnlyGenericCommand</span><span class="p">(</span><span class="n">sds</span> <span class="n">dst</span><span class="p">,</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">robj</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">len</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
    <span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">;</span>

    <span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;*&#39;</span><span class="p">;</span>
    <span class="n">len</span> <span class="o">=</span> <span class="mi">1</span><span class="o">+</span><span class="n">ll2string</span><span class="p">(</span><span class="n">buf</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">argc</span><span class="p">);</span>
    <span class="n">buf</span><span class="p">[</span><span class="n">len</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\r&#39;</span><span class="p">;</span>
    <span class="n">buf</span><span class="p">[</span><span class="n">len</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span>
    <span class="n">dst</span> <span class="o">=</span> <span class="n">sdscatlen</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span><span class="n">buf</span><span class="p">,</span><span class="n">len</span><span class="p">);</span>

    <span class="c1">// 遍历每一个参数，支架到AOF缓冲区中
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">o</span> <span class="o">=</span> <span class="n">getDecodedObject</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
        <span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;$&#39;</span><span class="p">;</span>
        <span class="n">len</span> <span class="o">=</span> <span class="mi">1</span><span class="o">+</span><span class="n">ll2string</span><span class="p">(</span><span class="n">buf</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">sdslen</span><span class="p">(</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">));</span>
        <span class="n">buf</span><span class="p">[</span><span class="n">len</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\r&#39;</span><span class="p">;</span>
        <span class="n">buf</span><span class="p">[</span><span class="n">len</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span>
        <span class="n">dst</span> <span class="o">=</span> <span class="n">sdscatlen</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span><span class="n">buf</span><span class="p">,</span><span class="n">len</span><span class="p">);</span>
        <span class="n">dst</span> <span class="o">=</span> <span class="n">sdscatlen</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">,</span><span class="n">sdslen</span><span class="p">(</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">));</span>
        <span class="n">dst</span> <span class="o">=</span> <span class="n">sdscatlen</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span><span class="s">&#34;</span><span class="se">\r\n</span><span class="s">&#34;</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
        <span class="n">decrRefCount</span><span class="p">(</span><span class="n">o</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">dst</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Redis源码阅读-订阅与发布</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E8%AE%A2%E9%98%85%E4%B8%8E%E5%8F%91%E5%B8%83/</link>
    <pubDate>Wed, 12 Jul 2017 19:36:41 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E8%AE%A2%E9%98%85%E4%B8%8E%E5%8F%91%E5%B8%83/</guid>
    <description><![CDATA[<p>Redis的发布与订阅主要是实现客户端订阅一个频道或者模式，当某客户端向一个频道发送消息时，该频道或者匹配模式订阅者都能够收到消息。</p>
<h2 id="频道的订阅与退订">频道的订阅与退订</h2>
<p>Redis在服务器结构体中的pubsub_channels字典中保存了所有的频道订阅关系。pubsub_channels键为频道，值为订阅的客户端组成的链表。</p>
<p>客户端结构体的pubsub_channels保存了客户端订阅的所有频道，pubsub_channels的键为频道，值为空。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="k">struct</span> <span class="n">redisServer</span> <span class="p">{</span>
  <span class="c1">// ...
</span><span class="c1"></span>  <span class="n">dict</span> <span class="o">*</span><span class="n">pubsub_channels</span><span class="p">;</span>  <span class="c1">// 保存所有的频道订阅关系
</span><span class="c1"></span>  <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>

<span class="k">struct</span> <span class="n">redisClient</span> <span class="p">{</span>
  <span class="c1">// ...
</span><span class="c1"></span>  <span class="n">dict</span> <span class="o">*</span><span class="n">pubsub_channels</span><span class="p">;</span> <span class="c1">// 记录客户端订阅的频道
</span><span class="c1"></span>  <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="订阅">订阅</h2>
<p>源码如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 订阅命令处理函数
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">subscribeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>

    <span class="c1">// 遍历指令中的所有频道
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="n">pubsubSubscribeChannel</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
    <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_PUBSUB</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 设置客户端c订阅频道channel
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">pubsubSubscribeChannel</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">channel</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dictEntry</span> <span class="o">*</span><span class="n">de</span><span class="p">;</span>
    <span class="n">list</span> <span class="o">*</span><span class="n">clients</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">retval</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="cm">/* Add the channel to the client -&gt; channels hash table */</span>
    <span class="c1">// 将channels加倒c-&gt;c-&gt;pubsub_channels的字典里
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">dictAdd</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pubsub_channels</span><span class="p">,</span><span class="n">channel</span><span class="p">,</span><span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="n">DICT_OK</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">retval</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">incrRefCount</span><span class="p">(</span><span class="n">channel</span><span class="p">);</span>
        <span class="cm">/* Add the client to the channel -&gt; list of clients hash table */</span>
        <span class="c1">// 找出服务器中的频道
</span><span class="c1"></span>        <span class="n">de</span> <span class="o">=</span> <span class="n">dictFind</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">pubsub_channels</span><span class="p">,</span><span class="n">channel</span><span class="p">);</span>
        
        <span class="c1">// 不存在就添加一个频道
</span><span class="c1"></span>        <span class="c1">// 获取客户端链表
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">de</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">clients</span> <span class="o">=</span> <span class="n">listCreate</span><span class="p">();</span>
            <span class="n">dictAdd</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">pubsub_channels</span><span class="p">,</span><span class="n">channel</span><span class="p">,</span><span class="n">clients</span><span class="p">);</span>
            <span class="n">incrRefCount</span><span class="p">(</span><span class="n">channel</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">clients</span> <span class="o">=</span> <span class="n">dictGetVal</span><span class="p">(</span><span class="n">de</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// 添加到客户端链表尾部
</span><span class="c1"></span>        <span class="n">listAddNodeTail</span><span class="p">(</span><span class="n">clients</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="cm">/* Notify the client */</span>
    <span class="c1">// 回复客户端
</span><span class="c1"></span>    <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">mbulkhdr</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
    <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">subscribebulk</span><span class="p">);</span>
    <span class="n">addReplyBulk</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">channel</span><span class="p">);</span>
    <span class="n">addReplyLongLong</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">clientSubscriptionsCount</span><span class="p">(</span><span class="n">c</span><span class="p">));</span>
    <span class="k">return</span> <span class="n">retval</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>redis源码阅读-RDB持久化</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-rdb%E6%8C%81%E4%B9%85%E5%8C%96/</link>
    <pubDate>Wed, 12 Jul 2017 16:04:59 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-rdb%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
    <description><![CDATA[<p>Redis是一个内存数据库，数据存储在内存之中。有一个问题就是如果数据不存储到硬盘，那么在服务器进程退出之后，服务器中所有的数据库数据就会丢失。</p>
<p>Redis为了解决这个问题，提供了持久化功能，目前有两种一种是RDB持久化，一种是AOF持久化。</p>
<p>RDB持久化是生成一个RDB文件，该文件是一个经过压缩的二进制文件，通过该文件可以还原数据库的状态。</p>
<h2 id="rdb文件的保存命令">RDB文件的保存命令</h2>
<p>Redis有两个命令可以生成RDB文件一个是SAVE，一个是BGSAVE。
SAVE命令调用saveCommand进行处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">saveCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 判断是否正在执行BGSAVE，是则退出
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_child_pid</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">addReplyError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;Background save already in progress&#34;</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">//调用rdbSave生成RDB文件
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">rdbSave</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_filename</span><span class="p">)</span> <span class="o">==</span> <span class="n">REDIS_OK</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">ok</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">err</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>BGSAVE调用bgsaveCommand进行处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">bgsaveCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 判断是否已经在执行BGSAVE
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_child_pid</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">addReplyError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;Background save already in progress&#34;</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_child_pid</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        
    <span class="c1">// 判断是否在执行BGREWRIEAOF
</span><span class="c1"></span>        <span class="n">addReplyError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;Can&#39;t BGSAVE while AOF log rewriting is in progress&#34;</span><span class="p">);</span>
    
    <span class="c1">// 执行rdbSaveBackground 生成RDB文件
</span><span class="c1"></span>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">rdbSaveBackground</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_filename</span><span class="p">)</span> <span class="o">==</span> <span class="n">REDIS_OK</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">addReplyStatus</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;Background saving started&#34;</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">err</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">rdbSaveBackground</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">pid_t</span> <span class="n">childpid</span><span class="p">;</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">start</span><span class="p">;</span>

    <span class="c1">// 如果BGSAVE正在执行直接返回
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_child_pid</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>

    <span class="c1">// 获取dirty数据 执行时间
</span><span class="c1"></span>    <span class="n">server</span><span class="p">.</span><span class="n">dirty_before_bgsave</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">dirty</span><span class="p">;</span>
    <span class="n">server</span><span class="p">.</span><span class="n">lastbgsave_try</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>

    <span class="c1">// fork() 开始前时间
</span><span class="c1"></span>    <span class="n">start</span> <span class="o">=</span> <span class="n">ustime</span><span class="p">();</span>

    <span class="c1">// 调用fork，克隆该进程
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">((</span><span class="n">childpid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">())</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">retval</span><span class="p">;</span>

        <span class="cm">/* Child */</span>
        <span class="n">closeListeningSockets</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
        <span class="n">redisSetProcTitle</span><span class="p">(</span><span class="s">&#34;redis-rdb-bgsave&#34;</span><span class="p">);</span>

        <span class="c1">// 执行保存操作
</span><span class="c1"></span>        <span class="n">retval</span> <span class="o">=</span> <span class="n">rdbSave</span><span class="p">(</span><span class="n">filename</span><span class="p">);</span>

        <span class="c1">// 打印 copy-on-write 时使用的内存数
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">retval</span> <span class="o">==</span> <span class="n">REDIS_OK</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">size_t</span> <span class="n">private_dirty</span> <span class="o">=</span> <span class="n">zmalloc_get_private_dirty</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">private_dirty</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_NOTICE</span><span class="p">,</span>
                    <span class="s">&#34;RDB: %zu MB of memory used by copy-on-write&#34;</span><span class="p">,</span>
                    <span class="n">private_dirty</span><span class="o">/</span><span class="p">(</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="p">));</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="c1">// 向父进程发送信号
</span><span class="c1"></span>        <span class="n">exitFromChild</span><span class="p">((</span><span class="n">retval</span> <span class="o">==</span> <span class="n">REDIS_OK</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="cm">/* Parent */</span>

        <span class="c1">// 计算 fork() 执行的时间
</span><span class="c1"></span>        <span class="n">server</span><span class="p">.</span><span class="n">stat_fork_time</span> <span class="o">=</span> <span class="n">ustime</span><span class="p">()</span><span class="o">-</span><span class="n">start</span><span class="p">;</span>
        <span class="n">server</span><span class="p">.</span><span class="n">stat_fork_rate</span> <span class="o">=</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span> <span class="n">zmalloc_used_memory</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000000</span> <span class="o">/</span> <span class="n">server</span><span class="p">.</span><span class="n">stat_fork_time</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="p">);</span> <span class="cm">/* GB per second. */</span>
        <span class="n">latencyAddSampleIfNeeded</span><span class="p">(</span><span class="s">&#34;fork&#34;</span><span class="p">,</span><span class="n">server</span><span class="p">.</span><span class="n">stat_fork_time</span><span class="o">/</span><span class="mi">1000</span><span class="p">);</span>
        
        <span class="c1">// 执行fork()错误信息
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">childpid</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">server</span><span class="p">.</span><span class="n">lastbgsave_status</span> <span class="o">=</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
            <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span><span class="s">&#34;Can&#39;t save in background: fork: %s&#34;</span><span class="p">,</span>
                <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
            <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_NOTICE</span><span class="p">,</span><span class="s">&#34;Background saving started by pid %d&#34;</span><span class="p">,</span><span class="n">childpid</span><span class="p">);</span>
        
        <span class="c1">// 记录数据库开始BGSAVE时间
</span><span class="c1"></span>        <span class="n">server</span><span class="p">.</span><span class="n">rdb_save_time_start</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>

        <span class="c1">// 子进程ID 类型
</span><span class="c1"></span>        <span class="n">server</span><span class="p">.</span><span class="n">rdb_child_pid</span> <span class="o">=</span> <span class="n">childpid</span><span class="p">;</span>
        <span class="n">server</span><span class="p">.</span><span class="n">rdb_child_type</span> <span class="o">=</span> <span class="n">REDIS_RDB_CHILD_TYPE_DISK</span><span class="p">;</span>

        <span class="c1">// 关闭自动Rehash
</span><span class="c1"></span>        <span class="n">updateDictResizePolicy</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span> <span class="cm">/* unreached */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>redis源码阅读-服务器</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <pubDate>Mon, 10 Jul 2017 16:21:21 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
    <description><![CDATA[<h2 id="服务器">服务器</h2>
<p>redis运行存在一个redis服务器结构，一个服务器中保存着n个数据库。</p>
<p>dbnum由服务器配置决定，默认值为16。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="k">struct</span> <span class="n">redisServer</span> <span class="p">{</span>
    <span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">;</span>  <span class="c1">// Redis的数据库
</span><span class="c1"></span>    <span class="c1">// ...
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">dbnum</span><span class="p">;</span>  <span class="c1">// 表明数据库的数量
</span><span class="c1"></span>    <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">redisDb</span> <span class="p">{</span>
    <span class="n">dict</span> <span class="o">*</span><span class="n">dict</span><span class="p">;</span>                 <span class="cm">/* 数据库键字典 */</span>
    <span class="n">dict</span> <span class="o">*</span><span class="n">expires</span><span class="p">;</span>              <span class="cm">/* 键过期时间字典 */</span>
    <span class="n">dict</span> <span class="o">*</span><span class="n">blocking_keys</span><span class="p">;</span>        <span class="cm">/* 处于阻塞状态的键 */</span>
    <span class="n">dict</span> <span class="o">*</span><span class="n">ready_keys</span><span class="p">;</span>           <span class="cm">/* 可以解除阻塞的键 */</span>
    <span class="n">dict</span> <span class="o">*</span><span class="n">watched_keys</span><span class="p">;</span>         <span class="cm">/* 被watch的键 */</span>
    <span class="k">struct</span> <span class="n">evictionPoolEntry</span> <span class="o">*</span><span class="n">eviction_pool</span><span class="p">;</span>    <span class="cm">/* Eviction pool of keys */</span>
    <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>                     <span class="cm">/* 数据库编号 */</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">avg_ttl</span><span class="p">;</span>          <span class="cm">/* 数据库键的平均时间*/</span>
<span class="p">}</span> <span class="n">redisDb</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="切换数据库">切换数据库</h2>
<p>每个redis客户端都有自己的目标数据库，当客户端执行数据库读写命令，目标数据库是这些命令的操作对象。</p>
<p>redis提供select命令来切换数据库，redisClient</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">redisClient</span> <span class="p">{</span> 
    <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>  <span class="c1">// 套接字描述符
</span><span class="c1"></span>    <span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">;</span> <span class="c1">// 当前正在使用的数据库
</span><span class="c1"></span>    <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>

<span class="kt">int</span> <span class="n">selectDb</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 校验id
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">id</span> <span class="o">&gt;=</span> <span class="n">server</span><span class="p">.</span><span class="n">dbnum</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>

    <span class="c1">// 切换客户端数据库
</span><span class="c1"></span>    <span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">server</span><span class="p">.</span><span class="n">db</span><span class="p">[</span><span class="n">id</span><span class="p">];</span>

    <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><h2 id="数据库键空间">数据库键空间</h2>
<p>Redis数据库存放的数据都是以键值对形式存在，redisDB结构的dict字典保存数据库中的所有键值对，这个字典被成为键空间。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c">
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">redisDb</span> <span class="p">{</span>
    <span class="n">dict</span> <span class="o">*</span><span class="n">dict</span><span class="p">;</span>                 <span class="cm">/* 数据库键字典 */</span>
    <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span> <span class="n">redisDb</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>键空间的键就是数据库的键，每个键都是一个字符串对象。</p>
<p>键空间的值就是数据库的值，每个值可以是字符串对象、列表对象、哈希表对象、集合对象、有序集合对象中任意一种。</p>
<h2 id="键空间的操作">键空间的操作</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="cm">/* db.c -- Keyspace access API */</span>
<span class="kt">int</span> <span class="nf">removeExpire</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span><span class="c1">// 移除键的过期时间
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">propagateExpire</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">expireIfNeeded</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 检查是否过期，是则删除键
</span><span class="c1"></span><span class="kt">long</span> <span class="kt">long</span> <span class="nf">getExpire</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 获取过期时间
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">setExpire</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">when</span><span class="p">);</span> <span class="c1">// 设定过期时间
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">lookupKey</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 从db中取出键key的值
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">lookupKeyRead</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 从db中取出键key的值
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">lookupKeyWrite</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 从db中取出键key的值
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">lookupKeyReadOrReply</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">reply</span><span class="p">);</span> <span class="c1">// 从db中取出键key的值
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">lookupKeyWriteOrReply</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">reply</span><span class="p">);</span><span class="c1">// 从db中取出键key的值
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">dbAdd</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">val</span><span class="p">);</span><span class="c1">// 尝试将键值对key\val添加到数据库中
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">dbOverwrite</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">val</span><span class="p">);</span> <span class="c1">// 重写指定键的值,键不存在的话终止
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">setKey</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">val</span><span class="p">);</span><span class="c1">// 设定指定键的值，不管存不存在
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">dbExists</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 判断指定键是否存在  
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">dbRandomKey</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">);</span> <span class="c1">// 随机从数据库中取出一个键，并以字符串对象的方式返回这个键
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">dbDelete</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 从数据库中删除给定的键
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">dbUnshareStringValue</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">);</span>
<span class="kt">long</span> <span class="kt">long</span> <span class="nf">emptyDb</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="n">callback</span><span class="p">)(</span><span class="kt">void</span><span class="o">*</span><span class="p">));</span><span class="c1">// 情况所有数据
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">selectDb</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">id</span><span class="p">);</span> <span class="c1">// 切换db
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">signalModifiedKey</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">signalFlushedDb</span><span class="p">(</span><span class="kt">int</span> <span class="n">dbid</span><span class="p">);</span>
<span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">getKeysInSlot</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">hashslot</span><span class="p">,</span> <span class="n">robj</span> <span class="o">**</span><span class="n">keys</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">count</span><span class="p">);</span>
<span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">countKeysInSlot</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">hashslot</span><span class="p">);</span>
<span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">delKeysInSlot</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">hashslot</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">verifyClusterConfigWithData</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">scanGenericCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">cursor</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">parseScanCursorOrReply</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">*</span><span class="n">cursor</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>redis源码阅读-对象</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%AF%B9%E8%B1%A1/</link>
    <pubDate>Sun, 09 Jul 2017 22:55:14 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%AF%B9%E8%B1%A1/</guid>
    <description><![CDATA[<p>之前阅读了redis用到的主要的数据结构，这些数据结构是redis对象基础。redis在这些基础数据结构之上创建了一个对象系统，这个系统包含字符串对象、列表对象、哈希对象、集合对象和有序集合对象五种类型的对象。</p>
<p>redis执行命令前，先判断命令是否能够执行给定命令。根据不同场合选择使用不同的数据结构。</p>
<h2 id="对象的类型与编码">对象的类型与编码</h2>
<p>redis使用对象来表示数据库中的键值，创建一个键值对时，会创建至少两个对象，一个对象用作键值对的键，一个对象用作键值对的值。</p>
<h3 id="对象的结构体">对象的结构体</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">redisObject</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="nl">type</span><span class="p">:</span><span class="mi">4</span><span class="p">;</span> <span class="c1">// 类型
</span><span class="c1"></span>    <span class="kt">unsigned</span> <span class="nl">encoding</span><span class="p">:</span><span class="mi">4</span><span class="p">;</span> <span class="c1">// 编码
</span><span class="c1"></span>    <span class="kt">unsigned</span> <span class="nl">lru</span><span class="p">:</span><span class="n">REDIS_LRU_BITS</span><span class="p">;</span> <span class="cm">/* lru time (relative to server.lruclock) */</span>
    <span class="kt">int</span> <span class="n">refcount</span><span class="p">;</span> <span class="c1">// 引用计数
</span><span class="c1"></span>    <span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span> <span class="c1">// 值
</span><span class="c1"></span><span class="p">}</span> <span class="n">robj</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>redis结构体使用位段结构节省空间</p>
<h4 id="类型type">类型type</h4>
<p>记录redis对象类型，五种类型</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="cp">#define REDIS_STRING 0 </span><span class="c1">// 字符串对象
</span><span class="c1"></span><span class="cp">#define REDIS_LIST 1 </span><span class="c1">// 列表对象
</span><span class="c1"></span><span class="cp">#define REDIS_SET 2 </span><span class="c1">// 哈希对象
</span><span class="c1"></span><span class="cp">#define REDIS_ZSET 3 </span><span class="c1">// 集合对象
</span><span class="c1"></span><span class="cp">#define REDIS_HASH 4 </span><span class="c1">// 有序集合对象
</span></code></pre></td></tr></table>
</div>
</div><h4 id="编码encoding">编码encoding</h4>
<p>记录redis对象的编码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 对象编码
</span><span class="c1"></span><span class="cp">#define REDIS_ENCODING_RAW 0     </span><span class="cm">/* 简单动态字符串 */</span><span class="cp">
</span><span class="cp">#define REDIS_ENCODING_INT 1     </span><span class="cm">/* long类型的整数 */</span><span class="cp">
</span><span class="cp">#define REDIS_ENCODING_HT 2      </span><span class="cm">/* 字典 */</span><span class="cp">
</span><span class="cp">#define REDIS_ENCODING_ZIPMAP 3  </span><span class="cm">/* zipmap 3.2.5不再使用 */</span><span class="cp">
</span><span class="cp">#define REDIS_ENCODING_LINKEDLIST 4 </span><span class="cm">/* 双端队列 */</span><span class="cp">
</span><span class="cp">#define REDIS_ENCODING_ZIPLIST 5 </span><span class="cm">/* 压缩列表 */</span><span class="cp">
</span><span class="cp">#define REDIS_ENCODING_INTSET 6  </span><span class="cm">/* 整数集合 */</span><span class="cp">
</span><span class="cp">#define REDIS_ENCODING_SKIPLIST 7  </span><span class="cm">/* 跳跃表 */</span><span class="cp">
</span><span class="cp">#define REDIS_ENCODING_EMBSTR 8  </span><span class="cm">/* EMBSTR编码的简单字符串 */</span><span class="cp">
</span></code></pre></td></tr></table>
</div>
</div><p>每种类型对应至少两种不同的编码。</p>
<table>
<thead>
<tr>
<th>对象类型</th>
<th>编码方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>REDIS_STRING</td>
<td>REDIS_ENCODING_RAW ,REDIS_ENCODING_INT ,REDIS_ENCODING_EMBSTR</td>
</tr>
<tr>
<td>REDIS_LIST</td>
<td>REDIS_ENCODING_LINKEDLIST ,REDIS_ENCODING_ZIPLIST</td>
</tr>
<tr>
<td>REDIS_SET</td>
<td>REDIS_ENCODING_INTSET ,REDIS_ENCODING_HT</td>
</tr>
<tr>
<td>REDIS_ZSET</td>
<td>REDIS_ENCODING_ZIPLIST ,REDIS_ENCODING_SKIPLIST</td>
</tr>
<tr>
<td>REDIS_HASH</td>
<td>REDIS_ENCODING_ZIPLIST ,REDIS_ENCODING_HT</td>
</tr>
</tbody>
</table>
<h4 id="访问时间">访问时间</h4>
<p>表示对象的最后一次访问时间。</p>
<h4 id="引用计数">引用计数</h4>
<p>常见的管理方式，引用计数为0时回收。</p>]]></description>
</item><item>
    <title>redis源码阅读-压缩列表ziplist</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8ziplist/</link>
    <pubDate>Sat, 08 Jul 2017 21:49:02 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8ziplist/</guid>
    <description><![CDATA[<p>压缩列表时列表键和哈希键的底层实现之一。当一个列表键只包含少量列表项，并且每个列表项要么是小整数，要么是长度比较短的字符串，那么Redis就会使用压缩列表来做列表键的底层实现。</p>
<h2 id="压缩列表的构成">压缩列表的构成</h2>
<p>压缩列表是redis为了节约内存而开发的，由一系列特殊编码的连续内存块组成的顺序型数据结构。一个压缩列表可以包含任意多个节点，每个节点可以保存一个字节数组或者一个整数组。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">《redis设计与实现》
空白 ziplist 示例图

area        |&lt;---- ziplist header ----&gt;|&lt;-- end --&gt;|

size          4 bytes   4 bytes 2 bytes  1 byte
            +---------+--------+-------+-----------+
component   | zlbytes | zltail | zllen | zlend     |
            |         |        |       |           |
value       |  1011   |  1010  |   0   | 1111 1111 |
            +---------+--------+-------+-----------+
                                       ^
                                       |
                               ZIPLIST_ENTRY_HEAD
                                       &amp;
address                        ZIPLIST_ENTRY_TAIL
                                       &amp;
                               ZIPLIST_ENTRY_END

非空 ziplist 示例图

area        |&lt;---- ziplist header ----&gt;|&lt;----------- entries -------------&gt;|&lt;-end-&gt;|

size          4 bytes  4 bytes  2 bytes    ?        ?        ?        ?     1 byte
            +---------+--------+-------+--------+--------+--------+--------+-------+
component   | zlbytes | zltail | zllen | entry1 | entry2 |  ...   | entryN | zlend |
            +---------+--------+-------+--------+--------+--------+--------+-------+
                                       ^                          ^        ^
address                                |                          |        |
                                ZIPLIST_ENTRY_HEAD                |   ZIPLIST_ENTRY_END
                                                                  |
                                                        ZIPLIST_ENTRY_TAIL
</code></pre></td></tr></table>
</div>
</div><p>zlbytes记录整个压缩列表占用的字节数。</p>
<p>zltail记录压缩列表尾节点距离压缩列表的起始地址有多少字节。</p>
<p>zzlen记录压缩列表包含的节点数量。</p>
<p>entryX列表节点，数量不定。</p>
<p>zlend特殊值0xff，标记压缩列表末端。</p>]]></description>
</item></channel>
</rss>
