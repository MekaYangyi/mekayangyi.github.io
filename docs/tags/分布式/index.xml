<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>分布式 - Tag - 鉴心</title>
        <link>http://coderyang.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/</link>
        <description>分布式 - Tag - 鉴心</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 18 Jan 2021 16:04:59 &#43;0000</lastBuildDate><atom:link href="http://coderyang.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>一致性与共识算法</title>
    <link>http://coderyang.com/%E4%B8%80%E8%87%B4%E6%80%A7%E4%B8%8E%E5%85%B1%E8%AF%86/</link>
    <pubDate>Mon, 18 Jan 2021 16:04:59 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/%E4%B8%80%E8%87%B4%E6%80%A7%E4%B8%8E%E5%85%B1%E8%AF%86/</guid>
    <description><![CDATA[本文从《数据密集型引用系统设计》、Paxos lecture (Raft user study)（https://www.youtube.com/watch?v=JEpsBg0AO6o） 各截取了部分。
挑战 故障 数据：
 磁盘: 4% 年损坏率 服务器宕机时间: 0.1% 或更长 IDC间丢包率: 5% ~ 30%  下面是几种分布式系统下典型的问题：
 当通过网络发送数据包时，数据包可能会丢失或者延迟。同样，回复也可能会丢失或延迟。所以如果没有收到回复，并不能确定消息是否发送成功。 节点的时钟可能会与其他节点存在明显的不同步，时钟还可能会突然向前跳跃或者倒退，依靠精准的时钟存在一些风险，没有特别简单的方法来精确测量时钟的偏差范围。 进程可能在执行过程中的任意时候遭遇长度未知的暂停（一个重要的原因是垃圾回收），结果它被其他节点宣告失效，尽管后来又恢复执行，却对中间的暂停毫无所知。  部分失效可能是分布式系统的关键特征。只要软件试图跨节点做任何失效，就有可能出现失败，或者随机变慢，或者根本无应答（最终超时）。对于分布式环境，我们目标是建立容忍部分失效的软件系统，这样即使某些部件发生失效，系统整体还可以继续运行。
线性化与CAP理论 线性化：表现得好像只有一个数据副本，且其上的所有操作都是原子的。
为什么要线性化？
非线性化系统的问题：
上面违背线性化只产生了一个比较小的问题，仅仅是展示页面不一致。但是如果核心业务违背线性化，可能导致严重问题。常见的就是集群选主，可能会出现两个主，导致脑裂。
常见复制算法，对线性化的支持：
 主从复制（部分支持）  只有主写入读取的话，其他都是备份的情况下，是线性化的。但是不能做高高可用。 异步复制、主脑裂、从读等情况，不可线性化。   多主复制（不可线性化）  多副本冲突   无主复制（可能不可线性化）  能够实现高可靠、高可用性、数据完整有保证 会出现脏读、更新丢失等情况 具体看ddia吧，不展开了，用的比较少   共识算法（可线性化）  具体之后讨论。    线性化的代价以及CAP理论：
FLP FLP 不可能定理是分布式系统领域最重要的定理之一，它给出了一个非常重要的结论：在网络可靠并且存在节点失效的异步模型系统中，不存在一个可以解决一致性问题的确定性算法。
 In this paper, we show the surprising result that no completely asynchronous consensus protocol can tolerate even a single unannounced process death.]]></description>
</item></channel>
</rss>
