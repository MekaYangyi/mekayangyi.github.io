<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>计算机程序的构造与解释 - Tag - 鉴心</title>
        <link>http://coderyang.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E8%A7%A3%E9%87%8A/</link>
        <description>计算机程序的构造与解释 - Tag - 鉴心</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 10 Sep 2016 08:33:32 &#43;0000</lastBuildDate><atom:link href="http://coderyang.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E8%A7%A3%E9%87%8A/" rel="self" type="application/rss+xml" /><item>
    <title>[读书笔记] sicp 第三章 模块化 对象和状态</title>
    <link>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A8%A1%E5%9D%97%E5%8C%96-%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%8A%B6%E6%80%81/</link>
    <pubDate>Sat, 10 Sep 2016 08:33:32 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A8%A1%E5%9D%97%E5%8C%96-%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%8A%B6%E6%80%81/</guid>
    <description><![CDATA[<p>有效的程序综合还需要一些组织原则，它们能够指导我们系统化地完成系统的整体设计。特别的需要一些能够帮助我们构造起模块化的大型系统策略，也就是说，使这些系统能够“自然地”划分为一些具有内聚力的部分，使这些部分可以分别进行开发和维护。
有一种非常强有力的设计策略，特别适合用于构造那类模拟真实物理系统的程序，那就是基于被模拟程序的结构去设计程序的结构。那么有关的物理系统里的每一个对象，我们构造起一个与之对象的计算对象；对该系统里的每种活动，我们在自己的计算系统里顶一种符号操作。采用这一策略时的希望是，在需要针对系统中的新对象或者新活动扩充对应的计算模型时候，我们能够不必对程序的组织方面做得很成功，那么在需要添加新特城或者排除旧东西里的错误时候，就只需要在系统里的一些小局部中工作。
本章研究两种特点鲜明的策略。第一种策略将注意力集中在对象上，将大型系统看成一大批对象，它们的行为可能随着时间的进展而不断的变化。另一种组织策略将注意力集中在流过的系统的信息流上，非常像电子工程师观察一个信号处理系统。
对于对象途径而言，我们必须关注计算对象可以怎样变化而又同时保持其标识。这将迫使我们抛弃老的计算的代换模型，转向更机械式的，理论上也更不同意把握的计算的环境模型。在处理对象、变化和标识时，各种困难的基本根源在于我们需要在这一计算模型中与时间搏斗。如果允许程序并发指向的可能性，事情会变得更困难许多。流方式特别能用于松解在我们模型中对时间的模拟与计算机求值过程中的各种时间发生的顺序。我们将通过一种称为延时求值的技术做到这一点。</p>
<h1 id="赋值和局部状态">赋值和局部状态</h1>
<p>一个由许多对象组成的系统里，其中的这些对象极少会是完全独立的。每个对象都可能通过交互作用，影响其他对象的状态，所谓交互就是建立起一个对象的状态变量与其他对象的状态变量之间的联系。确实如果一个系统中的状态变量可以分组，形成一些内部紧密结合的子系统，每个子系统与其他子系统之间只存在松散的练习，此时将这个系统看作是由一些独立对象组成的观点就会特别有用。
对于一个系统的这种观点，有可能成为组织这一系统的计算模型的有力框架。要使这样的一个模型成为模块化的，就要求它能够分解为一批计算对象，使它们能够模拟系统里的实际对象。每个计算对象必须有它自己的一些局部状态变量，用于描述实际对象的状态。对于被模拟系统里的对象的状态是随着时间的变化的，与它们对象的计算对象的状态也必须变化。</p>
<h2 id="局部状态变量">局部状态变量</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">set!</span> <span class="nv">&lt;name&gt;</span> <span class="nv">&lt;new-value&gt;</span><span class="p">)</span><span class="c1">;设置值</span>
<span class="p">(</span><span class="nv">begin</span> <span class="nv">&lt;exp1&gt;</span> <span class="nv">&lt;exp2&gt;</span><span class="p">)</span><span class="c1">;顺序求值</span>

<span class="p">(</span><span class="nv">define</span> <span class="nv">balance</span> <span class="mi">100</span><span class="p">)</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">withdraw</span> <span class="nv">amount</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nf">&gt;=</span> <span class="nv">balance</span> <span class="nv">amount</span><span class="p">)</span>
      <span class="p">(</span><span class="nv">begin</span> <span class="p">(</span><span class="nv">set!</span> <span class="nv">balance</span> <span class="p">(</span><span class="nf">-</span> <span class="nv">balance</span> <span class="nv">amount</span><span class="p">))</span>
             <span class="nv">balance</span><span class="p">)</span>
      <span class="s">&#34;Insufficient funds&#34;</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>上面使用了全局变量
下面使用局部变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nv">new-withdraw</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">balance</span> <span class="mi">100</span><span class="p">))</span>
    <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">amount</span><span class="p">)</span>
      <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nf">&gt;=</span> <span class="nv">balance</span> <span class="nv">amount</span><span class="p">)</span>
          <span class="p">(</span><span class="nv">begin</span> <span class="p">(</span><span class="nv">set!</span> <span class="nv">balance</span> <span class="p">(</span><span class="nf">-</span> <span class="nv">balance</span> <span class="nv">amount</span><span class="p">))</span>
                 <span class="nv">balance</span><span class="p">)</span>
          <span class="s">&#34;Insufficient funds&#34;</span><span class="p">))))</span>
</code></pre></td></tr></table>
</div>
</div><p>构建一个提款机</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-withdraw</span> <span class="nv">balance</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">amount</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nf">&gt;=</span> <span class="nv">balance</span> <span class="nv">amount</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">begin</span> <span class="p">(</span><span class="nv">set!</span> <span class="nv">balance</span> <span class="p">(</span><span class="nf">-</span> <span class="nv">balance</span> <span class="nv">amount</span><span class="p">))</span>
               <span class="nv">balance</span><span class="p">)</span>
        <span class="s">&#34;Insufficient funds&#34;</span><span class="p">)))</span>
</code></pre></td></tr></table>
</div>
</div><p>创建一个账户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-withdraw</span> <span class="nv">balance</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">withdraw</span> <span class="nv">amount</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nf">&gt;=</span> <span class="nv">balance</span> <span class="nv">amount</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">begin</span> <span class="p">(</span><span class="nv">set!</span> <span class="nv">balance</span> <span class="p">(</span><span class="nf">-</span> <span class="nv">balance</span> <span class="nv">amount</span><span class="p">))</span>
               <span class="nv">balance</span><span class="p">)</span>
        <span class="s">&#34;Insufficient funds&#34;</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">deposit</span> <span class="nv">amount</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">set!</span> <span class="nv">balance</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">balance</span> <span class="nv">amount</span><span class="p">))</span>
    <span class="nv">balance</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">dispatch</span> <span class="nv">m</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">eq?</span> <span class="nv">m</span> <span class="ss">&#39;withdraw</span><span class="p">)</span> <span class="nv">withdraw</span><span class="p">)</span>
          <span class="p">((</span><span class="nv">eq?</span> <span class="nv">m</span> <span class="ss">&#39;deposit</span><span class="p">)</span> <span class="nv">deposit</span><span class="p">)</span>
          <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;Unknoew request --MAKE-ACCOUNT&#34;</span>
                       <span class="nv">m</span><span class="p">))))</span>
  <span class="nv">dispatch</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="引进赋值带来的收益">引进赋值带来的收益</h2>
<p>能够简化一部分需要变量状态的过程。</p>
<h2 id="引进赋值的代价">引进赋值的代价</h2>
<p>相比函数是编程，输入什么结果就是什么。显然引进赋值让程序变得更复杂。
需要存在一个位置存储变量。</p>
<h3 id="命令式程序设计的缺陷">命令式程序设计的缺陷</h3>
<p>与函数式程序设计相对，广泛采用的赋值程序设计被称为命令是程序设计。
求值顺序需要保证。</p>
<h1 id="求值的环境模型">求值的环境模型</h1>
<p>类似于C++的区域。
过程也是对象。
调用过程就会产生新的上下文环境，过程内的是过程内的环境。过程外全局环境等。</p>
<p>过程应用的环境模型两条规则：</p>
<ol>
<li>将一个过程对象应用于一集实际参数，将构造出一个新框架，其中将过程的形式参数约束到调用时的实际参数，而后在构造起的这一新环境的上下文中求</li>
<li>相对于一个给定的环境求值一个lambda表达式，将创建其一个过程对象，这个过程对象是一个序对，由该lambda表达式的征文和一个指向环境的指针组成，这一指针指向的就是创建这个过程对象时候的环境。</li>
</ol>
<h2 id="简单过程的应用">简单过程的应用</h2>
<h2 id="将框架看做局部状态的展台">将框架看做局部状态的展台</h2>
<h2 id="内部定义">内部定义</h2>
<ol>
<li>局部过程的名字不会与包容它们的过程之外的名字互相干扰，这是因为这些局部过程名 都是该过程运行时创建的框架里约束的，而不是在全局环境里约束的。</li>
<li>局部过程只需将包含着它们的过程的形参作为自由变量，就可以访问该过程的实际参数，这是因为对于局部过程体的求值所在的环境是外围过程求值所在的环境的下属。</li>
</ol>
<h1 id="用变动的数据做模拟">用变动的数据做模拟</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">append!</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">set-cdr!</span> <span class="p">(</span><span class="nv">last-pair</span> <span class="nv">x</span><span class="p">)</span> <span class="nv">y</span><span class="p">)</span>
  <span class="nv">x</span><span class="p">)</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">last-pair</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">null?</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">x</span><span class="p">))</span>
      <span class="nv">x</span>
      <span class="p">(</span><span class="nv">last-pair</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">x</span><span class="p">))))</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="共享与相等">共享与相等</h3>
<p>共享会导致多个对象都拥有同一个对象，修改一个会导致另外的也跟着被修改。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">eq?</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span><span class="c1">;检查是不是一个对象</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="改变也就是赋值">改变也就是赋值</h3>
<p>主要是构建了一前一后两个指针。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nc">cons</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">set-x!</span> <span class="nv">v</span><span class="p">)</span> <span class="p">(</span><span class="nv">set!</span> <span class="nv">x</span> <span class="nv">v</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">set-y!</span> <span class="nv">v</span><span class="p">)</span> <span class="p">(</span><span class="nv">set!</span> <span class="nv">y</span> <span class="nv">v</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">dispatch</span> <span class="nv">m</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">eq?</span> <span class="nv">m</span> <span class="ss">&#39;car</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span>
          <span class="p">((</span><span class="nv">eq?</span> <span class="nv">m</span> <span class="ss">&#39;cdr</span><span class="p">)</span> <span class="nv">y</span><span class="p">)</span>
          <span class="p">((</span><span class="nv">eq?</span> <span class="nv">m</span> <span class="ss">&#39;set-car!</span><span class="p">)</span> <span class="nv">set-x!</span><span class="p">)</span>
          <span class="p">((</span><span class="nv">eq?</span> <span class="nv">m</span> <span class="ss">&#39;set-cdr!</span><span class="p">)</span> <span class="nv">set-y!</span><span class="p">)</span>
          <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;Undefined operation -- CONS&#34;</span> <span class="nv">m</span><span class="p">))))</span>
  <span class="nv">dispatch</span><span class="p">)</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nv">z</span> <span class="ss">&#39;car</span><span class="p">))</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nv">z</span> <span class="ss">&#39;cdr</span><span class="p">))</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">set-car!</span> <span class="nv">z</span> <span class="nv">new-value</span><span class="p">)</span>
  <span class="p">((</span><span class="nv">z</span> <span class="ss">&#39;set-car!</span><span class="p">)</span> <span class="nv">new-value</span><span class="p">)</span>
  <span class="nv">z</span><span class="p">)</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">set-cdr!</span> <span class="nv">z</span> <span class="nv">new-value</span><span class="p">)</span>
  <span class="p">((</span><span class="nv">z</span> <span class="ss">&#39;set-cdr!</span><span class="p">)</span> <span class="nv">new-value</span><span class="p">)</span>
  <span class="nv">z</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="队列的表示">队列的表示</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="c1">;构造函数</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-queue</span><span class="p">)</span> <span class="p">(</span><span class="nc">cons</span> <span class="o">&#39;</span><span class="p">()</span> <span class="o">&#39;</span><span class="p">()))</span>
<span class="c1">;选择函数</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">front-queue</span> <span class="nv">queue</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">empty-queue?</span> <span class="nv">queue</span><span class="p">)</span>
      <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;FRONT called with an empty queue&#34;</span> <span class="nv">queue</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">car</span> <span class="p">(</span><span class="nv">front-ptr</span> <span class="nv">queue</span><span class="p">))))</span>
<span class="c1">;检测队列是否为空</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">empty-queue?</span> <span class="nv">queue</span><span class="p">)</span> <span class="p">(</span><span class="nv">null?</span> <span class="p">(</span><span class="nv">front-ptr</span> <span class="nv">queue</span><span class="p">)))</span>
<span class="c1">;改变函数</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">insert-queue!</span> <span class="nv">queue</span> <span class="nv">item</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">new-pair</span> <span class="p">(</span><span class="nc">cons</span> <span class="nv">item</span> <span class="o">&#39;</span><span class="p">())))</span>
    <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">empty-queue?</span> <span class="nv">queue</span><span class="p">)</span>
           <span class="p">(</span><span class="nv">set-front-ptr!</span> <span class="nv">queue</span> <span class="nv">new-pair</span><span class="p">)</span>
           <span class="p">(</span><span class="nv">set-rear-ptr!</span> <span class="nv">queue</span> <span class="nv">new-pair</span><span class="p">)</span>
           <span class="nv">queue</span><span class="p">)</span>
          <span class="p">(</span><span class="nv">else</span>
           <span class="p">(</span><span class="nv">set-cdr!</span> <span class="p">(</span><span class="nv">rear-ptr</span> <span class="nv">queue</span><span class="p">)</span> <span class="nv">new-pair</span><span class="p">)</span>
           <span class="p">(</span><span class="nv">set-rear-ptr!</span> <span class="nv">queue</span> <span class="nv">new-pair</span><span class="p">)</span>
           <span class="nv">queue</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">delete-queue!</span> <span class="nv">queue</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">empty-queue?</span> <span class="nv">queue</span><span class="p">)</span>
         <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;DELETE! called with an empty queue&#34;</span> <span class="nv">queue</span><span class="p">))</span>
        <span class="p">(</span><span class="nv">else</span>
         <span class="p">(</span><span class="nv">set-front-ptr!</span> <span class="nv">queue</span> <span class="p">(</span><span class="nf">cdr</span> <span class="p">(</span><span class="nv">front-ptr</span> <span class="nv">queue</span><span class="p">)))</span>
         <span class="nv">queue</span><span class="p">)))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">front-ptr</span> <span class="nv">queue</span><span class="p">)</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">queue</span><span class="p">))</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">rear-ptr</span> <span class="nv">queue</span><span class="p">)</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">queue</span><span class="p">))</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">set-front-ptr!</span> <span class="nv">queue</span> <span class="nv">item</span><span class="p">)</span> <span class="p">(</span><span class="nv">set-car!</span> <span class="nv">queue</span> <span class="nv">item</span><span class="p">))</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">set-rear-ptr!</span> <span class="nv">queue</span> <span class="nv">item</span><span class="p">)</span> <span class="p">(</span><span class="nv">set-car!</span> <span class="nv">queue</span> <span class="nv">item</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="表格的表示">表格的表示</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">lookup</span> <span class="nv">key</span> <span class="nv">table</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">record</span> <span class="p">(</span><span class="nf">assoc</span> <span class="nv">key</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">table</span><span class="p">))))</span>
    <span class="p">(</span><span class="k">if</span> <span class="nv">record</span>
        <span class="p">(</span><span class="nf">cdr</span> <span class="nv">record</span><span class="p">)</span>
        <span class="nv">false</span><span class="p">)))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nf">assoc</span> <span class="nv">key</span> <span class="nv">records</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">null?</span> <span class="nv">records</span><span class="p">)</span> <span class="nv">false</span><span class="p">)</span>
        <span class="p">((</span><span class="nv">equal?</span> <span class="nv">key</span> <span class="p">(</span><span class="nf">caar</span> <span class="nv">records</span><span class="p">))</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">records</span><span class="p">))</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="nf">assoc</span> <span class="nv">key</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">records</span><span class="p">)))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">insert!</span> <span class="nv">key</span> <span class="nv">value</span> <span class="nv">table</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">record</span> <span class="p">(</span><span class="nf">assoc</span> <span class="nv">key</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">table</span><span class="p">))))</span>
    <span class="p">(</span><span class="k">if</span> <span class="nv">record</span>
        <span class="p">(</span><span class="nv">set-cdr!</span> <span class="nv">record</span> <span class="nv">value</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">set-cdr!</span> <span class="nv">table</span>
                  <span class="p">(</span><span class="nc">cons</span> <span class="p">(</span><span class="nc">cons</span> <span class="nv">key</span> <span class="nv">value</span><span class="p">)</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">table</span><span class="p">))))))</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-table</span><span class="p">)</span>
  <span class="p">(</span><span class="nc">list</span> <span class="ss">&#39;*table*</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="数字电路的模拟器">数字电路的模拟器</h2>
<h1 id="并发时间本质是个问题">并发：时间本质是个问题</h1>
<p>和普通的并发问题是一致的。
串行化共享部分。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nv">s</span> <span class="nv">make-serializer</span><span class="p">)</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-account</span> <span class="nv">balance</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">withdraw</span> <span class="nv">amount</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nf">&gt;=</span> <span class="nv">balance</span> <span class="nv">amount</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">begin</span> <span class="p">(</span><span class="nv">set!</span> <span class="nv">balance</span> <span class="p">(</span><span class="nf">=</span> <span class="nv">balance</span> <span class="nv">amount</span><span class="p">))</span>
               <span class="nv">balance</span><span class="p">)</span>
        <span class="s">&#34;Insufficient funds&#34;</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">deposit</span> <span class="nv">amount</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">set!</span> <span class="nv">balance</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">balance</span> <span class="nv">amount</span><span class="p">))</span>
    <span class="nv">balance</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">protected</span> <span class="p">(</span><span class="nv">make-serializer</span><span class="p">)))</span>
    <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">dispatch</span> <span class="nv">m</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">eq?</span> <span class="nv">m</span> <span class="ss">&#39;withdraw</span><span class="p">)</span> <span class="p">(</span><span class="nv">protected</span> <span class="nv">withdraw</span><span class="p">))</span>
            <span class="p">((</span><span class="nv">eq?</span> <span class="nv">m</span> <span class="ss">&#39;deposit</span><span class="p">)</span> <span class="p">(</span><span class="nv">protected</span> <span class="nv">deposit</span><span class="p">))</span>
            <span class="p">((</span><span class="nv">eq?</span> <span class="nv">m</span> <span class="ss">&#39;balance</span><span class="p">)</span> <span class="nv">balance</span><span class="p">)</span>
            <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;Unknown request --MAKE-ACCOUNT&#34;</span>
                         <span class="nv">m</span><span class="p">))))</span>
    <span class="nv">dispatch</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="串行化的实现">串行化的实现</h2>
<p>互斥元同步机制。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-serializer</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">mutex</span> <span class="p">(</span><span class="nv">make-mutex</span><span class="p">)))</span>
    <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">p</span><span class="p">)</span>
      <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">serialized-p</span> <span class="o">.</span> <span class="nv">args</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">mutex</span> <span class="ss">&#39;acquire</span><span class="p">)</span>
        <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">val</span> <span class="p">(</span><span class="nf">apply</span> <span class="nv">p</span> <span class="nv">args</span><span class="p">)))</span>
          <span class="p">(</span><span class="nv">mutex</span> <span class="ss">&#39;release</span><span class="p">)</span>
          <span class="nv">val</span><span class="p">))</span>
      <span class="nv">serialized-p</span><span class="p">)))</span>


<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-mutex</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">cell</span> <span class="p">(</span><span class="nc">list</span> <span class="nv">false</span><span class="p">)))</span>
    <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">the-mutex</span> <span class="nv">m</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">eq?</span> <span class="nv">m</span> <span class="ss">&#39;acquire</span><span class="p">)</span>
             <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">test-and-set!</span> <span class="nv">cell</span><span class="p">)</span>
                 <span class="p">(</span><span class="nv">the-mutex</span> <span class="ss">&#39;acquire</span><span class="p">)))</span>
            <span class="p">((</span><span class="nv">eq?</span> <span class="nv">m</span> <span class="ss">&#39;release</span><span class="p">)</span> <span class="p">(</span><span class="nv">clea!</span> <span class="nv">cell</span><span class="p">))))</span>
    <span class="nv">the-mutex</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">test-and-set!</span> <span class="nv">cell</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">cell</span><span class="p">)</span>
      <span class="nv">true</span>
      <span class="p">(</span><span class="nv">begin</span> <span class="p">(</span><span class="nv">set-car!</span> <span class="nv">cell</span> <span class="nv">true</span><span class="p">)</span>
             <span class="nv">false</span><span class="p">)))</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>[读书笔记] sicp 第二章 带有通用型操作的系统</title>
    <link>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%B8%A6%E6%9C%89%E9%80%9A%E7%94%A8%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%9A%84%E7%B3%BB%E7%BB%9F/</link>
    <pubDate>Sat, 10 Sep 2016 08:32:54 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%B8%A6%E6%9C%89%E9%80%9A%E7%94%A8%E5%9E%8B%E6%93%8D%E4%BD%9C%E7%9A%84%E7%B3%BB%E7%BB%9F/</guid>
    <description><![CDATA[<h1 id="通用型算术运算">通用型算术运算</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">add</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nv">apply-generic</span> <span class="ss">&#39;add</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">sub</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nv">apply-generic</span> <span class="ss">&#39;sub</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">mul</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nv">apply-generic</span> <span class="ss">&#39;mul</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">div</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nv">apply-generic</span> <span class="ss">&#39;div</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">install-scheme-number-package</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">tag</span> <span class="nv">x</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">attach-tag</span> <span class="ss">&#39;scheme-number</span> <span class="nv">x</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;add</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">scheme-number</span> <span class="nv">scheme-number</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nv">tag</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))))</span>
  <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;sub</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">scheme-number</span> <span class="nv">scheme-number</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nv">tag</span> <span class="p">(</span><span class="nf">-</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))))</span>
  <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;mul</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">scheme-number</span> <span class="nv">scheme-number</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nv">tag</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))))</span>
  <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;div</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">scheme-number</span> <span class="nv">scheme-number</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nv">tag</span> <span class="p">(</span><span class="nf">/</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))))</span>
  <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;make</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">scheme-number</span> <span class="nv">scheme-number</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">tag</span> <span class="nv">x</span><span class="p">)))</span>
  <span class="ss">&#39;done</span><span class="p">)</span>
  
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-scheme-number</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">((</span><span class="nf">get</span> <span class="ss">&#39;make</span> <span class="ss">&#39;scheme-number</span><span class="p">)</span> <span class="nv">n</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>利用同样的方法可以加入有理数/复数等操作</p>
<h1 id="不同类型数据的组合">不同类型数据的组合</h1>
<p>处理跨类型的操作。
为每一种跨类型操作提供专门的过程处理，是可以，但是太麻烦。每添加一种类型，要增加太多过程。</p>
<h2 id="强制">强制</h2>
<p>类型转换处理能够解决一部分问题。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="c1">;实数转虚数</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">scheme-number-&gt;complex</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">make-complex-from-real-imag</span> <span class="p">(</span><span class="nv">contents</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">0</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>将这些强制过程安装到一个特护的表格里，用两个类型的名字作为索引。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">put-coercion</span> <span class="ss">&#39;scheme-number</span> <span class="ss">&#39;complex</span> <span class="nv">scheme-number-&gt;complex</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">apply-generic</span> <span class="nv">op</span> <span class="o">.</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">type-tags</span> <span class="p">(</span><span class="nf">map</span> <span class="nv">type-tag</span> <span class="nv">args</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">proc</span> <span class="p">(</span><span class="nf">get</span> <span class="nv">op</span> <span class="nv">type-tags</span><span class="p">)))</span>
      <span class="p">(</span><span class="k">if</span> <span class="nv">proc</span>
          <span class="p">(</span><span class="nf">apply</span> <span class="nv">proc</span> <span class="p">(</span><span class="nf">map</span> <span class="nv">contents</span> <span class="nv">args</span><span class="p">))</span>
          <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nf">=</span> <span class="p">(</span><span class="nf">length</span> <span class="nv">args</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span>
              <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">type1</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">type-tags</span><span class="p">))</span>
                    <span class="p">(</span><span class="nv">type2</span> <span class="p">(</span><span class="nf">cadr</span> <span class="nv">type-tags</span><span class="p">))</span>
                    <span class="p">(</span><span class="nv">a1</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">args</span><span class="p">))</span>
                    <span class="p">(</span><span class="nv">a2</span> <span class="p">(</span><span class="nf">cadr</span> <span class="nv">args</span><span class="p">)))</span>
                <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">t1-&gt;t2</span> <span class="p">(</span><span class="nv">get-coercion</span> <span class="nv">type1</span> <span class="nv">type2</span><span class="p">))</span>
                      <span class="p">(</span><span class="nv">t2-&gt;t1</span> <span class="p">(</span><span class="nv">get-coercion</span> <span class="nv">type2</span> <span class="nv">type1</span><span class="p">)))</span>
                  <span class="p">(</span><span class="nb">cond</span> <span class="p">(</span><span class="nv">t1-&gt;t2</span>
                         <span class="p">(</span><span class="nv">apply-generic</span> <span class="nv">op</span> <span class="p">(</span><span class="nv">t1-&gt;t2</span> <span class="nv">a1</span><span class="p">)</span> <span class="nv">a2</span><span class="p">))</span>
                        <span class="p">(</span><span class="nv">t2-&gt;t1</span>
                         <span class="p">(</span><span class="nv">apply-generic</span> <span class="nv">op</span> <span class="nv">a1</span> <span class="p">(</span><span class="nv">t2-&gt;t1</span> <span class="nv">a2</span><span class="p">)))</span>
                        <span class="p">(</span><span class="nv">else</span>
                         <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;No method for these types&#34;</span>
                                <span class="p">(</span><span class="nc">list</span> <span class="nv">op</span> <span class="nv">type-tags</span><span class="p">))))))</span>
              <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;No method for these types&#34;</span>
                     <span class="p">(</span><span class="nc">list</span> <span class="nv">op</span> <span class="nv">type-tags</span><span class="p">)))))))</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="类型的层次结构">类型的层次结构</h1>
<p>就是继承嘛。子类型有父类型的所有操作。
#层次结构的不足
可能产生菱形的层次结构。</p>
<p>在设计大型系统时，处理好一大批相互有关的类型而同时又能保持模块性，这是一个困难的问题，也是当前正在继续研究的领域。
编者注：这句话出现在书的第一版本。它的现在就像20年前写出时候正确。开发出一种有用的，具有一般意义的框架，以描述不同类型对象之间的关系(哲学中本体论)，看来是一件极其困难的工作。在10年前存在的混乱和今天存在的混乱之间的主要差异在于，今天已经有了一批各式各样的并不合适的本体理论，它们已经嵌入数量过多而又先天不足的各种程序设计语言里。举例来说，面向对象语言的大部分复杂性-以及当前各种面向对象语言之间细微的而且诗人迷惑的差异-的核心，就是类型之间通用型操作的处理。我们在第三章有关计算性对象的讨论中完全避免了这些问题。熟悉面向对象程序涉及到读者将会注意到，在第三章里关于局部状态说了许多东西，但是却根本没有提到“类”或者“继承”。事实上，我们的猜想是，如果没有知识表示和自动推理工作的帮助，这些问题是无法仅仅通过计算机语言设计的方式合理处理的。</p>]]></description>
</item><item>
    <title>[读书笔记] sicp 第二章 抽象数据的多重表示</title>
    <link>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A4%9A%E9%87%8D%E8%A1%A8%E7%A4%BA/</link>
    <pubDate>Sat, 10 Sep 2016 08:32:38 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A4%9A%E9%87%8D%E8%A1%A8%E7%A4%BA/</guid>
    <description><![CDATA[<p>对于一个数据对象可以能存在多种有用的表示形式，而且我们也希望所涉及的系统能够处理多种表示形式。
例子：复数的极坐标形式和直角坐标的形式
构造通用型过程：可以在不止一种数据表示上操作的过程。采用的技术：让它们在带有类型标志的数据对象上工作。也就是说，让数据对象包含着它们应该如何处理的明确信息。</p>
<h1 id="复数的表示">复数的表示</h1>
<p>为一个数据提供了多种操作，存在多种形式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">real-part</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">z</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">imag-part</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">z</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">magnitude</span> <span class="nv">z</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">sqrt</span> <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nv">square</span> <span class="p">(</span><span class="nv">real-part</span> <span class="nv">z</span><span class="p">))</span> <span class="p">(</span><span class="nv">square</span> <span class="p">(</span><span class="nv">imag-part</span> <span class="nv">z</span><span class="p">)))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">angle</span> <span class="nv">z</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">atan</span> <span class="p">(</span><span class="nv">imag-part</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nv">real-part</span> <span class="nv">z</span><span class="p">)))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-from-real-imag</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nc">cons</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-from-mag-ang</span> <span class="nv">r</span> <span class="nv">a</span><span class="p">)</span>
  <span class="p">(</span><span class="nc">cons</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">r</span> <span class="p">(</span><span class="nf">cos</span> <span class="nv">a</span><span class="p">))</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">r</span> <span class="p">(</span><span class="nf">sin</span> <span class="nv">a</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">add-complex</span> <span class="nv">z1</span> <span class="nv">z2</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">make-from-real-imag</span> <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nv">real-part</span> <span class="nv">z1</span><span class="p">)</span> <span class="p">(</span><span class="nv">real-part</span> <span class="nv">z2</span><span class="p">))</span>
                       <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nv">imag-part</span> <span class="nv">z1</span><span class="p">)</span> <span class="p">(</span><span class="nv">imag-part</span> <span class="nv">z2</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">sub-complex</span> <span class="nv">z1</span> <span class="nv">z2</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">make-from-real-imag</span> <span class="p">(</span><span class="nf">-</span> <span class="p">(</span><span class="nv">real-part</span> <span class="nv">z1</span><span class="p">)</span> <span class="p">(</span><span class="nv">real-part</span> <span class="nv">z2</span><span class="p">))</span>
                       <span class="p">(</span><span class="nf">-</span> <span class="p">(</span><span class="nv">imag-part</span> <span class="nv">z1</span><span class="p">)</span> <span class="p">(</span><span class="nv">imag-part</span> <span class="nv">z2</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">mul-complex</span> <span class="nv">z1</span> <span class="nv">z2</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">make-from-mag-ang</span> <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">magnitude</span> <span class="nv">z1</span><span class="p">)</span> <span class="p">(</span><span class="nv">magnitude</span> <span class="nv">z2</span><span class="p">))</span>
                     <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nv">angle</span> <span class="nv">z1</span><span class="p">)</span> <span class="p">(</span><span class="nv">angle</span> <span class="nv">z2</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">div-complex</span> <span class="nv">z1</span> <span class="nv">z2</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">make-from-mag-ang</span> <span class="p">(</span><span class="nf">/</span> <span class="p">(</span><span class="nv">magnitude</span> <span class="nv">z1</span><span class="p">)</span> <span class="p">(</span><span class="nv">magnitude</span> <span class="nv">z2</span><span class="p">))</span>
                     <span class="p">(</span><span class="nf">-</span> <span class="p">(</span><span class="nv">angle</span> <span class="nv">z1</span><span class="p">)</span> <span class="p">(</span><span class="nv">angle</span> <span class="nv">z2</span><span class="p">))))</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="带标志数据">带标志数据</h1>
<p>认识数据抽象的一种方式是将其看做”最小允诺原则“的一个应用。在实现上面的复数系统的时候，采用两种形式，由选择函数和构造函数形成的抽象屏障，使我们可以把为自己所用的数据对象选择具体表现形式的事情尽量往后推，而且还能够保持系统设计的最大灵活性。
方式，利用类型标志，来确定什么类型，选择什么函数。
增加类型标示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">attach-tag</span> <span class="nv">type-tag</span> <span class="nv">contents</span><span class="p">)</span>
  <span class="p">(</span><span class="nc">cons</span> <span class="nv">type-tag</span> <span class="nv">contents</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">type-tag</span> <span class="nv">datum</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">pair?</span> <span class="nv">datum</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">car</span> <span class="nv">datum</span><span class="p">)</span>
      <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;Bad tagged datum -- TYPE-TAG&#34;</span> <span class="nv">datum</span><span class="p">)))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">contents</span> <span class="nv">datum</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">pair?</span> <span class="nv">datum</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">cdr</span> <span class="nv">datum</span><span class="p">)</span>
      <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;Bad tagged datum -- CONTENTS&#34;</span> <span class="nv">datum</span><span class="p">)))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">rectangular?</span> <span class="nv">z</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">eq?</span> <span class="p">(</span><span class="nv">type-tag</span> <span class="nv">z</span><span class="p">)</span> <span class="ss">&#39;rectangular</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">polar?</span> <span class="nv">z</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">eq?</span> <span class="p">(</span><span class="nv">type-tag</span> <span class="nv">z</span><span class="p">)</span> <span class="ss">&#39;polar</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>修改新的直角坐标表示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">real-part-rectangular</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">z</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">imag-part-rectangular</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">z</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">magnitude-rectangular</span> <span class="nv">z</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">sqrt</span> <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nv">square</span> <span class="p">(</span><span class="nv">real-part-rectangular</span> <span class="nv">z</span><span class="p">))</span> <span class="p">(</span><span class="nv">square</span> <span class="p">(</span><span class="nv">imag-part-rectangular</span> <span class="nv">z</span><span class="p">)))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">angle-rectangular</span> <span class="nv">z</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">atan</span> <span class="p">(</span><span class="nv">imag-part-rectangular</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nv">real-part-rectangular</span> <span class="nv">z</span><span class="p">)))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-from-real-imag-rectangular</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nv">attach-tag</span> <span class="ss">&#39;rectangular</span> <span class="p">(</span><span class="nc">cons</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-from-mag-ang-rectangular</span> <span class="nv">r</span> <span class="nv">a</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">attach-tag</span> <span class="ss">&#39;rectangular</span> <span class="p">(</span><span class="nc">cons</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">r</span> <span class="p">(</span><span class="nf">cos</span> <span class="nv">a</span><span class="p">))</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">r</span> <span class="p">(</span><span class="nf">sin</span> <span class="nv">a</span><span class="p">)))))</span>
</code></pre></td></tr></table>
</div>
</div><p>修改极坐标的表现形式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">real-part-polat</span> <span class="nv">z</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">magnitude-polat</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nf">cos</span> <span class="p">(</span><span class="nv">angle-polat</span> <span class="nv">z</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">imag-part-polat</span> <span class="nv">z</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">magnitude-polat</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nf">sin</span> <span class="p">(</span><span class="nv">angle-polat</span> <span class="nv">z</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">magnitude-polat</span> <span class="nv">z</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">car</span> <span class="nv">z</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">angle-polat</span> <span class="nv">z</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">cdr</span> <span class="nv">z</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-from-real-imag-polatr</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">attach-tag</span> <span class="ss">&#39;polar</span>
              <span class="p">(</span><span class="nc">cons</span> <span class="p">(</span><span class="nf">sqrt</span> <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nv">square</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">square</span> <span class="nv">y</span><span class="p">)))</span>
                    <span class="p">(</span><span class="nf">atan</span> <span class="nv">y</span> <span class="nv">x</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-from-mag-ang-polat</span> <span class="nv">r</span> <span class="nv">a</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">attach-tag</span> <span class="ss">&#39;polar</span> <span class="p">(</span><span class="nc">cons</span> <span class="nv">r</span> <span class="nv">a</span><span class="p">)))</span>
</code></pre></td></tr></table>
</div>
</div><p>在通用选择函数都添加检查类型的标志，调用合适的函数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">real-patr</span> <span class="nv">z</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">rectangular?</span> <span class="nv">z</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">real-part-rectangular</span> <span class="p">(</span><span class="nv">contents</span> <span class="nv">z</span><span class="p">)))</span>
        <span class="p">((</span><span class="nv">polar?</span> <span class="nv">z</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">real-part-polat</span> <span class="p">(</span><span class="nv">contents</span> <span class="nv">z</span><span class="p">)))</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;Unknown type -- REAL-PART&#34;</span> <span class="nv">z</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">imag-patr</span> <span class="nv">z</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">rectangular?</span> <span class="nv">z</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">imag-part-rectangular</span> <span class="p">(</span><span class="nv">contents</span> <span class="nv">z</span><span class="p">)))</span>
        <span class="p">((</span><span class="nv">polar?</span> <span class="nv">z</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">imag-part-polat</span> <span class="p">(</span><span class="nv">contents</span> <span class="nv">z</span><span class="p">)))</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;Unknown type -- IMAG-PART&#34;</span> <span class="nv">z</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">magnitude</span> <span class="nv">z</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">rectangular?</span> <span class="nv">z</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">magnitude-rectangular</span> <span class="p">(</span><span class="nv">contents</span> <span class="nv">z</span><span class="p">)))</span>
        <span class="p">((</span><span class="nv">polar?</span> <span class="nv">z</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">magnitude-polat</span> <span class="p">(</span><span class="nv">contents</span> <span class="nv">z</span><span class="p">)))</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;Unknown type -- MAGNITUDE&#34;</span> <span class="nv">z</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">angle</span> <span class="nv">z</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">rectangular?</span> <span class="nv">z</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">angle-rectangular</span> <span class="p">(</span><span class="nv">contents</span> <span class="nv">z</span><span class="p">)))</span>
        <span class="p">((</span><span class="nv">polar?</span> <span class="nv">z</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">angle-polat</span> <span class="p">(</span><span class="nv">contents</span> <span class="nv">z</span><span class="p">)))</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;Unknown type -- ANGLE&#34;</span> <span class="nv">z</span><span class="p">))))</span>
</code></pre></td></tr></table>
</div>
</div><p>实现算数操作的时候不需要改变。还是原来的形式就可以。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">add-complex</span> <span class="nv">z1</span> <span class="nv">z2</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">make-from-real-imag</span> <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nv">real-part</span> <span class="nv">z1</span><span class="p">)</span> <span class="p">(</span><span class="nv">real-part</span> <span class="nv">z2</span><span class="p">))</span>
                       <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nv">imag-part</span> <span class="nv">z1</span><span class="p">)</span> <span class="p">(</span><span class="nv">imag-part</span> <span class="nv">z2</span><span class="p">))))</span>
</code></pre></td></tr></table>
</div>
</div><p>需要修改下构造函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-from-real-imag</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">make-from-real-imag-rectangular</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-from-mag-ang</span> <span class="nv">r</span> <span class="nv">a</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">make-from-mag-ang-polat</span> <span class="nv">r</span> <span class="nv">a</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="数据导向的程序设计和可加性">数据导向的程序设计和可加性</h1>
<p>检查一个数据项的类型，并据此去调用某个适当的过程称为基于类型的分派。
在系统设计中，这是一种获得模块性的强有力策略（可能oo是更好的方式，检测类型还是比较麻烦的）。
存在两个弱点：</p>
<ol>
<li>其中的通用型接口过程，必须知道素有的不同表示。需要检测类型，选择适当函数</li>
<li>独立的表现形式分别设计，需要拥有不同的名字。
那么这就导致，这种实现不具有可加性。在每一次增加一种新形式的时候，需要去修改原过程，修改类型判断，增加代码，修改过程名字。</li>
</ol>
<p>现在我们需要的是一种能够将系统设计进一步模块化的方法。一种称为数据导向的程序设计都编程技术提供了这种能力（其实在数据中保存能够处理数据的过程，就能够不用选择函数直接处理了嘛）。
（实际上这里讲的是一种注册机制）
假定存在put get来制造表格</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">install-rectangular-package</span><span class="p">)</span>
  <span class="c1">;internal procedures</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">real-part</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">z</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">imag-part</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">z</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-from-real-imag</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nc">cons</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">magnitude</span> <span class="nv">z</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">sqrt</span> <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nv">square</span> <span class="p">(</span><span class="nv">real-part</span> <span class="nv">z</span><span class="p">))</span> <span class="p">(</span><span class="nv">square</span> <span class="p">(</span><span class="nv">imag-part</span> <span class="nv">z</span><span class="p">)))))</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">angle</span> <span class="nv">z</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">atan</span> <span class="p">(</span><span class="nv">imag-part</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nv">real-part</span> <span class="nv">z</span><span class="p">)))</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-from-mag-ang</span> <span class="nv">r</span> <span class="nv">a</span><span class="p">)</span>
  <span class="p">(</span><span class="nc">cons</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">r</span> <span class="p">(</span><span class="nf">cos</span> <span class="nv">a</span><span class="p">))</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">r</span> <span class="p">(</span><span class="nf">sin</span> <span class="nv">a</span><span class="p">))))</span>
  <span class="c1">;interface the rest of the system</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">tag</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">attach-tag</span> <span class="ss">&#39;rectangular</span> <span class="nv">x</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;real-part</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">&#39;rectangular</span><span class="p">)</span> <span class="nv">real-part</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;imag-part</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">&#39;rectangular</span><span class="p">)</span> <span class="nv">imag-part</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;magnitude</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">&#39;rectangular</span><span class="p">)</span> <span class="nv">magnitude</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;angle</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">&#39;rectangular</span><span class="p">)</span> <span class="nv">angle</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;make-from-real-imag</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">&#39;rectangular</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nv">tag</span> <span class="p">(</span><span class="nv">make-from-real-imag</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))))</span>
  <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;make-from-mag-ang</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">&#39;rectangular</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">r</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nv">tag</span> <span class="p">(</span><span class="nv">make-from-mag-ang</span> <span class="nv">r</span> <span class="nv">a</span><span class="p">))))</span>
  <span class="ss">&#39;done</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">install-polar-package</span><span class="p">)</span>
  <span class="c1">;internal procedures</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">magnitude</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">z</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">angle</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">z</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-from-mag-ang</span> <span class="nv">r</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nc">cons</span> <span class="nv">r</span> <span class="nv">a</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">real-part</span> <span class="nv">z</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">magnitude</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nf">cos</span> <span class="p">(</span><span class="nv">angle</span> <span class="nv">z</span><span class="p">))))</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">imag-part</span> <span class="nv">z</span><span class="p">)</span>
   <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">magnitude</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nf">sin</span> <span class="p">(</span><span class="nv">angle</span> <span class="nv">z</span><span class="p">))))</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-from-real-imag</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
    <span class="p">(</span><span class="nc">cons</span> <span class="p">(</span><span class="nf">sqrt</span> <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nv">square</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">square</span> <span class="nv">y</span><span class="p">)))</span>
          <span class="p">(</span><span class="nf">atan</span> <span class="nv">y</span> <span class="nv">x</span><span class="p">)))</span>
  <span class="c1">;interface the rest of the system</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">tag</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">attach-tag</span> <span class="ss">&#39;polar</span> <span class="nv">x</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;real-part</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">&#39;polar</span><span class="p">)</span> <span class="nv">real-part</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;imag-part</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">&#39;polar</span><span class="p">)</span> <span class="nv">imag-part</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;magnitude</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">&#39;polar</span><span class="p">)</span> <span class="nv">magnitude</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;angle</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">&#39;polar</span><span class="p">)</span> <span class="nv">angle</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;make-from-real-imag</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">&#39;polar</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nv">tag</span> <span class="p">(</span><span class="nv">make-from-real-imag</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))))</span>
  <span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;make-from-mag-ang</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">&#39;polar</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">r</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nv">tag</span> <span class="p">(</span><span class="nv">make-from-mag-ang</span> <span class="nv">r</span> <span class="nv">a</span><span class="p">))))</span>
  <span class="ss">&#39;done</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>下面操作用于访问表格</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">apply-generic</span> <span class="nv">op</span> <span class="o">.</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">type-tags</span> <span class="p">(</span><span class="nf">map</span> <span class="nv">type-tag</span> <span class="nv">args</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">proc</span> <span class="p">(</span><span class="nf">get</span> <span class="nv">op</span> <span class="nv">type-tags</span><span class="p">)))</span>
      <span class="p">(</span><span class="k">if</span> <span class="nv">proc</span>
          <span class="p">(</span><span class="nf">apply</span> <span class="nv">proc</span> <span class="p">(</span><span class="nf">map</span> <span class="nv">contents</span> <span class="nv">args</span><span class="p">))</span>
          <span class="p">(</span><span class="kt">error</span>
           <span class="s">&#34;No method for these types -- APPLY-GENERIC&#34;</span>
           <span class="p">(</span><span class="nc">list</span> <span class="nv">op</span> <span class="nv">type-tags</span><span class="p">))))))</span>
</code></pre></td></tr></table>
</div>
</div><p>那么通用操作。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">real-part</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nv">apply-generic</span> <span class="ss">&#39;real-part</span> <span class="nv">z</span><span class="p">))</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">imag-part</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nv">apply-generic</span> <span class="ss">&#39;imag-part</span> <span class="nv">z</span><span class="p">))</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">magnitude</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nv">apply-generic</span> <span class="ss">&#39;magnitude</span> <span class="nv">z</span><span class="p">))</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">angle</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nv">apply-generic</span> <span class="ss">&#39;angle</span> <span class="nv">z</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-from-real-imag</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">((</span><span class="nf">get</span> <span class="ss">&#39;make-from-real-imag</span> <span class="ss">&#39;rectangular</span><span class="p">)</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-from-mag-ang</span> <span class="nv">r</span> <span class="nv">a</span><span class="p">)</span>
  <span class="p">((</span><span class="nf">get</span> <span class="ss">&#39;make-from-mag-ang</span> <span class="ss">&#39;polat</span><span class="p">)</span> <span class="nv">r</span> <span class="nv">a</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="消息传递">消息传递</h2>
<p>数据导向的程序设计，最关键的思想是通过显式的操作-类型表格的方式，管理程序中的各种通用性操作。上面使用的程序设计风格是一种基于类型进行分派的组织方式，其中让每个操作管理自己的分派。从效果上看，这种方式就是将操作-类型表哥格分解位一行一行，每个通用型过程表示表格中的一行。
另一种实现策略是将这一表格按列进行分解，不是采用一批“只能”操作区基于数据类型进行分派，而是采用“只能数据对象”，让它们基于操作名完成所需要的分派工作。
需要做的，将每一个数据对象表示为一个过程。（实际上类似于数据封装，每个数据对象保存专有的函数，利用虚函数就行了。思想是一致的。stl）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-from-real-imag</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">dispatch</span> <span class="nv">op</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">eq?</span> <span class="nv">op</span> <span class="ss">&#39;real-part</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span>
          <span class="p">((</span><span class="nv">eq?</span> <span class="nv">op</span> <span class="ss">&#39;iamg-part</span><span class="p">)</span> <span class="nv">y</span><span class="p">)</span>
          <span class="p">((</span><span class="nv">eq?</span> <span class="nv">op</span> <span class="ss">&#39;magnitude</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">sqrt</span> <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nv">square</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">square</span> <span class="nv">y</span><span class="p">))))</span>
          <span class="p">((</span><span class="nv">eq?</span> <span class="nv">op</span> <span class="ss">&#39;angle</span><span class="p">)</span> <span class="p">(</span><span class="nf">atan</span> <span class="nv">y</span> <span class="nv">x</span><span class="p">))</span>
          <span class="p">(</span><span class="nv">else</span>
           <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;Unkonown op -- MAKE-FROM-REAL-IMAG&#34;</span> <span class="nv">op</span><span class="p">))))</span>
<span class="nv">dispatch</span><span class="p">)</span>
<span class="c1">;查找函数</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">apply-generic</span> <span class="nv">op</span> <span class="nv">arg</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">arg</span> <span class="nv">op</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>这种风格的程序设计称为消息传递，将数据对象设想位一个实体，它以消息的方式接受所需要操作的名字。（设计模式里面有一种这种模式）。</p>]]></description>
</item><item>
    <title>[读书笔记] sicp 第二章 符号数据</title>
    <link>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%AC%A6%E5%8F%B7%E6%95%B0%E6%8D%AE/</link>
    <pubDate>Sat, 10 Sep 2016 08:32:26 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%AC%A6%E5%8F%B7%E6%95%B0%E6%8D%AE/</guid>
    <description><![CDATA[<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nc">list</span> <span class="ss">&#39;a</span> <span class="ss">&#39;b</span><span class="p">)</span>
<span class="p">(</span><span class="nv">eq?</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="符号求导">符号求导</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp">
<span class="c1">;e是变量吗</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">variable?</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">symbol?</span> <span class="nv">x</span><span class="p">))</span><span class="c1">;symbol?判断变量是不是符号</span>

<span class="c1">;v1和v2是同一个变量吗</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">same-variable?</span> <span class="nv">v1</span> <span class="nv">v2</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nv">variable?</span> <span class="nv">v1</span><span class="p">)</span> <span class="p">(</span><span class="nv">variable?</span> <span class="nv">v2</span><span class="p">)</span> <span class="p">(</span><span class="nv">eq?</span> <span class="nv">v1</span> <span class="nv">v2</span><span class="p">)))</span>

<span class="c1">;e是和式吗</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">sum?</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nv">pair?</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">eq?</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">x</span><span class="p">)</span> <span class="ss">&#39;+</span><span class="p">)))</span>

<span class="c1">;e的被加数</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">addend</span> <span class="nv">s</span><span class="p">)</span> <span class="p">(</span><span class="nf">cadr</span> <span class="nv">s</span><span class="p">))</span>

<span class="c1">;e的加数</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">augend</span> <span class="nv">s</span><span class="p">)</span> <span class="p">(</span><span class="nf">caddr</span> <span class="nv">s</span><span class="p">))</span>

<span class="c1">;构造起a1和a2的和式</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-sum</span> <span class="nv">a1</span> <span class="nv">a2</span><span class="p">)</span> <span class="p">(</span><span class="nc">list</span> <span class="ss">&#39;+</span> <span class="nv">a1</span> <span class="nv">a2</span><span class="p">))</span>

<span class="c1">;e是乘式吗</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">product?</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nv">pair?</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">eq?</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">x</span><span class="p">)</span> <span class="ss">&#39;*</span><span class="p">)))</span>

<span class="c1">;e的被乘数</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">multiplier</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nf">cadr</span> <span class="nv">p</span><span class="p">))</span>

<span class="c1">;e的乘数</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">multiplicand</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nf">caddr</span> <span class="nv">p</span><span class="p">))</span>

<span class="c1">;构造起来m1与m2的乘式</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-product</span> <span class="nv">m1</span> <span class="nv">m2</span><span class="p">)</span>
       <span class="p">(</span><span class="nc">list</span> <span class="ss">&#39;*</span> <span class="nv">m1</span> <span class="nv">m2</span><span class="p">))</span>

<span class="c1">;求导</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">deriv</span> <span class="nf">exp</span> <span class="nv">var</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">number?</span> <span class="nf">exp</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">((</span><span class="nv">variable?</span> <span class="nf">exp</span><span class="p">)</span>
         <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">same-variable?</span> <span class="nf">exp</span> <span class="nv">var</span><span class="p">)</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">))</span>
        <span class="p">((</span><span class="nv">sum?</span> <span class="nf">exp</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">make-sum</span> <span class="p">(</span><span class="nv">deriv</span> <span class="p">(</span><span class="nv">addend</span> <span class="nf">exp</span><span class="p">)</span> <span class="nv">var</span><span class="p">)</span>
                   <span class="p">(</span><span class="nv">deriv</span> <span class="p">(</span><span class="nv">augend</span> <span class="nf">exp</span><span class="p">)</span> <span class="nv">var</span><span class="p">)))</span>
        <span class="p">((</span><span class="nv">product?</span> <span class="nf">exp</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">make-sum</span>
          <span class="p">(</span><span class="nv">make-product</span> <span class="p">(</span><span class="nv">multiplier</span> <span class="nf">exp</span><span class="p">)</span>
                        <span class="p">(</span><span class="nv">deriv</span> <span class="p">(</span><span class="nv">multiplicand</span> <span class="nf">exp</span><span class="p">)</span> <span class="nv">var</span><span class="p">))</span>
          <span class="p">(</span><span class="nv">make-product</span> <span class="p">(</span><span class="nv">deriv</span> <span class="p">(</span><span class="nv">multiplier</span> <span class="nf">exp</span><span class="p">)</span> <span class="nv">var</span><span class="p">)</span>
                        <span class="p">(</span><span class="nv">multiplicand</span> <span class="nf">exp</span><span class="p">))))</span>
        <span class="p">(</span><span class="nv">else</span>
         <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;unknown expression type -- DERIV&#34;</span> <span class="nf">exp</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">deriv</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">+</span> <span class="nv">x</span> <span class="mi">3</span><span class="p">)</span> <span class="ss">&#39;x</span><span class="p">)</span>
<span class="p">(</span><span class="nv">deriv</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">*</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="ss">&#39;x</span><span class="p">)</span>
<span class="p">(</span><span class="nv">deriv</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">x</span> <span class="mi">3</span><span class="p">))</span> <span class="ss">&#39;x</span><span class="p">)</span>

<span class="o">&#39;</span><span class="p">(</span><span class="nf">+</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">)</span>
<span class="o">&#39;</span><span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nf">*</span> <span class="mi">1</span> <span class="nv">y</span><span class="p">))</span>
<span class="o">&#39;</span><span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nf">+</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">))</span> <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nf">*</span> <span class="mi">1</span> <span class="nv">y</span><span class="p">))</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">x</span> <span class="mi">3</span><span class="p">)))</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="集合的表示">集合的表示</h1>
<h2 id="集合作为未排序的表">集合作为未排序的表</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="c1">;判断是不是表成员</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">element-of-set?</span> <span class="nv">x</span> <span class="nf">set</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">null?</span> <span class="nf">set</span><span class="p">)</span> <span class="nv">false</span><span class="p">)</span>
        <span class="p">((</span><span class="nv">equal?</span> <span class="nv">x</span> <span class="p">(</span><span class="nf">car</span> <span class="nf">set</span><span class="p">))</span> <span class="nv">true</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="nv">element-of-set?</span> <span class="nv">x</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nf">set</span><span class="p">)))))</span>
<span class="c1">;向表增加一项</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">adjoin-set</span> <span class="nv">x</span> <span class="nf">set</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">element-of-set?</span> <span class="nv">x</span> <span class="nf">set</span><span class="p">)</span>
      <span class="nf">set</span>
      <span class="p">(</span><span class="nc">cons</span> <span class="nv">x</span> <span class="nf">set</span><span class="p">)))</span>
<span class="c1">;合并</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">intersection-set</span> <span class="nv">set1</span> <span class="nv">set2</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">or</span> <span class="p">(</span><span class="nv">null?</span> <span class="nv">set1</span><span class="p">)</span> <span class="p">(</span><span class="nv">null?</span> <span class="nv">set2</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">())</span>
        <span class="p">((</span><span class="nv">element-of-set?</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">set1</span><span class="p">)</span> <span class="nv">set2</span><span class="p">)</span>
         <span class="p">(</span><span class="nc">cons</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">set1</span><span class="p">)</span>
               <span class="p">(</span><span class="nv">intersection-set</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">set1</span><span class="p">)</span> <span class="nv">set2</span><span class="p">)))</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="nv">intersection-set</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">set1</span><span class="p">)</span> <span class="nv">set2</span><span class="p">))))</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="集合作为排序的表">集合作为排序的表</h2>
<p>排序的存在的好处就是减少复杂度</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">element-of-set?</span> <span class="nv">x</span> <span class="nf">set</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">null?</span> <span class="nf">set</span><span class="p">)</span> <span class="nv">false</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">=</span> <span class="nv">x</span> <span class="p">(</span><span class="nf">car</span> <span class="nf">set</span><span class="p">))</span> <span class="nv">true</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">&lt;</span> <span class="nv">x</span> <span class="p">(</span><span class="nf">car</span> <span class="nf">set</span><span class="p">))</span> <span class="nv">false</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="nv">element-of-set?</span> <span class="nv">x</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nf">set</span><span class="p">)))))</span>
    
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">intersection-set</span> <span class="nv">set1</span> <span class="nv">set2</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nv">null?</span> <span class="nv">set1</span><span class="p">)</span> <span class="p">(</span><span class="nv">null?</span> <span class="nv">set2</span><span class="p">))</span>
       <span class="o">&#39;</span><span class="p">()</span>
       <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">x1</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">set1</span><span class="p">))</span> <span class="p">(</span><span class="nv">x2</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">set2</span><span class="p">)))</span>
         <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nf">=</span> <span class="nv">x1</span> <span class="nv">x2</span><span class="p">)</span>
                <span class="p">(</span><span class="nc">cons</span> <span class="nv">x1</span>
                      <span class="p">(</span><span class="nv">intersection-set</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">set1</span><span class="p">)</span>
                                        <span class="p">(</span><span class="nf">cdr</span> <span class="nv">set2</span><span class="p">))))</span>
               <span class="p">((</span><span class="nf">&lt;</span> <span class="nv">x1</span> <span class="nv">x2</span><span class="p">)</span>
                <span class="p">(</span><span class="nv">intersection-set</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">set1</span><span class="p">)</span> <span class="nv">set2</span><span class="p">))</span>
               <span class="p">((</span><span class="nf">&lt;</span> <span class="nv">x2</span> <span class="nv">x1</span><span class="p">)</span>
                <span class="p">(</span><span class="nv">intersection-set</span> <span class="nf">set</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">set2</span><span class="p">)))))))</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="集合作为二叉树">集合作为二叉树</h2>
<p>有序二叉树</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">entry</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">tree</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">left-branch</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nf">cadr</span> <span class="nv">tree</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">right-branch</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nf">caddr</span> <span class="nv">tree</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-tree</span> <span class="nv">entry</span> <span class="nv">left</span> <span class="nv">right</span><span class="p">)</span>
  <span class="p">(</span><span class="nc">list</span> <span class="nv">entry</span> <span class="nv">left</span> <span class="nv">right</span><span class="p">))</span>
  
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">element-of-set?</span> <span class="nv">x</span> <span class="nf">set</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">null?</span> <span class="nf">set</span><span class="p">)</span> <span class="nv">false</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">=</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">entry</span> <span class="nf">set</span><span class="p">))</span> <span class="nv">true</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">&lt;</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">entry</span> <span class="nf">set</span><span class="p">))</span>
         <span class="p">(</span><span class="nv">element-of-set?</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">left-branch</span> <span class="nf">set</span><span class="p">)))</span>
        <span class="p">((</span><span class="nf">&gt;</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">entry</span> <span class="nf">set</span><span class="p">))</span>
         <span class="p">(</span><span class="nv">element-of-set?</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">right-branch</span> <span class="nf">set</span><span class="p">)))))</span>
<span class="c1">;插入要找到正确位置</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">adjoin-set</span> <span class="nv">x</span> <span class="nf">set</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">null?</span> <span class="nf">set</span><span class="p">)</span> <span class="p">(</span><span class="nv">make-tree</span> <span class="nv">x</span> <span class="o">&#39;</span><span class="p">()</span> <span class="o">&#39;</span><span class="p">()))</span>
        <span class="p">((</span><span class="nf">=</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">entry</span> <span class="nf">set</span><span class="p">))</span> <span class="nf">set</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">&lt;</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">entry</span> <span class="nf">set</span><span class="p">))</span>
         <span class="p">(</span><span class="nv">make-tree</span> <span class="p">(</span><span class="nv">entry</span> <span class="nf">set</span><span class="p">)</span>
                    <span class="p">(</span><span class="nv">adjoin-set</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">left-branch</span> <span class="nf">set</span><span class="p">))</span>
                    <span class="p">(</span><span class="nv">right-branch</span> <span class="nf">set</span><span class="p">)))</span>
        <span class="p">((</span><span class="nf">&gt;</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">entry</span> <span class="nf">set</span><span class="p">))</span>
         <span class="p">(</span><span class="nv">make-tree</span> <span class="p">(</span><span class="nv">entry</span> <span class="nf">set</span><span class="p">)</span>
                    <span class="p">(</span><span class="nv">left-branch</span> <span class="nf">set</span><span class="p">)</span>
                    <span class="p">(</span><span class="nv">adjoin-set</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">right-branch</span> <span class="nf">set</span><span class="p">))))))</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="huffman编码树">huffman编码树</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="c1">;树的表示</span>
<span class="c1">;leaf 符号 权重</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-leaf</span> <span class="nc">symbol</span> <span class="nv">weight</span><span class="p">)</span>
  <span class="p">(</span><span class="nc">list</span> <span class="ss">&#39;leaf</span> <span class="nc">symbol</span> <span class="nv">weight</span><span class="p">))</span>
  
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">leaf?</span> <span class="nv">object</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">eq?</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">object</span><span class="p">)</span> <span class="ss">&#39;leaf</span><span class="p">))</span>
  
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">symbol-leaf</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">cadr</span> <span class="nv">x</span><span class="p">))</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">weight-leaf</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">caddr</span> <span class="nv">x</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-code-tree</span> <span class="nv">left</span> <span class="nv">right</span><span class="p">)</span>
  <span class="p">(</span><span class="nc">list</span> <span class="nv">left</span>
        <span class="nv">right</span>
        <span class="p">(</span><span class="nf">append</span> <span class="p">(</span><span class="nv">symbols</span> <span class="nv">left</span><span class="p">)</span> <span class="p">(</span><span class="nv">symbols</span> <span class="nv">right</span><span class="p">))</span>
        <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nv">weight</span> <span class="nv">left</span><span class="p">)</span> <span class="p">(</span><span class="nv">weight</span> <span class="nv">right</span><span class="p">))))</span>
        
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">left-branch</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">tree</span><span class="p">))</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">right-branch</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nf">cadr</span> <span class="nv">tree</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">symbols</span> <span class="nv">tree</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">leaf?</span> <span class="nv">tree</span><span class="p">)</span>
      <span class="p">(</span><span class="nc">list</span> <span class="p">(</span><span class="nv">symbol-leaf</span> <span class="nv">tree</span><span class="p">))</span>
      <span class="p">(</span><span class="nf">caddr</span> <span class="nv">tree</span><span class="p">)))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">weight</span> <span class="nv">tree</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">leaf?</span> <span class="nv">tree</span><span class="p">)</span>
      <span class="p">(</span><span class="nv">weight-leaf</span> <span class="nv">tree</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">caddr</span> <span class="nv">tree</span><span class="p">)))</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="解码过程">解码过程</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">decode</span> <span class="nv">bits</span> <span class="nv">tree</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">decode-1</span> <span class="nv">bits</span> <span class="nv">current-branch</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">null?</span> <span class="nv">bits</span><span class="p">)</span>
        <span class="o">&#39;</span><span class="p">()</span>
        <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">next-branch</span>
               <span class="p">(</span><span class="nv">choose-branch</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">bits</span><span class="p">)</span> <span class="nv">current-branch</span><span class="p">)))</span>
          <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">leaf?</span> <span class="nv">next-branch</span><span class="p">)</span>
              <span class="p">(</span><span class="nc">cons</span> <span class="p">(</span><span class="nv">symbol-leaf</span> <span class="nv">next-branch</span><span class="p">)</span>
                    <span class="p">(</span><span class="nv">decode-1</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">bits</span><span class="p">)</span> <span class="nv">tree</span><span class="p">))</span>
              <span class="p">(</span><span class="nv">decode-1</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">bits</span><span class="p">)</span> <span class="nv">next-branch</span><span class="p">)))))</span>
  <span class="p">(</span><span class="nv">decode-1</span> <span class="nv">bits</span> <span class="nv">tree</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">choose-branch</span> <span class="kt">bit</span> <span class="nv">branch</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nf">=</span> <span class="kt">bit</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nv">left-branch</span> <span class="nv">branch</span><span class="p">))</span>
        <span class="p">((</span><span class="nf">=</span> <span class="kt">bit</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nv">right-branch</span> <span class="nv">branch</span><span class="p">))</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;bad bit -- CHOOSE-BRANCH&#34;</span> <span class="kt">bit</span><span class="p">))))</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="带权重的集合">带权重的集合</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">adjoin-set</span> <span class="nv">x</span> <span class="nf">set</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">null?</span> <span class="nf">set</span><span class="p">)</span> <span class="p">(</span><span class="nc">list</span> <span class="nv">x</span><span class="p">))</span>
        <span class="p">((</span><span class="nf">&lt;</span> <span class="p">(</span><span class="nv">weight</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">weight</span> <span class="p">(</span><span class="nf">car</span> <span class="nf">set</span><span class="p">)))</span> <span class="p">(</span><span class="nc">cons</span> <span class="nv">x</span> <span class="nf">set</span><span class="p">))</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="nc">cons</span> <span class="p">(</span><span class="nf">car</span> <span class="nf">set</span><span class="p">)</span>
                    <span class="p">(</span><span class="nv">adjoin-set</span> <span class="nv">x</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nf">set</span><span class="p">))))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-leaf-set</span> <span class="nv">pairs</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">null?</span> <span class="nv">pairs</span><span class="p">)</span>
      <span class="o">&#39;</span><span class="p">()</span>
      <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">pair</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">pairs</span><span class="p">)))</span>
        <span class="p">(</span><span class="nv">adjoin-set</span> <span class="p">(</span><span class="nv">make-leaf</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">pair</span><span class="p">)</span>
                               <span class="p">(</span><span class="nf">cadr</span> <span class="nv">pair</span><span class="p">))</span>
                    <span class="p">(</span><span class="nv">make-leaf-set</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">pairs</span><span class="p">))))))</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>[读书笔记] sicp 第二章 构造数据抽象</title>
    <link>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%9E%84%E9%80%A0%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/</link>
    <pubDate>Sat, 10 Sep 2016 08:32:08 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%9E%84%E9%80%A0%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/</guid>
    <description><![CDATA[<p>第一章关注的是计算过程，以及过程在程序中所扮演的角色。
本章，讲将数据对象组合起来，形成复合数据的方式。
复合数据：能够提升我们在设计程序时所位于的概念层次，提高设计的模块性，增强语言的表达能力。
将程序中处理数据对象的表示的部分与处理数据对象的使用部分相互 隔离的技术，称为数据抽象。
复合数据中的一个关键性思想是闭包的概念，也就是说，用于组合数据对象的粘合剂不但能用于组合基本的数据对象，也能组合复合数据对象。
复合数据对象能够称为以混合与匹配的方式组合程序模块的方便接口。</p>
<h1 id="数据抽象引导">数据抽象引导</h1>
<p>数据抽象的基本思想，就是设法构造出一些使用复合数据对象的程序，使它们就像是在抽象数据上操作一样。</p>
<h2 id="有理数的算数运算">有理数的算数运算</h2>
<p>假定存在构造函数与选择函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">make-rat</span> <span class="nv">n</span> <span class="nv">d</span><span class="p">)</span><span class="c1">;返回一个有理数，分子是整数n，分母是整数d</span>
<span class="p">(</span><span class="nv">numer</span> <span class="nv">x</span><span class="p">)</span><span class="c1">;返回有理数x的分子</span>
<span class="p">(</span><span class="nv">denom</span> <span class="nv">x</span><span class="p">))</span><span class="c1">;返回有理数x的分母</span>
</code></pre></td></tr></table>
</div>
</div><p>那么可以定义以下的规则</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="c1">;加法</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">add-rat</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">make-rat</span> <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">numer</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">denom</span> <span class="nv">y</span><span class="p">))</span>
               <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">numer</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nv">denom</span> <span class="nv">x</span><span class="p">)))</span>
            <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">denom</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">denom</span> <span class="nv">y</span><span class="p">))))</span>
<span class="c1">;减法</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">sub-rat</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">make-rat</span> <span class="p">(</span><span class="nf">-</span> <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">numer</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">denom</span> <span class="nv">y</span><span class="p">))</span>
               <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">numer</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nv">denom</span> <span class="nv">x</span><span class="p">)))</span>
            <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">denom</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">denom</span> <span class="nv">y</span><span class="p">))))</span>
<span class="c1">;乘法</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">mul-rat</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">make-rat</span> <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">numer</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">numer</span> <span class="nv">y</span><span class="p">))</span>
            <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">denom</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">denom</span> <span class="nv">y</span><span class="p">))))</span>
<span class="c1">;除法</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">div-rat</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">make-rat</span> <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">numer</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">denom</span> <span class="nv">y</span><span class="p">))</span>
            <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">denom</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">numer</span> <span class="nv">y</span><span class="p">))))</span>
<span class="c1">;等于？</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">equal-rat?</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">=</span> <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">numer</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">denom</span> <span class="nv">y</span><span class="p">))</span>
     <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">numer</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nv">denom</span> <span class="nv">x</span><span class="p">))))</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="序对">序对</h3>
<p>lisp存在基本过程cons，car,cdr。存在下列关系</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nv">x</span> <span class="p">(</span><span class="nc">cons</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">))</span>

<span class="p">(</span><span class="nf">car</span> <span class="nv">x</span><span class="p">)</span>
<span class="mi">1</span>

<span class="p">(</span><span class="nf">cdr</span> <span class="nv">x</span><span class="p">)</span>
<span class="mi">2</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="有理数的表示">有理数的表示</h3>
<p>利用序对完成有理数的实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-rat</span> <span class="nv">n</span> <span class="nv">d</span><span class="p">)</span>
  <span class="p">(</span><span class="nc">cons</span> <span class="nv">n</span> <span class="nv">d</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">numer</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">car</span> <span class="nv">x</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">denom</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">cdr</span> <span class="nv">x</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>打印有理数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">print-rat</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">newline</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">display</span> <span class="p">(</span><span class="nv">numer</span> <span class="nv">x</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">display</span> <span class="s">&#34;/&#34;</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">display</span> <span class="p">(</span><span class="nv">denom</span> <span class="nv">x</span><span class="p">)))</span>
</code></pre></td></tr></table>
</div>
</div><p>化简有理数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">make-rat</span> <span class="nv">n</span> <span class="nv">d</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">g</span> <span class="p">(</span><span class="nf">gcd</span> <span class="nv">n</span> <span class="nv">d</span><span class="p">)))</span>
  <span class="p">(</span><span class="nc">cons</span> <span class="p">(</span><span class="nf">/</span> <span class="nv">n</span> <span class="nv">g</span><span class="p">)</span> <span class="p">(</span><span class="nf">/</span> <span class="nv">d</span> <span class="nv">g</span><span class="p">))))</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="抽象屏障">抽象屏障</h2>
<p>每一个层次中国策构成了所定义的抽象 屏障的接口，联系起系统中的不同层次。使得系统简单，修改容易。</p>
<h2 id="数据意味着什么">数据意味着什么</h2>
<p>一般而言，我们总可以将数据定义为一组适当的选择函数和构造函数，以及使这些过程成为一套合法的表示，它们必须满足一组特定的条件。
使用过程实现cons car cdr</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nc">cons</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">dispatch</span> <span class="nv">m</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nf">=</span> <span class="nv">m</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span>
          <span class="p">((</span><span class="nf">=</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">y</span><span class="p">)</span>
          <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;Argument not 0 or 1 -- CONS&#34;</span> <span class="nv">m</span><span class="p">))))</span>
  <span class="nv">dispatch</span><span class="p">)</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nv">z</span> <span class="mi">0</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">z</span><span class="p">)</span> <span class="p">(</span><span class="nv">z</span> <span class="mi">1</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>尽管实际语言的实现不是上面的形式，但是我们定义的函数已经能够正常完成工作了。过程和数据的界限被模糊，满足关于序对的描述。</p>
<h1 id="层次性数据和闭包性质">层次性数据和闭包性质</h1>
<p>某种组合数据对象的操作满足闭包性质，那就是说，通过它组合起数据对象得到的结果本身可以通过同样的操作再进行组合。闭包性质是任何一种组合功能的威力的关键要素，因为它使我们能够建立起层次性的结构，这种结构由一些部分构成，而其中的各个部分又是由它们的部分构成，并且可以继续下去。</p>
<h2 id="序列的表示">序列的表示</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nc">list</span> <span class="nv">&lt;a1&gt;</span> <span class="nv">&lt;a2&gt;...&lt;an&gt;</span><span class="p">)</span>
<span class="c1">;等于</span>
<span class="p">(</span><span class="nc">cons</span> <span class="nv">&lt;a1&gt;</span> <span class="p">(</span><span class="nc">cons</span> <span class="nv">&lt;a2&gt;</span> <span class="p">(</span><span class="nc">cons</span> <span class="o">...</span> <span class="p">(</span><span class="nc">cons</span> <span class="nv">&lt;an&gt;</span> <span class="no">nil</span><span class="p">)</span><span class="o">...</span><span class="p">)))</span>
</code></pre></td></tr></table>
</div>
</div><p>nil是拉丁词汇nihil的缩写，拉丁语表示什么也没有，表示序对的链结束，代表一个不包含任何元素的序对，空表。</p>
<h3 id="表操作">表操作</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="c1">;第n个元素</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">list-ref</span> <span class="nv">items</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nf">=</span> <span class="nv">n</span> <span class="mi">0</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">car</span> <span class="nv">items</span><span class="p">)</span>
      <span class="p">(</span><span class="nv">list-ref</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">items</span><span class="p">)</span> <span class="p">(</span><span class="nf">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="nv">squares</span> <span class="p">(</span><span class="nc">list</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">9</span> <span class="mi">16</span> <span class="mi">25</span><span class="p">))</span>

<span class="p">(</span><span class="nv">list-ref</span> <span class="nv">squares</span> <span class="mi">3</span><span class="p">)</span>
<span class="mi">16</span>

<span class="c1">;表长 递归</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nf">length</span> <span class="nv">items</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">null?</span> <span class="nv">items</span><span class="p">)</span>
      <span class="mi">0</span>
      <span class="p">(</span><span class="nf">+</span> <span class="mi">1</span> <span class="p">(</span><span class="nf">length</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">items</span><span class="p">)))))</span>
  
<span class="c1">;表长 迭代</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nf">length</span> <span class="nv">items</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">length-iter</span> <span class="nv">a</span> <span class="nf">count</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">null?</span> <span class="nv">a</span><span class="p">)</span>
        <span class="nf">count</span>
        <span class="p">(</span><span class="nv">length-iter</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nf">+</span> <span class="mi">1</span> <span class="nf">count</span><span class="p">))))</span>
  <span class="p">(</span><span class="nv">length-iter</span> <span class="nv">items</span> <span class="mi">0</span><span class="p">))</span>
  
<span class="p">(</span><span class="nf">length</span> <span class="nv">squares</span><span class="p">)</span>
<span class="mi">5</span>

<span class="p">(</span><span class="nv">define</span> <span class="nv">odds</span> <span class="p">(</span><span class="nc">list</span> <span class="mi">1</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">7</span><span class="p">))</span>

<span class="c1">;组合两个表</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nf">append</span> <span class="nv">list1</span> <span class="nv">list2</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">null?</span> <span class="nv">list1</span><span class="p">)</span>
      <span class="nv">list2</span>
      <span class="p">(</span><span class="nc">cons</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">list1</span><span class="p">)</span> <span class="p">(</span><span class="nf">append</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">list1</span><span class="p">)</span> <span class="nv">list2</span><span class="p">))))</span>

<span class="p">(</span><span class="nf">append</span> <span class="nv">odds</span> <span class="nv">squares</span><span class="p">)</span>
<span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">7</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">9</span> <span class="mi">16</span> <span class="mi">25</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="对表的映射">对表的映射</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="c1">;DrRacket中未定义nil，若要使用nil</span>
<span class="p">(</span><span class="nv">define</span> <span class="no">nil</span> <span class="o">&#39;</span><span class="p">())</span>

<span class="c1">;缩放</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">scale-list</span> <span class="nv">items</span> <span class="nv">factor</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">null?</span> <span class="nv">items</span><span class="p">)</span>
      <span class="no">nil</span>
      <span class="p">(</span><span class="nc">cons</span> <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">items</span><span class="p">)</span> <span class="nv">factor</span><span class="p">)</span>
            <span class="p">(</span><span class="nv">scale-list</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">items</span><span class="p">)</span> <span class="nv">factor</span><span class="p">))))</span>
            
<span class="p">(</span><span class="nv">scale-list</span> <span class="p">(</span><span class="nc">list</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">10</span><span class="p">)</span>
<span class="o">&#39;</span><span class="p">(</span><span class="mi">10</span> <span class="mi">20</span> <span class="mi">30</span> <span class="mi">40</span> <span class="mi">50</span><span class="p">)</span>

<span class="c1">;更一般的过程</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nf">map</span> <span class="nv">proc</span> <span class="nv">items</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">null?</span> <span class="nv">items</span><span class="p">)</span>
      <span class="no">nil</span>
      <span class="p">(</span><span class="nc">cons</span> <span class="p">(</span><span class="nv">proc</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">items</span><span class="p">))</span>
            <span class="p">(</span><span class="nf">map</span> <span class="nv">proc</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">items</span><span class="p">)))))</span>
            
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">scale-list</span> <span class="nv">items</span> <span class="nv">factor</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">map</span> <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">x</span> <span class="nv">factor</span><span class="p">))</span>
       <span class="nv">items</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>map构建一层抽象屏障，将实现表变换的过程的实现，与如何提取表中元素以及组合结果的细节隔离开。</p>
<h2 id="层次性结构">层次性结构</h2>
<p>树的分支，而那些本身也是序列的元素就形成了树中的子树。
实现count-leaver</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">count-leaves</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">null?</span> <span class="nv">x</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">not</span> <span class="p">(</span><span class="nv">pair?</span> <span class="nv">x</span><span class="p">))</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nv">count-leaves</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">x</span><span class="p">))</span>
                 <span class="p">(</span><span class="nv">count-leaves</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">x</span><span class="p">))))))</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="对树的映射">对树的映射</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">sacle-tree</span> <span class="nv">tree</span> <span class="nv">factor</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">null?</span> <span class="nv">tree</span><span class="p">)</span> <span class="no">nil</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">not</span> <span class="p">(</span><span class="nv">pair?</span> <span class="nv">tree</span><span class="p">))</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">tree</span> <span class="nv">factor</span><span class="p">))</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="nc">cons</span> <span class="p">(</span><span class="nv">sacle-tree</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">tree</span><span class="p">)</span> <span class="nv">factor</span><span class="p">)</span>
                    <span class="p">(</span><span class="nv">sacle-tree</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">tree</span><span class="p">)</span> <span class="nv">factor</span><span class="p">)))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">scale-tree</span> <span class="nv">tree</span> <span class="nv">factor</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">map</span>  <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">sub-tree</span><span class="p">)</span>
          <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">pair?</span> <span class="nv">sub-tree</span><span class="p">)</span>
              <span class="p">(</span><span class="nv">scale-tree</span> <span class="nv">sub-tree</span> <span class="nv">factor</span><span class="p">)</span>
              <span class="p">(</span><span class="nf">*</span> <span class="nv">sub-tree</span> <span class="nv">factor</span><span class="p">)))</span>
        <span class="nv">tree</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="序列作为一种约定的接口">序列作为一种约定的接口</h2>
<p>强有力的设计原理-使用约定的接口。
考虑下面的过程，它以一棵树为参数，计算出那些值为奇数的叶子的平方和。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">sum-odd-squares</span> <span class="nv">tree</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">null?</span> <span class="nv">tree</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">not</span> <span class="p">(</span><span class="nv">pair?</span> <span class="nv">tree</span><span class="p">))</span>
         <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">odd?</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nv">square</span> <span class="nv">tree</span><span class="p">)</span> <span class="mi">0</span><span class="p">))</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nv">sum-odd-squares</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">tree</span><span class="p">))</span>
                 <span class="p">(</span><span class="nv">sum-odd-squares</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">tree</span><span class="p">))))))</span>
</code></pre></td></tr></table>
</div>
</div><p>偶数的斐波那契数列的表。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">even-fibs</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">next</span> <span class="nv">k</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nf">&gt;</span> <span class="nv">k</span> <span class="nv">n</span><span class="p">)</span>
        <span class="no">nil</span>
        <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">f</span> <span class="p">(</span><span class="nv">fib</span> <span class="nv">k</span><span class="p">)))</span>
          <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">even?</span> <span class="nv">f</span><span class="p">)</span>
              <span class="p">(</span><span class="nc">cons</span> <span class="nv">f</span> <span class="p">(</span><span class="nv">next</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">k</span> <span class="nv">l</span><span class="p">)))</span>
              <span class="p">(</span><span class="nv">next</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">k</span> <span class="mi">1</span><span class="p">))))))</span>
  <span class="p">(</span><span class="nv">next</span> <span class="mi">0</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>虽然表面上结构差异大，但是计算的抽象描述存在极大的相似性。
都是从枚举器开始，产生给定的树的树叶组成的信号。信号流过过滤器，过滤掉不符合规则的信号。通过一个映射，转换每一个元素。积累器把所有的元素组合起来。
但是上面的程序是将以上的操作混合在一起。</p>
<h3 id="序列操作">序列操作</h3>
<p>修改map过程</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nf">map</span> <span class="nv">square</span> <span class="p">(</span><span class="nc">list</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">))</span>
<span class="p">(</span><span class="mi">1</span> <span class="mi">4</span> <span class="mi">9</span> <span class="mi">16</span> <span class="mi">25</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>过滤器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">filter</span> <span class="nv">predicate</span> <span class="nc">sequence</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">null?</span> <span class="nc">sequence</span><span class="p">)</span> <span class="no">nil</span><span class="p">)</span>
        <span class="p">((</span><span class="nv">predicate</span> <span class="p">(</span><span class="nf">car</span> <span class="nc">sequence</span><span class="p">))</span>
         <span class="p">(</span><span class="nb">cond</span> <span class="p">(</span><span class="nf">car</span> <span class="nc">sequence</span><span class="p">)</span><span class="c1">;真就保留</span>
               <span class="p">(</span><span class="nv">filter</span> <span class="nv">predicate</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nc">sequence</span><span class="p">))))</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="nv">filter</span> <span class="nv">predicate</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nc">sequence</span><span class="p">)))))</span>
</code></pre></td></tr></table>
</div>
</div><p>积累器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">accumulate</span> <span class="nv">op</span> <span class="nv">initial</span> <span class="nc">sequence</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">null?</span> <span class="nc">sequence</span><span class="p">)</span>
      <span class="nv">initial</span>
      <span class="p">(</span><span class="nv">op</span> <span class="p">(</span><span class="nf">car</span> <span class="nc">sequence</span><span class="p">)</span>
          <span class="p">(</span><span class="nv">accumulate</span> <span class="nv">op</span> <span class="nv">initial</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nc">sequence</span><span class="p">)))))</span>
</code></pre></td></tr></table>
</div>
</div><p>fib枚举器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">enumerate-interval</span> <span class="nv">low</span> <span class="nv">high</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nf">&gt;</span> <span class="nv">low</span> <span class="nv">high</span><span class="p">)</span>
      <span class="no">nil</span>
      <span class="p">(</span><span class="nc">cons</span> <span class="nv">low</span> <span class="p">(</span><span class="nv">enumerate-interval</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">low</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">high</span><span class="p">))))</span>
</code></pre></td></tr></table>
</div>
</div><p>树叶枚举器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">enumerate-tree</span> <span class="nv">tree</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">null?</span> <span class="nv">tree</span><span class="p">)</span> <span class="no">nil</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">not</span> <span class="p">(</span><span class="nv">pair?</span> <span class="nv">tree</span><span class="p">))</span> <span class="p">(</span><span class="nc">list</span> <span class="nv">tree</span><span class="p">))</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="nf">append</span> <span class="p">(</span><span class="nv">enumerate-tree</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">tree</span><span class="p">))</span>
                      <span class="p">(</span><span class="nv">enumerate-tree</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">tree</span><span class="p">))))))</span>
</code></pre></td></tr></table>
</div>
</div><p>重构</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">sum-odd-squares</span> <span class="nv">tree</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">accumulate</span> <span class="nf">+</span>
              <span class="mi">0</span>
              <span class="p">(</span><span class="nf">map</span> <span class="nv">square</span>
                   <span class="p">(</span><span class="nv">filter</span> <span class="nv">odd?</span>
                           <span class="p">(</span><span class="nv">enumerate-tree</span> <span class="nv">tree</span><span class="p">)))))</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">even-fibs</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">accumulate</span> <span class="nc">cons</span>
              <span class="no">nil</span>
              <span class="p">(</span><span class="nv">filter</span> <span class="nv">even?</span>
                      <span class="p">(</span><span class="nf">map</span> <span class="nv">fib</span>
                           <span class="p">(</span><span class="nv">enumerate-interval</span> <span class="mi">0</span> <span class="nv">n</span><span class="p">)))))</span>
</code></pre></td></tr></table>
</div>
</div><p>通过提供一个标准不见的库，并使这些不见都有着一些能以灵活方式互相连接的约定接口，将能够进一步推动模块化设计。
在工程设计中，模块化结构是控制复杂性的一种威力巨大的策略。（类似西门子的自动化软件 plc等）</p>]]></description>
</item><item>
    <title>[读书笔记] sicp 第一章 构造过程抽象</title>
    <link>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%9E%84%E9%80%A0%E8%BF%87%E7%A8%8B%E6%8A%BD%E8%B1%A1/</link>
    <pubDate>Sat, 10 Sep 2016 08:31:58 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-sicp-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%9E%84%E9%80%A0%E8%BF%87%E7%A8%8B%E6%8A%BD%E8%B1%A1/</guid>
    <description><![CDATA[<h1 id="关于读书的目的">关于读书的目的</h1>
<p>很多时候对于一本比较复杂的书，你在到达一定阶段的时候是难以读进去的。Sicp我曾经在几个月前尝试的去读了第一章。很快就读完的，但是对于其的理解实在浅薄。
我希望在这一次的阅读的过程中能够顺利的过一次不本书有所收获。
在接下来的日子里，我会记录下读书笔记以及习题的解答。
这是一个开始。</p>
<h1 id="构造过程抽象">构造过程抽象</h1>
<p>每一种强有力的语言为此提供了三种机制</p>
<ul>
<li>基本的表达形式， 用于表示语言所关心的最简单的个体。</li>
<li>组合的方法，通过它们可以从简单的东西出发构建出复合的元素。</li>
<li>抽象的方法，通过它们可以为 复合对象命名，并将它们作为单元去操作。</li>
</ul>
<p>在程序设计中，我们需要处理两类元素：过程和数据。非形式的说，数据是一种我们希望去操作的”东西“，而过程是有关操作这些数据的规则的描述。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nf">*</span> <span class="p">(</span> <span class="nf">+</span> <span class="mi">2</span> <span class="p">(</span> <span class="nf">*</span> <span class="mi">5</span> <span class="mi">6</span> <span class="p">))</span>
	<span class="p">(</span> <span class="nf">+</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">7</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">square</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">x</span> <span class="nv">x</span><span class="p">))</span>

<span class="p">(</span><span class="nv">square</span> <span class="mi">21</span><span class="p">)</span>
<span class="mi">441</span>

</code></pre></td></tr></table>
</div>
</div><h2 id="过程应用的带换模型">过程应用的带换模型</h2>
<p>对于符合过程，过程的应用的计算过程是：</p>
<ul>
<li>将复合过程应用于实际参数，就是在将过程体中的每个形参用相应的实参取代之后，对这一过程求值。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">f</span> <span class="mi">5</span><span class="p">)</span>

<span class="p">(</span><span class="nv">sum-of-squares</span><span class="p">(</span><span class="nf">+</span> <span class="mi">5</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">*</span> <span class="mi">5</span> <span class="mi">2</span><span class="p">))</span>

<span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nv">square</span> <span class="mi">6</span><span class="p">)</span> <span class="p">(</span><span class="nv">square</span> <span class="mi">10</span><span class="p">))</span>

<span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nf">*</span> <span class="mi">6</span> <span class="mi">6</span><span class="p">)</span> <span class="p">(</span><span class="nf">*</span> <span class="mi">10</span> <span class="mi">10</span><span class="p">))</span>

<span class="p">(</span><span class="nf">+</span> <span class="mi">36</span> <span class="mi">100</span><span class="p">)</span>

<span class="mi">136</span>
</code></pre></td></tr></table>
</div>
</div><p>这种计算过程称为过程应用的代换模型。</p>
<h3 id="应用系和正则序">应用系和正则序</h3>
<p>完全展开而后归约的求值模型是正则序求值。
先求值参数而后应用的方式为应用序求值。</p>
<h3 id="条件语法">条件语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp">
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nf">abs</span> <span class="nv">x</span><span class="p">)</span>
	<span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nf">&gt;</span> <span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span>
			  <span class="p">((</span> <span class="nf">=</span> <span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
			  <span class="p">((</span> <span class="nf">&lt;</span> <span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nf">-</span> <span class="nv">x</span><span class="p">))))</span>


<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nf">abs</span> <span class="nv">x</span><span class="p">)</span>
	<span class="p">(</span><span class="nb">cond</span> <span class="p">((</span> <span class="nf">&lt;</span> <span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nf">-</span> <span class="nv">x</span><span class="p">))</span>
			  <span class="p">(</span><span class="nv">else</span> <span class="nv">x</span><span class="p">)))</span>



<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nf">abs</span> <span class="nv">x</span><span class="p">)</span>
	<span class="p">(</span><span class="k">if</span>	<span class="p">(</span> <span class="nf">&lt;</span> <span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> 
        <span class="p">(</span><span class="nf">-</span> <span class="nv">x</span><span class="p">)</span>
		<span class="nv">x</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="过程与它们所产生的计算">过程与它们所产生的计算</h2>
<p>一个过程也就是一种模式，它描述了一个计算过程的局部演化方法。</p>
<p>两种描述阶乘的方式。（lisp的迭代不是说形式上的迭代，实际上如果说调用本身的层面上还是递归，但是思想是迭代的思想，应用序来看的话。）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">factorial</span> <span class="nv">n</span><span class="p">)</span>
	<span class="p">(</span><span class="k">if</span>  <span class="p">(</span><span class="nf">=</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">)</span>
		 <span class="mi">1</span>
		 <span class="p">(</span><span class="nf">*</span> <span class="nv">n</span> <span class="p">(</span><span class="nv">factorial</span> <span class="p">(</span><span class="nf">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">)))))</span>

<span class="c1">;迭代的形式</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">factorial</span> <span class="nv">n</span><span class="p">)</span>
	<span class="p">(</span><span class="nv">fact-iter</span> <span class="mi">1</span> <span class="mi">1</span> <span class="nv">n</span><span class="p">))</span>

<span class="c1">;应用序的话会优先求值，那么就不会有上面的方式那么深的层次，尝试求值都能够求出来。</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">fact-iter</span> <span class="nv">product</span> <span class="nv">counter</span> <span class="nv">max-count</span><span class="p">)</span>
	<span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nf">&gt;</span> <span class="nv">counter</span> <span class="nv">max-count</span><span class="p">)</span>
		<span class="nv">product</span>
		<span class="p">(</span><span class="nv">fact-iter</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">counter</span> <span class="nv">product</span><span class="p">)</span>
					   <span class="p">(</span><span class="nf">+</span> <span class="nv">counter</span> <span class="mi">1</span><span class="p">)</span>
					   <span class="nv">max-count</span><span class="p">)))</span>
</code></pre></td></tr></table>
</div>
</div><p>迭代计算过程就是那种其状态可以用固定数据的状态变量描述的计算过程，而与此同时，又存在着一套固定的规则，描述了计算过程从一个状态到下一个状态的转换时候，这些变量的更新方式。还有一个结束检测，它描述着一计算过程应该终止的条件。
在计算n!时候，所需要的计算不走随着n线性增长，这种过程称为线性迭代过程。
在迭代的情况下，在计算过程中的任何一点，那几个程序变量都提供了有关计算状态的一个完整描述。而递归计算过程而言，这里存在着另外的一些隐含信息，它们并未保存在程序变量里面，而是由解释器维持着，指明了在所推迟的运算所形成的链条里的漫游中，这以计算过程处在合出。链条越长，需要保存的信息越多。</p>
<h3 id="换零钱的实现">换零钱的实现</h3>
<p>采用递归过程：
将总数为a的现金换成n中硬币的不同方式的数目等于</p>
<ul>
<li>将现金数a换成除第一种硬币之外的所有其他硬币的不同方式数目，加上</li>
<li>将现金数a-d换成所有种类的硬币的不同数目，其中d是第一种硬币的币值</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">first-denomination</span> <span class="nv">kinds-of-coins</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nf">=</span> <span class="nv">kinds-of-coins</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">=</span> <span class="nv">kinds-of-coins</span> <span class="mi">2</span><span class="p">)</span> <span class="mi">5</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">=</span> <span class="nv">kinds-of-coins</span> <span class="mi">3</span><span class="p">)</span> <span class="mi">10</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">=</span> <span class="nv">kinds-of-coins</span> <span class="mi">4</span><span class="p">)</span> <span class="mi">25</span><span class="p">)</span>
        <span class="p">((</span><span class="nf">=</span> <span class="nv">kinds-of-coins</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">50</span><span class="p">)))</span>
  
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">cc</span> <span class="nv">amount</span> <span class="nv">kinds-of-coins</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nf">=</span> <span class="nv">amount</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">((</span><span class="nb">or</span> <span class="p">(</span><span class="nf">&lt;</span> <span class="nv">amount</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nf">=</span> <span class="nv">kinds-of-coins</span> <span class="mi">0</span><span class="p">))</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nv">cc</span> <span class="nv">amount</span>
                     <span class="p">(</span><span class="nf">-</span> <span class="nv">kinds-of-coins</span> <span class="mi">1</span><span class="p">))</span>
                 <span class="p">(</span><span class="nv">cc</span> <span class="p">(</span><span class="nf">-</span> <span class="nv">amount</span>
                        <span class="p">(</span><span class="nv">first-denomination</span> <span class="nv">kinds-of-coins</span><span class="p">))</span>
                     <span class="nv">kinds-of-coins</span><span class="p">)))))</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">count-change</span> <span class="nv">amount</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">cc</span> <span class="nv">amount</span> <span class="mi">5</span><span class="p">))</span>

<span class="p">(</span><span class="nv">count-change</span> <span class="mi">100</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="增长的阶">增长的阶</h3>
<p>空间与时间的消耗。大O记号</p>
<p>一个例子求幂</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">square</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">*</span> <span class="nv">n</span> <span class="nv">n</span><span class="p">))</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">fast-expt</span> <span class="nv">b</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nf">=</span> <span class="nv">n</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">((</span><span class="nv">even?</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nv">square</span> <span class="p">(</span><span class="nv">fast-expt</span> <span class="nv">b</span> <span class="p">(</span><span class="nf">/</span> <span class="nv">n</span> <span class="mi">2</span><span class="p">))))</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">b</span> <span class="p">(</span><span class="nv">fast-expt</span> <span class="nv">b</span> <span class="p">(</span><span class="nf">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">))))))</span>
<span class="p">(</span><span class="nv">fast-expt</span> <span class="mi">2</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="最大公约数">最大公约数</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nf">gcd</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span> <span class="nf">=</span> <span class="nv">b</span> <span class="mi">0</span><span class="p">)</span>
        <span class="nv">a</span>
        <span class="p">(</span><span class="nf">gcd</span> <span class="nv">b</span> <span class="p">(</span><span class="nv">remainder</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))))</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="素数检测">素数检测</h3>
<p>两种计算方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">square</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">*</span> <span class="nv">n</span> <span class="nv">n</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">smallest-divisor</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">find-divisor</span> <span class="nv">n</span> <span class="mi">2</span><span class="p">))</span>
  
<span class="c1">;寻找最小因子</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">find-divisor</span> <span class="nv">n</span> <span class="nv">test-divisor</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nf">&gt;</span> <span class="p">(</span><span class="nv">square</span> <span class="nv">test-divisor</span><span class="p">)</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">n</span><span class="p">)</span><span class="c1">;根号n为检测上限</span>
        <span class="p">((</span><span class="nv">divides?</span> <span class="nv">test-divisor</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">test-divisor</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">else</span> <span class="p">(</span><span class="nv">find-divisor</span> <span class="nv">n</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">test-divisor</span> <span class="mi">1</span><span class="p">)))))</span><span class="c1">;查找下一个</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">divides?</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">=</span> <span class="p">(</span><span class="nv">remainder</span> <span class="nv">b</span> <span class="nv">a</span><span class="p">)</span> <span class="mi">0</span><span class="p">))</span>
  
<span class="c1">;最小因子等于本身的时候为素数</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">prime</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">=</span> <span class="nv">n</span> <span class="p">(</span><span class="nv">smallest-divisor</span> <span class="nv">n</span><span class="p">)))</span>
</code></pre></td></tr></table>
</div>
</div><p>费马检测</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">square</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">*</span> <span class="nv">n</span> <span class="nv">n</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">expmod</span> <span class="nv">base</span> <span class="nf">exp</span> <span class="nv">m</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nf">=</span> <span class="nf">exp</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">((</span><span class="nv">even?</span> <span class="nf">exp</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">remainder</span> <span class="p">(</span><span class="nv">square</span> <span class="p">(</span><span class="nv">expmod</span> <span class="nv">base</span> <span class="p">(</span><span class="nf">/</span> <span class="nf">exp</span> <span class="mi">2</span><span class="p">)</span> <span class="nv">m</span><span class="p">))</span>
                    <span class="nv">m</span><span class="p">))</span>
        <span class="p">(</span><span class="nv">else</span>
         <span class="p">(</span><span class="nv">remainder</span> <span class="p">(</span><span class="nf">*</span> <span class="nv">base</span> <span class="p">(</span><span class="nv">expmod</span> <span class="nv">base</span> <span class="p">(</span><span class="nf">-</span> <span class="nf">exp</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">m</span><span class="p">))</span>
                    <span class="nv">m</span><span class="p">))))</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">try-it</span> <span class="nv">a</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">=</span> <span class="p">(</span><span class="nv">expmod</span> <span class="nv">a</span> <span class="nv">n</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">a</span><span class="p">))</span>

<span class="c1">;使用随机数来测试</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">fermat-test</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">try-it</span> <span class="p">(</span><span class="nf">+</span> <span class="mi">1</span> <span class="p">(</span><span class="nf">random</span> <span class="p">(</span><span class="nf">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">)))</span> <span class="nv">n</span><span class="p">))</span>

<span class="c1">;通过多次的费马测试来概率的推断是不是位素数</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">fast-prime?</span> <span class="nv">n</span> <span class="nv">times</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nf">=</span> <span class="nv">times</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">true</span><span class="p">)</span>
        <span class="p">((</span><span class="nv">fermat-test</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nv">fast-prime?</span> <span class="nv">n</span> <span class="p">(</span><span class="nf">-</span> <span class="nv">times</span> <span class="mi">1</span><span class="p">)))</span>
        <span class="p">(</span><span class="nv">else</span> <span class="nv">false</span><span class="p">)))</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="高阶函数抽象">高阶函数抽象</h2>
<p>以过程作为参数。以过程作为返回值。这类操作过程的过程称为高阶过程。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="err">#</span><span class="nv">lang</span> <span class="nv">racket</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">cube</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">*</span> <span class="nv">n</span> <span class="nv">n</span> <span class="nv">n</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">sum</span> <span class="nv">term</span> <span class="nv">a</span> <span class="nv">next</span> <span class="nv">b</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nf">&gt;</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
      <span class="mi">0</span>
      <span class="p">(</span><span class="nf">+</span> <span class="p">(</span><span class="nv">term</span> <span class="nv">a</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">sum</span> <span class="nv">term</span> <span class="p">(</span><span class="nv">next</span> <span class="nv">a</span><span class="p">)</span> <span class="nv">next</span> <span class="nv">b</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">inc</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">sum-cubes</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">sum</span> <span class="nv">cube</span> <span class="nv">a</span> <span class="nv">inc</span> <span class="nv">b</span><span class="p">))</span>

<span class="p">(</span><span class="nv">sum-cubes</span> <span class="mi">1</span> <span class="mi">10</span><span class="p">)</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">integral</span> <span class="nv">f</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">dx</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">add-dx</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">x</span> <span class="nv">dx</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">*</span> <span class="p">(</span><span class="nv">sum</span> <span class="nv">f</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">a</span> <span class="p">(</span><span class="nf">/</span> <span class="nv">dx</span> <span class="mf">2.0</span><span class="p">))</span> <span class="nv">add-dx</span> <span class="nv">b</span><span class="p">)))</span>

<span class="p">(</span><span class="nv">integral</span> <span class="nv">cube</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mf">0.01</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="用lambda构造过程">用lambda构造过程</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">((</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">+</span> <span class="mi">4</span> <span class="nv">x</span><span class="p">)))</span>
</code></pre></td></tr></table>
</div>
</div><p>匿名的过程，对于一些简单的过程构造适合</p>
<h3 id="用let创建局部变了">用let创建局部变了</h3>
<p>一种方法是利用辅助过程去约束局部变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">f</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">a</span> <span class="p">(</span><span class="nf">+</span> <span class="mi">1</span> <span class="nv">x</span><span class="p">))</span>
        <span class="p">(</span><span class="nv">b</span> <span class="p">(</span><span class="nf">+</span> <span class="mi">2</span> <span class="nv">y</span><span class="p">)))</span>
  <span class="p">(</span><span class="nf">+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)))</span>
<span class="p">(</span><span class="nv">f</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="过程作为一般性的方法">过程作为一般性的方法</h3>
<h4 id="通过区间折半寻找方程的根">通过区间折半寻找方程的根</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span><span class="p">(</span><span class="nv">close-enough?</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">&lt;</span> <span class="p">(</span><span class="nf">abs</span> <span class="p">(</span><span class="nf">-</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))</span> <span class="mf">0.001</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">average</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">/</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="mi">2</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nf">search</span> <span class="nv">f</span> <span class="nv">neg-point</span> <span class="nv">pos-point</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">midpoint</span> <span class="p">(</span><span class="nv">average</span> <span class="nv">neg-point</span> <span class="nv">pos-point</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">close-enough?</span> <span class="nv">neg-point</span> <span class="nv">pos-point</span><span class="p">)</span>
        <span class="nv">midpoint</span>
        <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">test-value</span> <span class="p">(</span><span class="nv">f</span> <span class="nv">midpoint</span><span class="p">)))</span>
          <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">positive?</span> <span class="nv">test-value</span><span class="p">)</span>
                 <span class="p">(</span><span class="nf">search</span> <span class="nv">f</span> <span class="nv">neg-point</span> <span class="nv">midpoint</span><span class="p">))</span>
                <span class="p">((</span><span class="nv">negative?</span> <span class="nv">test-value</span><span class="p">)</span>
                 <span class="p">(</span><span class="nf">search</span> <span class="nv">f</span> <span class="nv">midpoint</span> <span class="nv">pos-point</span><span class="p">))</span>
                <span class="p">(</span><span class="nv">else</span> <span class="nv">midpoint</span><span class="p">))))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">half-interval-method</span> <span class="nv">f</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">a-value</span> <span class="p">(</span><span class="nv">f</span> <span class="nv">a</span><span class="p">))</span>
        <span class="p">(</span><span class="nv">b-value</span> <span class="p">(</span><span class="nv">f</span> <span class="nv">b</span><span class="p">)))</span>
    <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">and</span> <span class="p">(</span><span class="nv">negative?</span> <span class="nv">a-value</span><span class="p">)</span> <span class="p">(</span><span class="nv">positive?</span> <span class="nv">b-value</span><span class="p">))</span>
           <span class="p">(</span><span class="nf">search</span> <span class="nv">f</span> <span class="nv">a</span> <span class="p">))</span>
          <span class="p">((</span><span class="nb">and</span> <span class="p">(</span><span class="nv">negative?</span> <span class="nv">b-value</span><span class="p">)</span> <span class="p">(</span><span class="nv">positive?</span> <span class="nv">a-value</span><span class="p">))</span>
           <span class="p">(</span><span class="nf">search</span> <span class="nv">f</span> <span class="nv">b</span> <span class="nv">a</span><span class="p">))</span>
          <span class="p">(</span><span class="nv">else</span>
           <span class="p">(</span><span class="kt">error</span> <span class="s">&#34;Values are not of opposite sign&#34;</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)))))</span>

<span class="p">(</span><span class="nv">half-interval-method</span> <span class="nf">sin</span> <span class="mf">2.0</span> <span class="mf">4.0</span><span class="p">)</span>          
</code></pre></td></tr></table>
</div>
</div><h3 id="寻找函数不动点">寻找函数不动点</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nv">tolerance</span> <span class="mf">0.00001</span><span class="p">)</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">average</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">/</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="mi">2</span><span class="p">))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">fixed-point</span> <span class="nv">f</span> <span class="nv">first-guess</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">close-enought?</span> <span class="nv">v1</span> <span class="nv">v2</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">&lt;</span> <span class="p">(</span><span class="nf">abs</span> <span class="p">(</span><span class="nf">-</span> <span class="nv">v1</span> <span class="nv">v2</span><span class="p">))</span> <span class="nv">tolerance</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">try</span> <span class="nv">guess</span><span class="p">)</span>
    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">next</span> <span class="p">(</span><span class="nv">f</span> <span class="nv">guess</span><span class="p">)))</span>
      <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">close-enought?</span> <span class="nv">guess</span> <span class="nv">next</span><span class="p">)</span>
          <span class="nv">next</span>
          <span class="p">(</span><span class="nv">try</span> <span class="nv">next</span><span class="p">))))</span>
  <span class="p">(</span><span class="nv">try</span> <span class="nv">first-guess</span><span class="p">))</span>

<span class="p">(</span><span class="nv">fixed-point</span> <span class="nf">cos</span> <span class="mf">1.0</span><span class="p">)</span>
<span class="c1">;不收敛</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nf">sqrt</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">fixed-point</span> <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nf">/</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
               <span class="mf">1.0</span><span class="p">))</span>
<span class="c1">;引入阻尼</span>
<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nf">sqrt</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">fixed-point</span> <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nv">average</span> <span class="nv">y</span> <span class="p">(</span><span class="nf">/</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)))</span>
               <span class="mf">1.0</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="过程作为返回值">过程作为返回值</h3>
<p>新的开方方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">average-damp</span> <span class="nv">f</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">average</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">f</span> <span class="nv">x</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nf">sqrt</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">fixed-point</span> <span class="p">(</span><span class="nv">average-damp</span> <span class="p">(</span><span class="nb">lambda</span><span class="p">(</span><span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nf">/</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)))))</span>
</code></pre></td></tr></table>
</div>
</div><p>新的牛顿法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">deriv</span> <span class="nv">g</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">/</span> <span class="p">(</span><span class="nf">-</span> <span class="p">(</span><span class="nf">+</span> <span class="nv">x</span> <span class="nv">dx</span><span class="p">)</span> <span class="p">(</span><span class="nv">g</span> <span class="nv">x</span><span class="p">))</span>
       <span class="nv">dx</span><span class="p">)))</span>

<span class="p">(</span><span class="nv">define</span> <span class="p">(</span><span class="nv">newton-transform</span> <span class="nv">g</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">-</span> <span class="nv">x</span> <span class="p">(</span><span class="nf">/</span> <span class="p">(</span><span class="nv">g</span> <span class="nv">x</span><span class="p">)</span> <span class="p">((</span><span class="nv">deriv</span> <span class="nv">g</span><span class="p">)</span> <span class="nv">x</span><span class="p">)))))</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="抽象和第一级过程">抽象和第一级过程</h1>
<p>复合过程是一种至关重要的抽象机制，因为它使得我们能将一般性的计算方法，用这一程序设计语言里的元素明确描述。现在我们又看到，高阶函数能如何去操作这一些一般性的方法，以便建立起进一步的抽象。
作为编程者，我们应该对这类可能性保持高度敏感，设法从中识别出程序里的基本抽象，基于它们去进一步构造，程序设计专家指导的如何根据工作中的情况，去选择合适的抽象层次。但是，能够基于这种抽象去思考确实是最重要的，只有这样才可能在新的上下文中去应用它们。高阶的过程的重要性，就在于使我们能够显式的用程序设计语言的要素去描述这些抽象，使我们能够像操作其他计算元素一样去操作它们。
一般而言，程序设计语言总会对计算元素的可能使用方式强加上某些显式。带有最少限制的元素被称为具有第一级状态。第一级元素的某些权利与特权包括:</p>
<ul>
<li>可以用变量命名</li>
<li>可以提供给过程作为参数</li>
<li>可以由过程作为结果返回</li>
<li>可以包含在数据结构中
lisp给了过程完全的第一级的状态。</li>
</ul>]]></description>
</item></channel>
</rss>
