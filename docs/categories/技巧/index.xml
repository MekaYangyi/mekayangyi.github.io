<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>技巧 - Category - 鉴心</title>
        <link>http://coderyang.com/categories/%E6%8A%80%E5%B7%A7/</link>
        <description>技巧 - Category - 鉴心</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 14 Nov 2020 16:04:59 &#43;0000</lastBuildDate><atom:link href="http://coderyang.com/categories/%E6%8A%80%E5%B7%A7/" rel="self" type="application/rss+xml" /><item>
    <title>高性能libcurl</title>
    <link>http://coderyang.com/libcurl/</link>
    <pubDate>Sat, 14 Nov 2020 16:04:59 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/libcurl/</guid>
    <description><![CDATA[本文主要介绍一下curl接口的使用方法，以及获取高性能的一些实践。
什么是libcurl？用处？ 1  libcurl is a free and easy-to-use client-side URL transfer library, supporting DICT, FILE, FTP, FTPS, Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, MQTT, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP, SMTP, SMTPS, Telnet and TFTP. libcurl supports SSL certificates, HTTP POST, HTTP PUT, FTP uploading, HTTP form based upload, proxies, cookies, user+password authentication (Basic, Digest, NTLM, Negotiate, Kerberos), file transfer resume, http proxy tunneling and more!   官网摘的一段，意思大概是免费且容易使用的url传输库，支持下面一堆特性。]]></description>
</item><item>
    <title>简易function</title>
    <link>http://coderyang.com/function/</link>
    <pubDate>Sat, 19 Sep 2020 16:04:59 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/function/</guid>
    <description><![CDATA[本文主要讲一下怎么实现一个简易版本的function&lt;&gt;模板，从c++ templates第二版摘出。
出发点 一个简单的例子，下面这个模板上述能够接受任意可调用的对象，lambda表达式、函数指针、仿函数。
1 2 3 4 5 6 7  template&lt;typename F&gt; void for_int_up(int n, F f) { for (int i = 0; i &lt;= n; ++i) { f(i); } }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  void print_int(int i) { std::count &lt;&lt; i &lt;&lt; &#39; &#39;; } int main() { int sum = 0; for_int_up(5, [&amp;sum](int i) { sum += i; }); for_int_up(5, print_int); return 0; }   像for_int_up这样的函数其实有两个问题：]]></description>
</item><item>
    <title>vs2017与vs2005冲突解决</title>
    <link>http://coderyang.com/vs2017%E4%B8%8Evs2005%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/</link>
    <pubDate>Sun, 16 Apr 2017 14:24:59 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/vs2017%E4%B8%8Evs2005%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/</guid>
    <description><![CDATA[先安装vs2005，后安装vs2017，vs2017无法运行 原因：vs2005注册了Microsoft.VisualStudio.Shell.Interop.8.0.dll，优先于vs2017需要的dll。导致运行错误。
解决方法：
复制 C:\Program_Files_(x86)\Microsoft_Visual Studio\2017\Enterprise\Common7\IDE\PublicAssemblies\Microsoft.VisualStudio.Shell.Interop.8.0.dll 到 C:\Windows\assembly\GAC\Microsoft.VisualStudio.Shell.Interop.8.0\8.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Shell.Interop.8.0.dll]]></description>
</item><item>
    <title>gitlab workflow</title>
    <link>http://coderyang.com/gitlab-workflow/</link>
    <pubDate>Sun, 29 Jan 2017 21:40:40 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/gitlab-workflow/</guid>
    <description><![CDATA[<p>建立一个长期分支，就是master，master分支上的版本都是能够编译运行的版本。
整个工作流程如下。
第一步：根据需求，从master拉出新分支，不区分功能分支或补丁分支。
第二步：新分支开发完成后，或者需要讨论的时候，先从master合并到分支，解决冲突，然后向master发起一个pull request（简称PR）。
第三步：Pull Request既是一个通知，让别人注意到你的请求，又是一种对话机制，大家一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。
第四步：你的Pull Request被接受，合并进master，重新部署后，原来你拉出来的那个分支就被删除。（先部署再合并也可。）</p>
<h1 id="建立测试项目">建立测试项目</h1>
<p>新建一个项目用于测试工作流。
演示项目地址：http://10.10.10.98/MekaYangyi/workflow
</p>
<h1 id="设置分支保护">设置分支保护</h1>
<p>新建项目默认master用户才能够push和merge。
其余用户只能新建分支，在分支测试完毕后，再发起Merge Requests。发起后，由master进行审核后合并。
</p>]]></description>
</item><item>
    <title>第一次使用gitlab</title>
    <link>http://coderyang.com/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8gitlab/</link>
    <pubDate>Sat, 28 Jan 2017 09:19:43 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8gitlab/</guid>
    <description><![CDATA[<h1 id="安装git">安装git</h1>
<p>版本差别不大，目前使用的版本git2.11.0.3。
一路下一步,不修改安装位置，直接使用默认设置。</p>
<h1 id="安装tortoisegit">安装TortoiseGit</h1>
<p>一路下一步，不修改安装位置，直接使用默认设置。</p>
<h1 id="登录账户">登录账户</h1>
<h2 id="管理员创建账户">管理员创建账户</h2>
<p>Admin→New User。新建账户、并设置密码。同时设置该用户所属Group。</p>
<blockquote>
<p>name：上传显示的名字，可以经常更改，使用中文名好。</p>
</blockquote>
<blockquote>
<p>username：登陆的用户名，不可修改，用于账户登陆。</p>
</blockquote>
<blockquote>
<p>email：账户email，内网联系email。</p>
</blockquote>
<blockquote>
<p>password：密码，牢记，root用户可修改。</p>
</blockquote>
<h2 id="登录">登录</h2>
<p>登陆内网gitlab，目前网址：10.10.10.98。
</p>]]></description>
</item><item>
    <title>windows下Pyqt &#43; guiqwt环境的搭建</title>
    <link>http://coderyang.com/windows%E4%B8%8Bpyqt-guiqwt%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</link>
    <pubDate>Wed, 19 Oct 2016 23:47:25 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/windows%E4%B8%8Bpyqt-guiqwt%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</guid>
    <description><![CDATA[<h1 id="事情的起因">事情的起因</h1>
<p>这几天为了搭一个PyQt的生产环境遇到了好一些坑。
本身搭建PyQt的目的是为了进行试验，使用PyQt开发曾经开发过的项目的难度。
原项目是使用MFC开发，利用自己开发的折线绘制控件，进行高速的工控数据采集后，显示到界面上。难点主要在，高速采集之后，绘图的效率问题。
最终通过自己开发了一套平移显示绘图控件，在新增数据的时候，每一次只绘制一部分数据，然后通过平移之前的图像与之后的链接在一起，这样达到比较高的绘图效率，才解决了问题。但是MFC界面开发复杂，在MFC界面上花费过多的时间。同时本身绘图控件的开发，可能可以利用现有开源控件进行开发来避免重复造轮子。
于是利用PyQt+guiqwt绘图库来开发的方案构建起来。guiqwt本身是QT下常用的绘图控件，效率足够高，经过一些优化是能够使用的。相对Python经常使用的matplotlib来说不够漂亮，但是进行实时数据的平移绘图，效率高出很多。PyQt是模仿QT写的图形库，可以利用QTCreate进行快速的界面构建，而Python相对C++来说，需要处理的坑更少，出现各类崩溃的异常的情况会更少一些。
本文主要讲的是PyQt+guiqwt在windows上的搭建。
目的是在之后能够通过本文进行快速的开发环境的搭建。</p>]]></description>
</item></channel>
</rss>
