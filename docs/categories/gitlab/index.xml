<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>gitlab - Category - 鉴心</title>
        <link>http://coderyang.com/categories/gitlab/</link>
        <description>gitlab - Category - 鉴心</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 29 Jan 2017 21:40:40 &#43;0000</lastBuildDate><atom:link href="http://coderyang.com/categories/gitlab/" rel="self" type="application/rss+xml" /><item>
    <title>gitlab workflow</title>
    <link>http://coderyang.com/gitlab-workflow/</link>
    <pubDate>Sun, 29 Jan 2017 21:40:40 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/gitlab-workflow/</guid>
    <description><![CDATA[<p>建立一个长期分支，就是master，master分支上的版本都是能够编译运行的版本。
整个工作流程如下。
第一步：根据需求，从master拉出新分支，不区分功能分支或补丁分支。
第二步：新分支开发完成后，或者需要讨论的时候，先从master合并到分支，解决冲突，然后向master发起一个pull request（简称PR）。
第三步：Pull Request既是一个通知，让别人注意到你的请求，又是一种对话机制，大家一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。
第四步：你的Pull Request被接受，合并进master，重新部署后，原来你拉出来的那个分支就被删除。（先部署再合并也可。）</p>
<h1 id="建立测试项目">建立测试项目</h1>
<p>新建一个项目用于测试工作流。
演示项目地址：http://10.10.10.98/MekaYangyi/workflow
</p>
<h1 id="设置分支保护">设置分支保护</h1>
<p>新建项目默认master用户才能够push和merge。
其余用户只能新建分支，在分支测试完毕后，再发起Merge Requests。发起后，由master进行审核后合并。
</p>
<h1 id="设置开发成员">设置开发成员</h1>
<p>项目创建者在项目页面选择Member。
</p>
<p>设置开发人员分为两种，一种是直接设置用户，一种是设置一Group都为指定权限。
权限分为四类：</p>
<blockquote>
<p>Guest
Reporter
Developer
Master</p>
</blockquote>
<p>一般开发人员指定为Developer。
具体权限在http://10.10.10.98/help/user/permissions.md查看。
设置用户权限

设置整个Group的权限
</p>
<h1 id="建立本地分支">建立本地分支</h1>
<p>在项目文件夹右键，选择TortoiseGit→Create Branch。

填写信息
</p>
<h1 id="切换分支">切换分支</h1>
<p>在项目文件夹右键，选择TortoiseGit→Switch/Checkout。

选择OK。
</p>
<h1 id="commit">Commit</h1>
<p>分出分支后，可以在本地进行Commit，知道一个功能开发完毕后，再上传到服务器。
修改本地的文件，Commit。

填写上传备注，Commit。</p>
<h1 id="将master向test_workflow合并">将Master向Test_WorkFlow合并</h1>
<p>先从服务器pull最新版本，然后将master向Test_WorkFlow合并，防止master在分支分出之后被修改导致的冲突。
从服务器pull最新版本。

将master向Test_WorkFlow合并。

合并解决冲突。
</p>
<h1 id="push">push</h1>
<p>上传成功后选择push。
</p>
<p>确认。

成功。
</p>
<h1 id="发起merge-request">发起Merge Request</h1>
<p>在项目页面找到分支，选择Merge Request

填写相关信息，Submit merge request
</p>
<h1 id="检视代码并讨论">检视代码并讨论</h1>
<p>选择Merge Request。
单击测试分支合并功能这一个Merge Request

弹出页面。

检视代码</p>
<h2 id="commit查看修改记录">Commit，查看修改记录。</h2>
<p>图中红色区域单击可以Diff与查看源文件。

单击任意版本提交记录，增加检视意见，在diff时，任意处可以添加讨论。或者在页面底部对整个修改进行评价。
</p>

<h2 id="changes查看版本区别">Changes，查看版本区别。</h2>

## Discusion，填写建议
填写建议后，选择Comment可以互相讨论。
或者选择Close merge request关闭请求。

## Accept merge request或者Close merge request

## 合并完成
选择Accept Merge Request,同时选择合并时将分支删除。

合并结果。

# 本地pull
在本地项目进行pull,同步服务器版本。

本地同步结果。

# 删除本地分支
由于远程分支与本地分支没有关系，那么当远程正式Merge之后，需要删除本地分支，防止以后分支一直增加，不减少。
在项目文件夹右键，选择TortoiseGit→Switch/Checkout，先把分支切换到本地master。

切换完成后，再次进入该界面选择....

删除分支

<h1 id="issue">Issue</h1>
<p>Issue 用于 Bug追踪和需求管理。建议先新建 Issue，再新建对应的功能分支。功能分支总是为了解决一个或多个 Issue。</p>
<h2 id="新建issue">新建Issue</h2>
<p>选择New Issue

填写相关信息。
功能分支的名称，可以与issue的名字保持一致，并且以issue的编号起首，比如&quot;1-测试Issue&quot;。
</p>
<p>新建完成,每一个Issue都有一个编号，本Issue的编号为#1。

在分支开发完成后，在commit message里面，可以写上&quot;fixes #14&quot;或者&quot;closes #67&quot;。

Github规定，只要commit message里面有下面这些动词 + 编号，就会关闭对应的issue。</p>
<blockquote>
<p>close
closes
closed
fix
fixes
fixed
resolve
resolves
resolved</p>
</blockquote>
<p>这种方式还可以一次关闭多个issue，或者关闭其他代码库的issue，格式是username/repository#issue_number。
Pull Request被接受以后，issue关闭，原始分支就应该删除。如果以后该issue重新打开，新分支可以复用原来的名字。</p>
<h2 id="查看结果">查看结果</h2>

]]></description>
</item><item>
    <title>第一次使用gitlab</title>
    <link>http://coderyang.com/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8gitlab/</link>
    <pubDate>Sat, 28 Jan 2017 09:19:43 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8gitlab/</guid>
    <description><![CDATA[<h1 id="安装git">安装git</h1>
<p>版本差别不大，目前使用的版本git2.11.0.3。
一路下一步,不修改安装位置，直接使用默认设置。</p>
<h1 id="安装tortoisegit">安装TortoiseGit</h1>
<p>一路下一步，不修改安装位置，直接使用默认设置。</p>
<h1 id="登录账户">登录账户</h1>
<h2 id="管理员创建账户">管理员创建账户</h2>
<p>Admin→New User。新建账户、并设置密码。同时设置该用户所属Group。</p>
<blockquote>
<p>name：上传显示的名字，可以经常更改，使用中文名好。</p>
</blockquote>
<blockquote>
<p>username：登陆的用户名，不可修改，用于账户登陆。</p>
</blockquote>
<blockquote>
<p>email：账户email，内网联系email。</p>
</blockquote>
<blockquote>
<p>password：密码，牢记，root用户可修改。</p>
</blockquote>
<h2 id="登录">登录</h2>
<p>登陆内网gitlab，目前网址：10.10.10.98。
</p>
<h2 id="修改密码">修改密码</h2>
<p>登录后会要求修改密码，自己输入即可。
</p>
<h1 id="设置tortoisegit">设置TortoiseGit</h1>
<p>将注册的用户填入TortoiseGit中,设置为全局账号。
</p>
<h1 id="添加ssh">添加ssh</h1>
<p>如果不添加shh，每次修改都会要求输入账号密码，比较麻烦。添加后与设备绑定，修改不再需要填写账号密码。如果不再使用一个设备，请删除ssh。</p>
<h2 id="生成ssh">生成ssh</h2>
<p>任意空白处，选择git bash。

窗口中输入，一路按回车。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">ssh-keygen -t rsa -C &#34;你注册的email地址&#34;
</code></pre></td></tr></table>
</div>
</div><p>生成后的公钥会存放在 C:/Users/You_User_Name/.ssh/id_rsa.pub。
用记事本打开，复制。
</p>
<h2 id="将ssh加入gitlab">将ssh加入gitlab</h2>
<p>浏览器转到http://10.10.10.98/profile/keys。
将复制的Key粘贴，Add key。
</p>
<h1 id="新建一个项目">新建一个项目</h1>
<h2 id="新建一个私有项目">新建一个私有项目</h2>
<p>新建一个私有项目进行实验，gitlab是否能够正常上传。
选择new project。
</p>
<h2 id="填写基本信息">填写基本信息</h2>
<blockquote>
<p>Project name：项目名称。
Project description：项目描述。
Visibility Level：项目级别，内网使用只选择public与private。private除了项目成员不可见，public在内网均可见。</p>
</blockquote>
<p>选择Create project创建项目。
</p>
<h1 id="clone项目">Clone项目</h1>
<p>项目创建完成，复制项目地址。
复制浏览器的项目地址：http://10.10.10.98/test/test_project。

选择计算机一个文件夹，右键，选择git clone。

clone之前复制地址项目，确认，输入用户名与密码，clone成功，会新建一个文件夹。
</p>
<h1 id="第一次push">第一次push</h1>
<p>在该文件夹中建立一个README.md文件。
</p>
<h2 id="add">add</h2>
<p>右键add，确认，ok。
</p>
<h2 id="commit">commit</h2>
<p>commit将修改更新到本地。
在项目文件夹空白处右键，选择git commit。

填写上传理由，commit。
</p>
<h2 id="push">push</h2>
<p>选择push，push能够将修改push到服务器。

确认。

成功界面。
</p>
<h1 id="查看结果">查看结果</h1>
<p>成功在网页端看到修改记录(之前误上传为.md.txt文件，修改为.md文件网页端会显示文字)。
</p>]]></description>
</item></channel>
</rss>
