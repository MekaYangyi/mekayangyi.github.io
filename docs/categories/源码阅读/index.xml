<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>源码阅读 - Category - 鉴心</title>
        <link>http://coderyang.com/categories/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</link>
        <description>源码阅读 - Category - 鉴心</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 18 Jul 2017 15:59:57 &#43;0000</lastBuildDate><atom:link href="http://coderyang.com/categories/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/" rel="self" type="application/rss+xml" /><item>
    <title>Redis源码阅读-总结</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E6%80%BB%E7%BB%93/</link>
    <pubDate>Tue, 18 Jul 2017 15:59:57 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[<p>之前的一系列Redis源码阅读的博客都是基于《Redis设计与实现》的，内容上不免和书有雷同。</p>
<p>本来计划是三月份开始看，但是中间由于接到一个开发速度要求很高的项目，加班很多耽误了些进度，只在这一段时间里看了部分小书（部分书摘录成了博客），耽搁了。</p>
<p>然后快到七月的时候，项目在经过编码、测试，最终投用起来之后，又有了更多的时间来学习。便开始了源码的继续阅读。</p>
<p>阅读redis源码的目的:</p>
<ul>
<li>为了之后项目如果使用redis的话能够游刃有余。</li>
<li>学习其优秀的编码。</li>
</ul>
<p>参加工作两年。</p>
<p>第一年是从机械专业学生转变为程序员，更多的是在打基础，看了挺多计算机的基础书籍。那段时间相对是痛苦的，遇到一个问题往往不明白，不断去探究又探究出一个新的不明白的问题。</p>
<p>第二年在积累了几万行之后，开始感觉基础编码方面比较游刃有余了，遇到的问题大多数能提取重点，找到解决方案。但是想着继续提升，于是开始了部分项目的源码阅读。除了公司项目源码的阅读，网上开源项目的源码阅读也提上了日程，在经过了sgi stl的仿写之后，开始了redis的阅读。</p>
<p>redis是我第一个比较完整的看完的现在流行的开源项目源码。不算中间停下来的时间，大概看了三个星期。这三个星期里不能说对redis理解很深透，但是起码整个项目的结构，怎么实现主要的功能，内部模块的互相调用算是理解了。</p>
<p>收获有很多，修炼还需要继续。</p>
]]></description>
</item><item>
    <title>redis源码阅读-一个命令的旅程</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E7%9A%84%E6%97%85%E7%A8%8B/</link>
    <pubDate>Tue, 18 Jul 2017 15:28:23 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E7%9A%84%E6%97%85%E7%A8%8B/</guid>
    <description><![CDATA[<p>redis服务器会与多个客户端建立网络连接，处理客户端发送的命令请求，在数据库中保存客户端执行的命令，并通过资源管理来维持整个服务器自身的运转。</p>
<p>本文目的是为了理清楚服务器对于命令请求的整个处理过程，说明这个过程中服务器与客户端如何互相交互，服务器内部如何调用内部组件达到对命令的执行。</p>
<h2 id="命令的处理流程">命令的处理流程</h2>
<p>之前在事务代码部分的阅读，已经对于服务器接收客户端的连接并创建命令请求处理器等待命令请求的过程。</p>
<p>现在以一个简单的set命令为例子，看服务器在接收请求之后如何处理。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">redis</span><span class="o">&gt;</span> <span class="n">SET</span> <span class="n">KEY</span> <span class="n">VALUE</span>
<span class="n">ok</span>
</code></pre></td></tr></table>
</div>
</div><p>从客户端发送set key value命令到接收回复ok，都做了如下操作：</p>
<ul>
<li>客户端发送命令。</li>
<li>服务器命令请求处理器接收，引发命令的执行，并产生命令回复处理器。</li>
<li>命令回复处理器发送ok给客户端。</li>
<li>客户端接收ok，并打印。</li>
</ul>
<h2 id="发送命令">发送命令</h2>
<p>客户端将键入的命令转换为协议格式并套接字发送到服务器</p>
<h2 id="读取命令">读取命令</h2>
<p>服务器发现客户端连接套接字变为可读时，通过命令请求处理器readQueryFromClient()函数来进行处理。</p>
<h3 id="读取命令到缓冲区并处理">读取命令到缓冲区并处理</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 读取客户端的查询缓冲区内容
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">readQueryFromClient</span><span class="p">(</span><span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">el</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">privdata</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mask</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">redisClient</span><span class="o">*</span><span class="p">)</span> <span class="n">privdata</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">nread</span><span class="p">,</span> <span class="n">readlen</span><span class="p">;</span>
    <span class="n">size_t</span> <span class="n">qblen</span><span class="p">;</span>
    <span class="n">REDIS_NOTUSED</span><span class="p">(</span><span class="n">el</span><span class="p">);</span>
    <span class="n">REDIS_NOTUSED</span><span class="p">(</span><span class="n">mask</span><span class="p">);</span>

    <span class="n">server</span><span class="p">.</span><span class="n">current_client</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span> <span class="c1">// 设置服务器的当前客户端
</span><span class="c1"></span>    <span class="n">readlen</span> <span class="o">=</span> <span class="n">REDIS_IOBUF_LEN</span><span class="p">;</span> <span class="c1">// 读取的默认长度
</span><span class="c1"></span>    <span class="cm">/* If this is a multi bulk request, and we are processing a bulk reply
</span><span class="cm">     * that is large enough, try to maximize the probability that the query
</span><span class="cm">     * buffer contains exactly the SDS string representing the object, even
</span><span class="cm">     * at the risk of requiring more read(2) calls. This way the function
</span><span class="cm">     * processMultiBulkBuffer() can avoid copying buffers to create the
</span><span class="cm">     * Redis Object representing the argument. */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">reqtype</span> <span class="o">==</span> <span class="n">REDIS_REQ_MULTIBULK</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">multibulklen</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">bulklen</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">bulklen</span> <span class="o">&gt;=</span> <span class="n">REDIS_MBULK_BIG_ARG</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">remaining</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span><span class="p">)(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">bulklen</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="n">sdslen</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">remaining</span> <span class="o">&lt;</span> <span class="n">readlen</span><span class="p">)</span> <span class="n">readlen</span> <span class="o">=</span> <span class="n">remaining</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 获取缓存区遗留数据长度
</span><span class="c1"></span>    <span class="n">qblen</span> <span class="o">=</span> <span class="n">sdslen</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf_peak</span> <span class="o">&lt;</span> <span class="n">qblen</span><span class="p">)</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf_peak</span> <span class="o">=</span> <span class="n">qblen</span><span class="p">;</span> <span class="c1">// 查询缓冲区长度峰值更新
</span><span class="c1"></span>    <span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span> <span class="o">=</span> <span class="n">sdsMakeRoomFor</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">,</span> <span class="n">readlen</span><span class="p">);</span> <span class="c1">// 重新分配查询缓冲区空间
</span><span class="c1"></span>    <span class="n">nread</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="o">+</span><span class="n">qblen</span><span class="p">,</span> <span class="n">readlen</span><span class="p">);</span> <span class="c1">// 读取fd中数据，在遗留数据之后
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">nread</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 读取错误处理
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EAGAIN</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">nread</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_VERBOSE</span><span class="p">,</span> <span class="s">&#34;Reading from client: %s&#34;</span><span class="p">,</span><span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
            <span class="n">freeClient</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">nread</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 遇到EOF,关闭客户端
</span><span class="c1"></span>        <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_VERBOSE</span><span class="p">,</span> <span class="s">&#34;Client closed connection&#34;</span><span class="p">);</span>
        <span class="n">freeClient</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">nread</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 读取成功
</span><span class="c1"></span>        <span class="n">sdsIncrLen</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">,</span><span class="n">nread</span><span class="p">);</span> <span class="c1">// 正确更新 free 和 len 属性的。
</span><span class="c1"></span>        <span class="n">c</span><span class="o">-&gt;</span><span class="n">lastinteraction</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">unixtime</span><span class="p">;</span> <span class="c1">// 记录最后一次互动时间
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_MASTER</span><span class="p">)</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">reploff</span> <span class="o">+=</span> <span class="n">nread</span><span class="p">;</span> <span class="c1">// 客户端为master,更新复制偏移量
</span><span class="c1"></span>        <span class="n">server</span><span class="p">.</span><span class="n">stat_net_input_bytes</span> <span class="o">+=</span> <span class="n">nread</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// 在 nread == -1 且 errno == EAGAIN 时运行
</span><span class="c1"></span>        <span class="n">server</span><span class="p">.</span><span class="n">current_client</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 缓冲区长度超过服务器最大缓冲区长度
</span><span class="c1"></span>    <span class="c1">// 清空缓冲区并释放客户端
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">sdslen</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">server</span><span class="p">.</span><span class="n">client_max_querybuf_len</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sds</span> <span class="n">ci</span> <span class="o">=</span> <span class="n">catClientInfoString</span><span class="p">(</span><span class="n">sdsempty</span><span class="p">(),</span><span class="n">c</span><span class="p">),</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">sdsempty</span><span class="p">();</span>

        <span class="n">bytes</span> <span class="o">=</span> <span class="n">sdscatrepr</span><span class="p">(</span><span class="n">bytes</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">,</span><span class="mi">64</span><span class="p">);</span>
        <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span><span class="s">&#34;Closing client that reached max query buffer length: %s (qbuf initial bytes: %s)&#34;</span><span class="p">,</span> <span class="n">ci</span><span class="p">,</span> <span class="n">bytes</span><span class="p">);</span>
        <span class="n">sdsfree</span><span class="p">(</span><span class="n">ci</span><span class="p">);</span>
        <span class="n">sdsfree</span><span class="p">(</span><span class="n">bytes</span><span class="p">);</span>
        <span class="n">freeClient</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 从缓冲区中读取内容，创建参数，并执行命令
</span><span class="c1"></span>    <span class="c1">// 直到缓冲区所有的内容被处理完为止
</span><span class="c1"></span>    <span class="n">processInputBuffer</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
    <span class="n">server</span><span class="p">.</span><span class="n">current_client</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><h3 id="从缓冲区中读取命令并处理">从缓冲区中读取命令并处理</h3>
<p>redis的readQueryFromClient()函数在将命令读取到缓冲区之后，调用processInputBuffer()对缓冲区内的命令进行处理，直到所有命令处理完毕。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 处理客户端输入的内容
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">processInputBuffer</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/* Keep processing while there is something in the input buffer */</span>
    <span class="k">while</span><span class="p">(</span><span class="n">sdslen</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">))</span> <span class="p">{</span>
        <span class="c1">// 客户端处于暂停状态，直接返回
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_SLAVE</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">clientsArePaused</span><span class="p">())</span> <span class="k">return</span><span class="p">;</span>

        <span class="c1">// 客户端被阻塞直接返回
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_BLOCKED</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

        <span class="c1">// 客户端被设置为关闭，返回
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_CLOSE_AFTER_REPLY</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

        <span class="c1">// 判断请求类型
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">reqtype</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">c</span><span class="o">-&gt;</span><span class="n">reqtype</span> <span class="o">=</span> <span class="n">REDIS_REQ_MULTIBULK</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">c</span><span class="o">-&gt;</span><span class="n">reqtype</span> <span class="o">=</span> <span class="n">REDIS_REQ_INLINE</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// 将缓冲区中的内容转换为命令，以及命令参数
</span><span class="c1"></span>        <span class="c1">// processMultibulkBuffer()处理一般客户端发送的信息
</span><span class="c1"></span>      	<span class="c1">// processInlineBuffer()处理TELNET发送的信息
</span><span class="c1"></span>        <span class="c1">// 命令转换失败跳出循环，也就是可能在没有处理完缓冲区所有数据的情况下跳出。
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">reqtype</span> <span class="o">==</span> <span class="n">REDIS_REQ_INLINE</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">processInlineBuffer</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">!=</span> <span class="n">REDIS_OK</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">reqtype</span> <span class="o">==</span> <span class="n">REDIS_REQ_MULTIBULK</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">processMultibulkBuffer</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">!=</span> <span class="n">REDIS_OK</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">redisPanic</span><span class="p">(</span><span class="s">&#34;Unknown request type&#34;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 命令参数为0，不需要执行
</span><span class="c1"></span>            <span class="n">resetClient</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// 执行命令，在成功执行之后重置客户端
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">processCommand</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">==</span> <span class="n">REDIS_OK</span><span class="p">)</span>
                <span class="n">resetClient</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 命令的转换介绍下processMultibulkBuffer()，此为处理客户端发送来命令，相对协议更复杂。
</span><span class="c1">// processInlineBuffer()相对协议简单就不介绍了。
</span><span class="c1"></span><span class="cm">/*
</span><span class="cm"> * 将 c-&gt;querybuf 中的协议内容转换成 c-&gt;argv 中的参数对象
</span><span class="cm"> * 
</span><span class="cm"> * 比如 *3\r\n$3\r\nSET\r\n$3\r\nMSG\r\n$5\r\nHELLO\r\n
</span><span class="cm"> * 将被转换为：
</span><span class="cm"> * argv[0] = SET
</span><span class="cm"> * argv[1] = MSG
</span><span class="cm"> * argv[2] = HELLO
</span><span class="cm"> */</span>
<span class="kt">int</span> <span class="nf">processMultibulkBuffer</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">newline</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">ok</span><span class="p">;</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>

    <span class="c1">// 读取命令参数个数
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">multibulklen</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">redisAssertWithInfo</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>

        <span class="c1">// 校验命令参数中&#34;\r\n&#34;的存在
</span><span class="c1"></span>        <span class="n">newline</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">,</span><span class="sc">&#39;\r&#39;</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">newline</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">sdslen</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">REDIS_INLINE_MAX_SIZE</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">addReplyError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;Protocol error: too big mbulk count string&#34;</span><span class="p">);</span>
                <span class="n">setProtocolError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// 异步关闭客户端
</span><span class="c1"></span>            <span class="p">}</span>
            <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">newline</span><span class="o">-</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">)</span> <span class="o">&gt;</span> <span class="p">((</span><span class="kt">signed</span><span class="p">)</span><span class="n">sdslen</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>

        <span class="c1">// 第一个字符必须时*
</span><span class="c1"></span>        <span class="n">redisAssertWithInfo</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;*&#39;</span><span class="p">);</span>

        <span class="c1">// 转换出参数的个数
</span><span class="c1"></span>        <span class="n">ok</span> <span class="o">=</span> <span class="n">string2ll</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">newline</span><span class="o">-</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="o">&amp;</span><span class="n">ll</span><span class="p">);</span>

        <span class="c1">// 检测参数个数是否超限
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ok</span> <span class="o">||</span> <span class="n">ll</span> <span class="o">&gt;</span> <span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">addReplyError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;Protocol error: invalid multibulk length&#34;</span><span class="p">);</span>
            <span class="n">setProtocolError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">pos</span><span class="p">);</span> <span class="c1">// 异步关闭客户端
</span><span class="c1"></span>            <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">pos</span> <span class="o">=</span> <span class="p">(</span><span class="n">newline</span><span class="o">-</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">ll</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 参数小于等于0，删除c-&gt;querybuf中从pos到-1的内容
</span><span class="c1"></span>            <span class="c1">// 返回读取成功
</span><span class="c1"></span>            <span class="n">sdsrange</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">,</span><span class="n">pos</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// 设置参数个数
</span><span class="c1"></span>        <span class="n">c</span><span class="o">-&gt;</span><span class="n">multibulklen</span> <span class="o">=</span> <span class="n">ll</span><span class="p">;</span>

        <span class="c1">// 分配参数空间
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">)</span> <span class="n">zfree</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">);</span>
        <span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span> <span class="o">=</span> <span class="n">zmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">robj</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">multibulklen</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">redisAssertWithInfo</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">multibulklen</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">while</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">multibulklen</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 读取参数长度
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">bulklen</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">// 校验命令参数中&#34;\r\n&#34;的存在
</span><span class="c1"></span>            <span class="n">newline</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="o">+</span><span class="n">pos</span><span class="p">,</span><span class="sc">&#39;\r&#39;</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">newline</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">sdslen</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">REDIS_INLINE_MAX_SIZE</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">addReplyError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span>
                        <span class="s">&#34;Protocol error: too big bulk count string&#34;</span><span class="p">);</span>
                    <span class="n">setProtocolError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
                    <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">newline</span><span class="o">-</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">)</span> <span class="o">&gt;</span> <span class="p">((</span><span class="kt">signed</span><span class="p">)</span><span class="n">sdslen</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">))</span>
                <span class="k">break</span><span class="p">;</span>

            <span class="c1">// 确认格式
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;$&#39;</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">addReplyErrorFormat</span><span class="p">(</span><span class="n">c</span><span class="p">,</span>
                    <span class="s">&#34;Protocol error: expected &#39;$&#39;, got &#39;%c&#39;&#34;</span><span class="p">,</span>
                    <span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">[</span><span class="n">pos</span><span class="p">]);</span>
                <span class="n">setProtocolError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">pos</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="c1">// 读取长度
</span><span class="c1"></span>            <span class="n">ok</span> <span class="o">=</span> <span class="n">string2ll</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="o">+</span><span class="n">pos</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">newline</span><span class="o">-</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="o">+</span><span class="n">pos</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="o">&amp;</span><span class="n">ll</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ok</span> <span class="o">||</span> <span class="n">ll</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">ll</span> <span class="o">&gt;</span> <span class="mi">512</span><span class="o">*</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">addReplyError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;Protocol error: invalid bulk length&#34;</span><span class="p">);</span>
                <span class="n">setProtocolError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">pos</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">pos</span> <span class="o">+=</span> <span class="n">newline</span><span class="o">-</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="o">+</span><span class="n">pos</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span>
            
            <span class="c1">// 参数太长的特殊处理
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">ll</span> <span class="o">&gt;=</span> <span class="n">REDIS_MBULK_BIG_ARG</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">size_t</span> <span class="n">qblen</span><span class="p">;</span>

                <span class="cm">/* If we are going to read a large object from network
</span><span class="cm">                 * try to make it likely that it will start at c-&gt;querybuf
</span><span class="cm">                 * boundary so that we can optimize object creation
</span><span class="cm">                 * avoiding a large copy of data. */</span>
                <span class="n">sdsrange</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">,</span><span class="n">pos</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
                <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="n">qblen</span> <span class="o">=</span> <span class="n">sdslen</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">);</span>
                <span class="cm">/* Hint the sds library about the amount of bytes this string is
</span><span class="cm">                 * going to contain. */</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">qblen</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)</span><span class="n">ll</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
                    <span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span> <span class="o">=</span> <span class="n">sdsMakeRoomFor</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">,</span><span class="n">ll</span><span class="o">+</span><span class="mi">2</span><span class="o">-</span><span class="n">qblen</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">c</span><span class="o">-&gt;</span><span class="n">bulklen</span> <span class="o">=</span> <span class="n">ll</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// 读取参数
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">sdslen</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">)</span><span class="o">-</span><span class="n">pos</span> <span class="o">&lt;</span> <span class="p">(</span><span class="kt">unsigned</span><span class="p">)(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">bulklen</span><span class="o">+</span><span class="mi">2</span><span class="p">))</span> <span class="p">{</span>
            <span class="c1">// 确认协议内容
</span><span class="c1"></span>            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">//复制参数
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">pos</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
                <span class="n">c</span><span class="o">-&gt;</span><span class="n">bulklen</span> <span class="o">&gt;=</span> <span class="n">REDIS_MBULK_BIG_ARG</span> <span class="o">&amp;&amp;</span>
                <span class="p">(</span><span class="kt">signed</span><span class="p">)</span> <span class="n">sdslen</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">)</span> <span class="o">==</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">bulklen</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">createObject</span><span class="p">(</span><span class="n">REDIS_STRING</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">);</span>
                <span class="n">sdsIncrLen</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">);</span> <span class="cm">/* remove CRLF */</span>
                <span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span> <span class="o">=</span> <span class="n">sdsempty</span><span class="p">();</span>
                <span class="cm">/* Assume that if we saw a fat argument we&#39;ll see another one
</span><span class="cm">                 * likely... */</span>
                <span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span> <span class="o">=</span> <span class="n">sdsMakeRoomFor</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">bulklen</span><span class="o">+</span><span class="mi">2</span><span class="p">);</span>
                <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span>
                    <span class="n">createStringObject</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="o">+</span><span class="n">pos</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">bulklen</span><span class="p">);</span>
                <span class="n">pos</span> <span class="o">+=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">bulklen</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">c</span><span class="o">-&gt;</span><span class="n">bulklen</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="n">c</span><span class="o">-&gt;</span><span class="n">multibulklen</span><span class="o">--</span><span class="p">;</span> <span class="c1">// 继续读取
</span><span class="c1"></span>        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 清除已经读取的内容
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">pos</span><span class="p">)</span> <span class="n">sdsrange</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">querybuf</span><span class="p">,</span><span class="n">pos</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>

    <span class="c1">// 读取完毕返回
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">multibulklen</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span>

    <span class="c1">// 可能内容不符合协议返回失败
</span><span class="c1"></span>    <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="命令的执行">命令的执行</h2>
<p>processInputBuffer()在解析成功命令之后，调用processCommand()对命令进行执行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">processInputBuffer</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
  		<span class="c1">// ....
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 命令参数为0，不需要执行
</span><span class="c1"></span>            <span class="n">resetClient</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// 执行命令，在成功执行之后重置客户端
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">processCommand</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">==</span> <span class="n">REDIS_OK</span><span class="p">)</span>
                <span class="n">resetClient</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
        <span class="p">}</span>
  		<span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="命令的查找">命令的查找</h3>
<p>在processCommand()执行的第一步就是查询命令表，找到对于的命令实现信息。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"> <span class="c1">// 命令的执行
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">processCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// quit命令特殊处理，异步关闭服务器
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">,</span><span class="s">&#34;quit&#34;</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">ok</span><span class="p">);</span>
        <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_CLOSE_AFTER_REPLY</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 查找命令
</span><span class="c1"></span>    <span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">lastcmd</span> <span class="o">=</span> <span class="n">lookupCommand</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 没有查找倒
</span><span class="c1"></span>        <span class="n">flagTransaction</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
        <span class="n">addReplyErrorFormat</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;unknown command &#39;%s&#39;&#34;</span><span class="p">,</span>
            <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">arity</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">arity</span> <span class="o">!=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">)</span> <span class="o">||</span>
               <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="o">-</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">arity</span><span class="p">))</span> <span class="p">{</span>
        <span class="c1">// 命令实现与输入的参数数量不匹配
</span><span class="c1"></span>        <span class="n">flagTransaction</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
        <span class="n">addReplyErrorFormat</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;wrong number of arguments for &#39;%s&#39; command&#34;</span><span class="p">,</span>
            <span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span>
    <span class="p">}</span>
<span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>redis维护了一个命令表，该命令表为一个字典，键为命令名字，值是一个redisCommand结构，该结构记录了一个Redis的命令实现。</p>
<p>服务器启动时，调用初始化服务器配置函数initServerConfig()，该函数会进行命令表的初始化，保存在两个字典中commands、orig_commands。原始的命令表初始参数保存在redis.c文件中的redisCommandTable定义。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="k">struct</span> <span class="n">redisServer</span> <span class="p">{</span>
 	<span class="c1">// ...
</span><span class="c1"></span>    <span class="c1">// 命令表（受到 rename 配置选项的作用）
</span><span class="c1"></span>    <span class="n">dict</span> <span class="o">*</span><span class="n">commands</span><span class="p">;</span>
    <span class="c1">// 命令表（无 rename 配置选项的作用）
</span><span class="c1"></span>    <span class="n">dict</span> <span class="o">*</span><span class="n">orig_commands</span><span class="p">;</span>
  	<span class="c1">// ...
</span><span class="c1"></span><span class="p">};</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
  	<span class="c1">// ...
</span><span class="c1"></span>    <span class="n">initServerConfig</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">initServerConfig</span><span class="p">()</span> <span class="p">{</span>
  	<span class="c1">// ...
</span><span class="c1"></span>  	
    <span class="c1">// 初始化命令表
</span><span class="c1"></span>  	<span class="c1">// 创建命令字典
</span><span class="c1"></span>    <span class="n">server</span><span class="p">.</span><span class="n">commands</span> <span class="o">=</span> <span class="n">dictCreate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">commandTableDictType</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="n">server</span><span class="p">.</span><span class="n">orig_commands</span> <span class="o">=</span> <span class="n">dictCreate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">commandTableDictType</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="n">populateCommandTable</span><span class="p">();</span> <span class="c1">// 初始化命令表
</span><span class="c1"></span>  
  	<span class="c1">// 初始化常用命令快捷
</span><span class="c1"></span>    <span class="n">server</span><span class="p">.</span><span class="n">delCommand</span> <span class="o">=</span> <span class="n">lookupCommandByCString</span><span class="p">(</span><span class="s">&#34;del&#34;</span><span class="p">);</span>
    <span class="n">server</span><span class="p">.</span><span class="n">multiCommand</span> <span class="o">=</span> <span class="n">lookupCommandByCString</span><span class="p">(</span><span class="s">&#34;multi&#34;</span><span class="p">);</span>
    <span class="n">server</span><span class="p">.</span><span class="n">lpushCommand</span> <span class="o">=</span> <span class="n">lookupCommandByCString</span><span class="p">(</span><span class="s">&#34;lpush&#34;</span><span class="p">);</span>
    <span class="n">server</span><span class="p">.</span><span class="n">lpopCommand</span> <span class="o">=</span> <span class="n">lookupCommandByCString</span><span class="p">(</span><span class="s">&#34;lpop&#34;</span><span class="p">);</span>
    <span class="n">server</span><span class="p">.</span><span class="n">rpopCommand</span> <span class="o">=</span> <span class="n">lookupCommandByCString</span><span class="p">(</span><span class="s">&#34;rpop&#34;</span><span class="p">);</span>
  	<span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>

<span class="kt">void</span> <span class="nf">populateCommandTable</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>

    <span class="c1">// 命令数量
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">numcommands</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">redisCommandTable</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">redisCommand</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">numcommands</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">struct</span> <span class="n">redisCommand</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="n">redisCommandTable</span><span class="o">+</span><span class="n">j</span><span class="p">;</span> <span class="c1">// 命令
</span><span class="c1"></span>        <span class="kt">char</span> <span class="o">*</span><span class="n">f</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">sflags</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">retval1</span><span class="p">,</span> <span class="n">retval2</span><span class="p">;</span>

        <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">f</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">switch</span><span class="p">(</span><span class="o">*</span><span class="n">f</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">case</span> <span class="sc">&#39;w&#39;</span><span class="o">:</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_CMD_WRITE</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;r&#39;</span><span class="o">:</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_CMD_READONLY</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;m&#39;</span><span class="o">:</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_CMD_DENYOOM</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;a&#39;</span><span class="o">:</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_CMD_ADMIN</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;p&#39;</span><span class="o">:</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_CMD_PUBSUB</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;s&#39;</span><span class="o">:</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_CMD_NOSCRIPT</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;R&#39;</span><span class="o">:</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_CMD_RANDOM</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;S&#39;</span><span class="o">:</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_CMD_SORT_FOR_SCRIPT</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;l&#39;</span><span class="o">:</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_CMD_LOADING</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;t&#39;</span><span class="o">:</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_CMD_STALE</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;M&#39;</span><span class="o">:</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_CMD_SKIP_MONITOR</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;k&#39;</span><span class="o">:</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_CMD_ASKING</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;F&#39;</span><span class="o">:</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_CMD_FAST</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">default</span><span class="o">:</span> <span class="n">redisPanic</span><span class="p">(</span><span class="s">&#34;Unsupported command flag&#34;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">f</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// 添加
</span><span class="c1"></span>        <span class="n">retval1</span> <span class="o">=</span> <span class="n">dictAdd</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">commands</span><span class="p">,</span> <span class="n">sdsnew</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">),</span> <span class="n">c</span><span class="p">);</span>
        <span class="cm">/* Populate an additional dictionary that will be unaffected
</span><span class="cm">         * by rename-command statements in redis.conf. */</span>
        <span class="n">retval2</span> <span class="o">=</span> <span class="n">dictAdd</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">orig_commands</span><span class="p">,</span> <span class="n">sdsnew</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">),</span> <span class="n">c</span><span class="p">);</span>
        <span class="n">redisAssert</span><span class="p">(</span><span class="n">retval1</span> <span class="o">==</span> <span class="n">DICT_OK</span> <span class="o">&amp;&amp;</span> <span class="n">retval2</span> <span class="o">==</span> <span class="n">DICT_OK</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>redisCommandTable定义</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// Redis 命令
</span><span class="c1"></span><span class="k">struct</span> <span class="n">redisCommand</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span> <span class="c1">// 命令名
</span><span class="c1"></span>    <span class="n">redisCommandProc</span> <span class="o">*</span><span class="n">proc</span><span class="p">;</span> <span class="c1">// 实现函数
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">arity</span><span class="p">;</span> <span class="c1">// 参数个数
</span><span class="c1"></span>    <span class="kt">char</span> <span class="o">*</span><span class="n">sflags</span><span class="p">;</span> <span class="c1">// 字符串表示FLAG
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">flags</span><span class="p">;</span>   <span class="c1">// 实际FLAG
</span><span class="c1"></span>    <span class="cm">/* Use a function to determine keys arguments in a command line.
</span><span class="cm">     * Used for Redis Cluster redirect. */</span>
    <span class="n">redisGetKeysProc</span> <span class="o">*</span><span class="n">getkeys_proc</span><span class="p">;</span>
    <span class="c1">// 指定哪个参数为key
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">firstkey</span><span class="p">;</span> <span class="cm">/* The first argument that&#39;s a key (0 = no keys) */</span>
    <span class="kt">int</span> <span class="n">lastkey</span><span class="p">;</span>  <span class="cm">/* The last argument that&#39;s a key */</span>
    <span class="kt">int</span> <span class="n">keystep</span><span class="p">;</span>  <span class="cm">/* The step between first and last key */</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">microseconds</span><span class="p">,</span> <span class="n">calls</span><span class="p">;</span> <span class="c1">// 统计信息
</span><span class="c1"></span><span class="p">};</span>

<span class="k">struct</span> <span class="n">redisCommand</span> <span class="n">redisCommandTable</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">{</span><span class="s">&#34;get&#34;</span><span class="p">,</span><span class="n">getCommand</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="s">&#34;r&#34;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
    <span class="p">{</span><span class="s">&#34;set&#34;</span><span class="p">,</span><span class="n">setCommand</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="s">&#34;wm&#34;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
  	<span class="c1">// ...
</span><span class="c1"></span><span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>这样通过一个命令表，能够快捷的找到命令实现及相关参数。</p>
<h3 id="命令的执行-1">命令的执行</h3>
<p>找到命令之后即可执行命令。继续看processCommand()函数。在经过一系列特殊情况处理之后，开始执行命令。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 命令的执行
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">processCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
  	<span class="c1">// ...查找命令
</span><span class="c1"></span>  
    <span class="c1">// 一系列特殊情况处理
</span><span class="c1"></span>
    <span class="cm">/* Exec the command */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_MULTI</span> <span class="o">&amp;&amp;</span>
        <span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">!=</span> <span class="n">execCommand</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">!=</span> <span class="n">discardCommand</span> <span class="o">&amp;&amp;</span>
        <span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">!=</span> <span class="n">multiCommand</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">!=</span> <span class="n">watchCommand</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// 事务状态下的特殊处理
</span><span class="c1"></span>        <span class="n">queueMultiCommand</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">queued</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>

        <span class="c1">// 执行命令
</span><span class="c1"></span>        <span class="n">call</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">REDIS_CALL_FULL</span><span class="p">);</span>
        <span class="n">c</span><span class="o">-&gt;</span><span class="n">woff</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">master_repl_offset</span><span class="p">;</span>

        <span class="c1">// 处理那些解除阻塞的键
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">listLength</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">ready_keys</span><span class="p">))</span>
            <span class="n">handleClientsBlockedOnLists</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 执行命令
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">call</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">dirty</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">duration</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">client_old_flags</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span><span class="p">;</span>

    <span class="c1">// 命令发送倒MONITOR
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">listLength</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">monitors</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
        <span class="o">!</span><span class="n">server</span><span class="p">.</span><span class="n">loading</span> <span class="o">&amp;&amp;</span>
        <span class="o">!</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">REDIS_CMD_SKIP_MONITOR</span><span class="o">|</span><span class="n">REDIS_CMD_ADMIN</span><span class="p">)))</span>
    <span class="p">{</span>
        <span class="n">replicationFeedMonitors</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">server</span><span class="p">.</span><span class="n">monitors</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// 执行命令
</span><span class="c1"></span>    <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="n">REDIS_FORCE_AOF</span><span class="o">|</span><span class="n">REDIS_FORCE_REPL</span><span class="p">);</span>
    <span class="n">redisOpArrayInit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">.</span><span class="n">also_propagate</span><span class="p">);</span>
    <span class="n">dirty</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">dirty</span><span class="p">;</span>
    <span class="n">start</span> <span class="o">=</span> <span class="n">ustime</span><span class="p">();</span>
    <span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span><span class="p">(</span><span class="n">c</span><span class="p">);</span> <span class="c1">// 命令实现函数
</span><span class="c1"></span>    <span class="n">duration</span> <span class="o">=</span> <span class="n">ustime</span><span class="p">()</span><span class="o">-</span><span class="n">start</span><span class="p">;</span> <span class="c1">// 执行时间
</span><span class="c1"></span>    <span class="n">dirty</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">dirty</span><span class="o">-</span><span class="n">dirty</span><span class="p">;</span> <span class="c1">// 命令执行dirty的数量
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">dirty</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">dirty</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="c1">// ... 一系列附加操作
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>最终调用到setCommand(redisClient *c)函数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="cm">/* SET key value [NX] [XX] [EX &lt;seconds&gt;] [PX &lt;milliseconds&gt;] */</span>
<span class="kt">void</span> <span class="nf">setCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>
    <span class="n">robj</span> <span class="o">*</span><span class="n">expire</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">unit</span> <span class="o">=</span> <span class="n">UNIT_SECONDS</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">flags</span> <span class="o">=</span> <span class="n">REDIS_SET_NO_FLAGS</span><span class="p">;</span>

    <span class="c1">// 设置选项参数
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">char</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">;</span>
        <span class="n">robj</span> <span class="o">*</span><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">?</span> <span class="nb">NULL</span> <span class="o">:</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>

        <span class="k">if</span> <span class="p">((</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;n&#39;</span> <span class="o">||</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;N&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
            <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;x&#39;</span> <span class="o">||</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;X&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_SET_NX</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;x&#39;</span> <span class="o">||</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;X&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
                   <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;x&#39;</span> <span class="o">||</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;X&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_SET_XX</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;e&#39;</span> <span class="o">||</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;E&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
                   <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;x&#39;</span> <span class="o">||</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;X&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">next</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">unit</span> <span class="o">=</span> <span class="n">UNIT_SECONDS</span><span class="p">;</span>
            <span class="n">expire</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;p&#39;</span> <span class="o">||</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;P&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
                   <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;x&#39;</span> <span class="o">||</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;X&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">next</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">unit</span> <span class="o">=</span> <span class="n">UNIT_MILLISECONDS</span><span class="p">;</span>
            <span class="n">expire</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">syntaxerr</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 尝试编码转换
</span><span class="c1"></span>    <span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">tryObjectEncoding</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>

    <span class="c1">// set命令通用的实现
</span><span class="c1"></span>    <span class="n">setGenericCommand</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">flags</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="n">expire</span><span class="p">,</span><span class="n">unit</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">setGenericCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">val</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">expire</span><span class="p">,</span> <span class="kt">int</span> <span class="n">unit</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">ok_reply</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">abort_reply</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">milliseconds</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* initialized to avoid any harmness warning */</span>

    <span class="c1">// 取出过期时间 expire为过期时间参数
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">expire</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">getLongLongFromObjectOrReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">expire</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">milliseconds</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">!=</span> <span class="n">REDIS_OK</span><span class="p">)</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">milliseconds</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">addReplyErrorFormat</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;invalid expire time in %s&#34;</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">unit</span> <span class="o">==</span> <span class="n">UNIT_SECONDS</span><span class="p">)</span> <span class="n">milliseconds</span> <span class="o">*=</span> <span class="mi">1000</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 如果REDIS_SET_NX REDIS_SET_XX 判断是否符合规范
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">((</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_SET_NX</span> <span class="o">&amp;&amp;</span> <span class="n">lookupKeyWrite</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">||</span>
        <span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_SET_XX</span> <span class="o">&amp;&amp;</span> <span class="n">lookupKeyWrite</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">abort_reply</span> <span class="o">?</span> <span class="nl">abort_reply</span> <span class="p">:</span> <span class="n">shared</span><span class="p">.</span><span class="n">nullbulk</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 设置键
</span><span class="c1"></span>    <span class="n">setKey</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">);</span>
    <span class="n">server</span><span class="p">.</span><span class="n">dirty</span><span class="o">++</span><span class="p">;</span> <span class="c1">// 脏计数增加
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">expire</span><span class="p">)</span> <span class="n">setExpire</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">mstime</span><span class="p">()</span><span class="o">+</span><span class="n">milliseconds</span><span class="p">);</span> <span class="c1">// 设置过期时间
</span><span class="c1"></span>    <span class="n">notifyKeyspaceEvent</span><span class="p">(</span><span class="n">REDIS_NOTIFY_STRING</span><span class="p">,</span><span class="s">&#34;set&#34;</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">);</span> <span class="c1">// 发送事件通知
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">expire</span><span class="p">)</span> <span class="n">notifyKeyspaceEvent</span><span class="p">(</span><span class="n">REDIS_NOTIFY_GENERIC</span><span class="p">,</span>
        <span class="s">&#34;expire&#34;</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">);</span><span class="c1">// 发送事件通知
</span><span class="c1"></span>    <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">ok_reply</span> <span class="o">?</span> <span class="nl">ok_reply</span> <span class="p">:</span> <span class="n">shared</span><span class="p">.</span><span class="n">ok</span><span class="p">);</span> <span class="c1">// 回复
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="回复客户端">回复客户端</h2>
<p>在执行命令出错或者成功后使用addReply()生成回复信息，该函数将通过prepareClientToWrite()产生回复客户端的文件事件，同时将回复内容复制到回复缓存区。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">addReply</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">prepareClientToWrite</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">!=</span> <span class="n">REDIS_OK</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span> <span class="c1">// 生成回复客户端的文件事件
</span><span class="c1"></span>
    <span class="c1">// 根据不同情况，生成回复内容,写入不同的缓冲区
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">sdsEncodedObject</span><span class="p">(</span><span class="n">obj</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_addReplyToBuffer</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">obj</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">,</span><span class="n">sdslen</span><span class="p">(</span><span class="n">obj</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">))</span> <span class="o">!=</span> <span class="n">REDIS_OK</span><span class="p">)</span>
            <span class="n">_addReplyObjectToList</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">obj</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">obj</span><span class="o">-&gt;</span><span class="n">encoding</span> <span class="o">==</span> <span class="n">REDIS_ENCODING_INT</span><span class="p">)</span> <span class="p">{</span>
        <span class="cm">/* Optimization: if there is room in the static buffer for 32 bytes
</span><span class="cm">         * (more than the max chars a 64 bit integer can take as string) we
</span><span class="cm">         * avoid decoding the object and go for the lower level approach. */</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">listLength</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">reply</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">)</span> <span class="o">-</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">bufpos</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">32</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
            <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>

            <span class="n">len</span> <span class="o">=</span> <span class="n">ll2string</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">),(</span><span class="kt">long</span><span class="p">)</span><span class="n">obj</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_addReplyToBuffer</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">buf</span><span class="p">,</span><span class="n">len</span><span class="p">)</span> <span class="o">==</span> <span class="n">REDIS_OK</span><span class="p">)</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="cm">/* else... continue with the normal code path, but should never
</span><span class="cm">             * happen actually since we verified there is room. */</span>
        <span class="p">}</span>
        <span class="n">obj</span> <span class="o">=</span> <span class="n">getDecodedObject</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_addReplyToBuffer</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">obj</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">,</span><span class="n">sdslen</span><span class="p">(</span><span class="n">obj</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">))</span> <span class="o">!=</span> <span class="n">REDIS_OK</span><span class="p">)</span>
            <span class="n">_addReplyObjectToList</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">obj</span><span class="p">);</span>
        <span class="n">decrRefCount</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">redisPanic</span><span class="p">(</span><span class="s">&#34;Wrong obj-&gt;encoding in addReply()&#34;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">prepareClientToWrite</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// lua 脚本伪客户端
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_LUA_CLIENT</span><span class="p">)</span> <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span>

    <span class="c1">// 客户端为REDIS_MASTER REDIS_MASTER_FORCE_REPLY
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">((</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_MASTER</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
        <span class="o">!</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_MASTER_FORCE_REPLY</span><span class="p">))</span> <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">fd</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span> <span class="cm">/* Fake client for AOF loading. */</span>

    <span class="c1">// 一般的客户端生成写事件
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">bufpos</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">listLength</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">reply</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
        <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">replstate</span> <span class="o">==</span> <span class="n">REDIS_REPL_NONE</span> <span class="o">||</span>
         <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">replstate</span> <span class="o">==</span> <span class="n">REDIS_REPL_ONLINE</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">repl_put_online_on_ack</span><span class="p">)))</span>
    <span class="p">{</span>
        <span class="cm">/* Try to install the write handler. */</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">aeCreateFileEvent</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">el</span><span class="p">,</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="n">AE_WRITABLE</span><span class="p">,</span>
                <span class="n">sendReplyToClient</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="o">==</span> <span class="n">AE_ERR</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">freeClientAsync</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="cm">/* Authorize the caller to queue in the output buffer of this client. */</span>
    <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>最终文件事件调用sendReplyToClient()回复客户端。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">sendReplyToClient</span><span class="p">(</span><span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">el</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">privdata</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mask</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="n">privdata</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">nwritten</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">totwritten</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">objlen</span><span class="p">;</span>
    <span class="n">size_t</span> <span class="n">objmem</span><span class="p">;</span>
    <span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">;</span>
    <span class="n">REDIS_NOTUSED</span><span class="p">(</span><span class="n">el</span><span class="p">);</span>
    <span class="n">REDIS_NOTUSED</span><span class="p">(</span><span class="n">mask</span><span class="p">);</span>

    <span class="c1">// 从缓存区获取数据，写入，直到写完
</span><span class="c1"></span>    <span class="k">while</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">bufpos</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">listLength</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">reply</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">bufpos</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">// 先写入回复缓冲区数据
</span><span class="c1"></span>            <span class="n">nwritten</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">buf</span><span class="o">+</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">sentlen</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">bufpos</span><span class="o">-</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">sentlen</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">nwritten</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span> <span class="c1">// 出错跳出
</span><span class="c1"></span>
            <span class="c1">// 成功计数
</span><span class="c1"></span>            <span class="n">c</span><span class="o">-&gt;</span><span class="n">sentlen</span> <span class="o">+=</span> <span class="n">nwritten</span><span class="p">;</span>
            <span class="n">totwritten</span> <span class="o">+=</span> <span class="n">nwritten</span><span class="p">;</span>

            <span class="c1">// 如果内容写完则清空两个计数器
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">sentlen</span> <span class="o">==</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">bufpos</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">c</span><span class="o">-&gt;</span><span class="n">bufpos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="n">c</span><span class="o">-&gt;</span><span class="n">sentlen</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>

            <span class="c1">// 回复缓冲区为空的话，在回复链表查找
</span><span class="c1"></span>            <span class="n">o</span> <span class="o">=</span> <span class="n">listNodeValue</span><span class="p">(</span><span class="n">listFirst</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">reply</span><span class="p">));</span>
            <span class="n">objlen</span> <span class="o">=</span> <span class="n">sdslen</span><span class="p">(</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">);</span>
            <span class="n">objmem</span> <span class="o">=</span> <span class="n">getStringObjectSdsUsedMemory</span><span class="p">(</span><span class="n">o</span><span class="p">);</span>

            <span class="c1">// 跳过空对象
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">objlen</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">listDelNode</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">reply</span><span class="p">,</span><span class="n">listFirst</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">reply</span><span class="p">));</span>
                <span class="n">c</span><span class="o">-&gt;</span><span class="n">reply_bytes</span> <span class="o">-=</span> <span class="n">objmem</span><span class="p">;</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="c1">// 写入
</span><span class="c1"></span>            <span class="n">nwritten</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">)</span><span class="o">+</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">sentlen</span><span class="p">,</span><span class="n">objlen</span><span class="o">-</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">sentlen</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">nwritten</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span> <span class="c1">// 出错跳出
</span><span class="c1"></span>
            <span class="c1">// 计数
</span><span class="c1"></span>            <span class="n">c</span><span class="o">-&gt;</span><span class="n">sentlen</span> <span class="o">+=</span> <span class="n">nwritten</span><span class="p">;</span>
            <span class="n">totwritten</span> <span class="o">+=</span> <span class="n">nwritten</span><span class="p">;</span>

            <span class="c1">// 如果汉冲去内容写入完毕，删除已经写入的节点
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">sentlen</span> <span class="o">==</span> <span class="n">objlen</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">listDelNode</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">reply</span><span class="p">,</span><span class="n">listFirst</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">reply</span><span class="p">));</span>
                <span class="n">c</span><span class="o">-&gt;</span><span class="n">sentlen</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="n">c</span><span class="o">-&gt;</span><span class="n">reply_bytes</span> <span class="o">-=</span> <span class="n">objmem</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="c1">// 写入量超过限制 在最大内存没设或者最大内存没使用完的情况下跳出
</span><span class="c1"></span>        <span class="n">server</span><span class="p">.</span><span class="n">stat_net_output_bytes</span> <span class="o">+=</span> <span class="n">totwritten</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">totwritten</span> <span class="o">&gt;</span> <span class="n">REDIS_MAX_WRITE_PER_EVENT</span> <span class="o">&amp;&amp;</span>
            <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">maxmemory</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span>
             <span class="n">zmalloc_used_memory</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">server</span><span class="p">.</span><span class="n">maxmemory</span><span class="p">))</span> <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 写入出错
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">nwritten</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EAGAIN</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">nwritten</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_VERBOSE</span><span class="p">,</span>
                <span class="s">&#34;Error writing to client: %s&#34;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
            <span class="n">freeClient</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">totwritten</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="cm">/* For clients representing masters we don&#39;t count sending data
</span><span class="cm">         * as an interaction, since we always send REPLCONF ACK commands
</span><span class="cm">         * that take some time to just fill the socket output buffer.
</span><span class="cm">         * We just rely on data / pings received for timeout detection. */</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_MASTER</span><span class="p">))</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">lastinteraction</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">unixtime</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">bufpos</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">listLength</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">reply</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">c</span><span class="o">-&gt;</span><span class="n">sentlen</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="c1">// 写完了删除write handler
</span><span class="c1"></span>        <span class="n">aeDeleteFileEvent</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">el</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span><span class="n">AE_WRITABLE</span><span class="p">);</span>

        <span class="c1">// 必要的话关闭客户端
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_CLOSE_AFTER_REPLY</span><span class="p">)</span> <span class="n">freeClient</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="结束">结束</h2>
<p>至此一个命令的旅程就结束了。</p>]]></description>
</item><item>
    <title>redis源码阅读-事件</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%BA%8B%E4%BB%B6/</link>
    <pubDate>Sun, 16 Jul 2017 22:24:01 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%BA%8B%E4%BB%B6/</guid>
    <description><![CDATA[<h1 id="redis源码阅读-事件">redis源码阅读-事件</h1>
<p>redis服务器是一个事件驱动程序。当触发一个事件时,redis会创建一个事件,放入到待处理的队列，依次进行处理。</p>
<p>redis事件分为文件时间和时间事件。</p>
<p>文件事件：文件事件是对套接字操作的抽象，当服务器与客户端进行通讯，会产生出各种文件事件，而服务器则通过监听并处理这些事件来完成一系列网络通讯操作。</p>
<p>时间事件：redis一些操作是需要定时进行执行的，而时间事件就是对这类操作的抽象。</p>
<h2 id="事件的实现">事件的实现</h2>
<p>以下是事件结构体定义。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="cm">/* File event structure */</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">aeFileEvent</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">mask</span><span class="p">;</span> <span class="c1">// one of AE_(READABLE|WRITABLE) 类型
</span><span class="c1"></span>    <span class="n">aeFileProc</span> <span class="o">*</span><span class="n">rfileProc</span><span class="p">;</span> <span class="c1">// 读事件处理器
</span><span class="c1"></span>    <span class="n">aeFileProc</span> <span class="o">*</span><span class="n">wfileProc</span><span class="p">;</span> <span class="c1">// 写事件处理器
</span><span class="c1"></span>    <span class="kt">void</span> <span class="o">*</span><span class="n">clientData</span><span class="p">;</span> <span class="c1">// 多路复用库的私有数据
</span><span class="c1"></span><span class="p">}</span> <span class="n">aeFileEvent</span><span class="p">;</span>

<span class="cm">/* Time event structure */</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">aeTimeEvent</span> <span class="p">{</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">id</span><span class="p">;</span>  <span class="c1">// 唯一标志
</span><span class="c1"></span>    <span class="kt">long</span> <span class="n">when_sec</span><span class="p">;</span> <span class="c1">// 事件到达事件s
</span><span class="c1"></span>    <span class="kt">long</span> <span class="n">when_ms</span><span class="p">;</span>  <span class="c1">// 事件到达事件ms
</span><span class="c1"></span>    <span class="n">aeTimeProc</span> <span class="o">*</span><span class="n">timeProc</span><span class="p">;</span> <span class="c1">// 事件处理函数
</span><span class="c1"></span>    <span class="n">aeEventFinalizerProc</span> <span class="o">*</span><span class="n">finalizerProc</span><span class="p">;</span> <span class="c1">// 事件释放函数
</span><span class="c1"></span>    <span class="kt">void</span> <span class="o">*</span><span class="n">clientData</span><span class="p">;</span> <span class="c1">// 多路复用库的私有数据
</span><span class="c1"></span>    <span class="k">struct</span> <span class="n">aeTimeEvent</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span> <span class="c1">//　指向下一个时间事件结构，形成链表
</span><span class="c1"></span><span class="p">}</span> <span class="n">aeTimeEvent</span><span class="p">;</span>

<span class="cm">/* A fired event */</span>
<span class="c1">// 触发的事件结构体
</span><span class="c1"></span><span class="k">typedef</span> <span class="k">struct</span> <span class="n">aeFiredEvent</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span> <span class="c1">// 文件事件描述符
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">mask</span><span class="p">;</span>　<span class="c1">// one of AE_(READABLE|WRITABLE) 类型
</span><span class="c1"></span><span class="p">}</span> <span class="n">aeFiredEvent</span><span class="p">;</span>

<span class="c1">// 事件循环结构体
</span><span class="c1"></span><span class="k">typedef</span> <span class="k">struct</span> <span class="n">aeEventLoop</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">maxfd</span><span class="p">;</span>   <span class="c1">// 当前注册的最大描述符
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">setsize</span><span class="p">;</span> <span class="c1">// 需要监听的描述符个数
</span><span class="c1"></span>    <span class="kt">long</span> <span class="kt">long</span> <span class="n">timeEventNextId</span><span class="p">;</span> <span class="c1">// 下一个时间事件ID
</span><span class="c1"></span>    <span class="n">time_t</span> <span class="n">lastTime</span><span class="p">;</span>     <span class="c1">// 上一次时间循环时间
</span><span class="c1"></span>    <span class="n">aeFileEvent</span> <span class="o">*</span><span class="n">events</span><span class="p">;</span> <span class="c1">// 注册要使用的文件时间
</span><span class="c1"></span>    <span class="n">aeFiredEvent</span> <span class="o">*</span><span class="n">fired</span><span class="p">;</span> <span class="c1">// 已准备好，待处理事件
</span><span class="c1"></span>    <span class="n">aeTimeEvent</span> <span class="o">*</span><span class="n">timeEventHead</span><span class="p">;</span> <span class="c1">// 时间事件
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">stop</span><span class="p">;</span> <span class="c1">// 事件处理器开关
</span><span class="c1"></span>    <span class="kt">void</span> <span class="o">*</span><span class="n">apidata</span><span class="p">;</span> <span class="c1">// 处理多路服用库的私有数据
</span><span class="c1"></span>    <span class="n">aeBeforeSleepProc</span> <span class="o">*</span><span class="n">beforesleep</span><span class="p">;</span> <span class="c1">// 处理事件前要执行的函数
</span><span class="c1"></span><span class="p">}</span> <span class="n">aeEventLoop</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="事件处理流程">事件处理流程</h2>
<p>redis使用i/o多路复用程序同时监听多个套接字，并根据套接字目前执行的任务来为套接字关联不同的事件处理器。文件处理流程如图。时间事件则定时执行。</p>

图片(来自《Redis设计与实现》
## 事件的API
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="cm">/* Prototypes */</span>
<span class="n">aeEventLoop</span> <span class="o">*</span><span class="nf">aeCreateEventLoop</span><span class="p">(</span><span class="kt">int</span> <span class="n">setsize</span><span class="p">);</span> <span class="c1">// 初始化时间处理器状态
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">aeDeleteEventLoop</span><span class="p">(</span><span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">eventLoop</span><span class="p">);</span> <span class="c1">// 删除事件处理器
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">aeStop</span><span class="p">(</span><span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">eventLoop</span><span class="p">);</span> <span class="c1">// 停止事件处理器
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">aeCreateFileEvent</span><span class="p">(</span><span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">eventLoop</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mask</span><span class="p">,</span>
        <span class="n">aeFileProc</span> <span class="o">*</span><span class="n">proc</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">clientData</span><span class="p">);</span> <span class="c1">// 根据mask参数，监听fd文件的状态，fd可用，执行proc函数
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">aeDeleteFileEvent</span><span class="p">(</span><span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">eventLoop</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mask</span><span class="p">);</span><span class="c1">// 将fd从mask指定的监听队列中删除
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">aeGetFileEvents</span><span class="p">(</span><span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">eventLoop</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fd</span><span class="p">);</span> <span class="c1">// 获取给定fd正在监听的事件类型
</span><span class="c1"></span><span class="kt">long</span> <span class="kt">long</span> <span class="nf">aeCreateTimeEvent</span><span class="p">(</span><span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">eventLoop</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">milliseconds</span><span class="p">,</span>
        <span class="n">aeTimeProc</span> <span class="o">*</span><span class="n">proc</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">clientData</span><span class="p">,</span>
        <span class="n">aeEventFinalizerProc</span> <span class="o">*</span><span class="n">finalizerProc</span><span class="p">);</span> <span class="c1">// 创建时间事件
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">aeDeleteTimeEvent</span><span class="p">(</span><span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">eventLoop</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">id</span><span class="p">);</span> <span class="c1">// 删除给定ID的时间事件
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">aeProcessEvents</span><span class="p">(</span><span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">eventLoop</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">);</span> <span class="c1">// 处理所有已经到达时间的事件，以及所有就绪的文件事件
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">aeWait</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mask</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">milliseconds</span><span class="p">);</span> <span class="c1">// 指定时间等待fd变为可读、可写
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">aeMain</span><span class="p">(</span><span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">eventLoop</span><span class="p">);</span><span class="c1">// 事件处理主循环
</span><span class="c1"></span><span class="kt">char</span> <span class="o">*</span><span class="nf">aeGetApiName</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span> <span class="c1">// 返回所使用的多路服用库的名字
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">aeSetBeforeSleepProc</span><span class="p">(</span><span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">eventLoop</span><span class="p">,</span> <span class="n">aeBeforeSleepProc</span> <span class="o">*</span><span class="n">beforesleep</span><span class="p">);</span> <span class="c1">// 设置事件前所需要执行的函数
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">aeGetSetSize</span><span class="p">(</span><span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">eventLoop</span><span class="p">);</span> <span class="c1">// 返回当前事件槽大小
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">aeResizeSetSize</span><span class="p">(</span><span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">eventLoop</span><span class="p">,</span> <span class="kt">int</span> <span class="n">setsize</span><span class="p">);</span> <span class="c1">// 调整事件槽大小
</span></code></pre></td></tr></table>
</div>
</div><h2 id="文件事件的创建">文件事件的创建</h2>
<p>文件事件有三个方面需要创建：</p>
<ul>
<li>连接应答处理器，用来处理对连接服务器监听套接字的客户端进行应答。</li>
<li>命令请求处理器，用来处理从套接字读取客户端发送的命令请求内容。</li>
<li>命令回复处理器，用来处理执行命令后得到的命令回复通过套接字返回给客户端。</li>
</ul>
<h3 id="连接应答处理器">连接应答处理器</h3>
<p>acceptTcpHandler是连接应答处理器，当监听套接字产生AE_READABLE事件时，就会引发连接应答处理器。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">initServer</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// ...
</span><span class="c1"></span>	<span class="c1">// 为 TCP 连接关联连接应答（accept）处理器
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">server</span><span class="p">.</span><span class="n">ipfd_count</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">aeCreateFileEvent</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">el</span><span class="p">,</span> <span class="n">server</span><span class="p">.</span><span class="n">ipfd</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">AE_READABLE</span><span class="p">,</span>
            <span class="n">acceptTcpHandler</span><span class="p">,</span><span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="n">AE_ERR</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">redisPanic</span><span class="p">(</span>
                    <span class="s">&#34;Unrecoverable error creating server.ipfd file event.&#34;</span><span class="p">);</span>
            <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 为本地套接字关联应答处理器
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">sofd</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">aeCreateFileEvent</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">el</span><span class="p">,</span><span class="n">server</span><span class="p">.</span><span class="n">sofd</span><span class="p">,</span><span class="n">AE_READABLE</span><span class="p">,</span>
        <span class="n">acceptUnixHandler</span><span class="p">,</span><span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="n">AE_ERR</span><span class="p">)</span> <span class="n">redisPanic</span><span class="p">(</span><span class="s">&#34;Unrecoverable error creating server.sofd file event.&#34;</span><span class="p">);</span>
  	<span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="命令请求处理器">命令请求处理器</h3>
<p>在连接应答处理器调用的函数acceptTcpHandler中，会在连接成功之后，创建命令请求处理器readQueryFromClient()，在客户端发送的命令请求时，调用命令请求处理器进行处理。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 创建一个 TCP 连接处理器
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">acceptTcpHandler</span><span class="p">(</span><span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">el</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">privdata</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mask</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">cport</span><span class="p">,</span> <span class="n">cfd</span><span class="p">,</span> <span class="n">max</span> <span class="o">=</span> <span class="n">MAX_ACCEPTS_PER_CALL</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">cip</span><span class="p">[</span><span class="n">REDIS_IP_STR_LEN</span><span class="p">];</span>
    <span class="n">REDIS_NOTUSED</span><span class="p">(</span><span class="n">el</span><span class="p">);</span>
    <span class="n">REDIS_NOTUSED</span><span class="p">(</span><span class="n">mask</span><span class="p">);</span>
    <span class="n">REDIS_NOTUSED</span><span class="p">(</span><span class="n">privdata</span><span class="p">);</span>

    <span class="k">while</span><span class="p">(</span><span class="n">max</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// accept 客户端连接
</span><span class="c1"></span>        <span class="n">cfd</span> <span class="o">=</span> <span class="n">anetTcpAccept</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">neterr</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">cip</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">cip</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">cport</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">cfd</span> <span class="o">==</span> <span class="n">ANET_ERR</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">!=</span> <span class="n">EWOULDBLOCK</span><span class="p">)</span>
                <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span>
                    <span class="s">&#34;Accepting client connection: %s&#34;</span><span class="p">,</span> <span class="n">server</span><span class="p">.</span><span class="n">neterr</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_VERBOSE</span><span class="p">,</span><span class="s">&#34;Accepted %s:%d&#34;</span><span class="p">,</span> <span class="n">cip</span><span class="p">,</span> <span class="n">cport</span><span class="p">);</span>

      	<span class="c1">// 连接完成，创建一个客户端状态
</span><span class="c1"></span>        <span class="n">acceptCommonHandler</span><span class="p">(</span><span class="n">cfd</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#define MAX_ACCEPTS_PER_CALL 1000
</span><span class="cp"></span><span class="k">static</span> <span class="kt">void</span> <span class="nf">acceptCommonHandler</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 创建客户端
</span><span class="c1"></span>    <span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">c</span> <span class="o">=</span> <span class="n">createClient</span><span class="p">(</span><span class="n">fd</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span>
            <span class="s">&#34;Error registering fd event for the new client: %s (fd=%d)&#34;</span><span class="p">,</span>
            <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">),</span><span class="n">fd</span><span class="p">);</span>
        <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span> <span class="cm">/* May be already closed, just ignore errors */</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 达到上限
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">listLength</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">clients</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">server</span><span class="p">.</span><span class="n">maxclients</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">char</span> <span class="o">*</span><span class="n">err</span> <span class="o">=</span> <span class="s">&#34;-ERR max number of clients reached</span><span class="se">\r\n</span><span class="s">&#34;</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">write</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span><span class="n">err</span><span class="p">,</span><span class="n">strlen</span><span class="p">(</span><span class="n">err</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">}</span>
        <span class="c1">// 更新拒绝连接数
</span><span class="c1"></span>        <span class="n">server</span><span class="p">.</span><span class="n">stat_rejected_conn</span><span class="o">++</span><span class="p">;</span>
        <span class="n">freeClient</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
  
    <span class="n">server</span><span class="p">.</span><span class="n">stat_numconnections</span><span class="o">++</span><span class="p">;</span>
    <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">flags</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">redisClient</span> <span class="o">*</span><span class="nf">createClient</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="n">zmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">redisClient</span><span class="p">));</span>

    <span class="c1">// -1时使用的是无网络连接的伪客户端
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">anetNonBlock</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">fd</span><span class="p">);</span> <span class="c1">// 非阻塞
</span><span class="c1"></span>        <span class="n">anetEnableTcpNoDelay</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">fd</span><span class="p">);</span> <span class="c1">// 关闭nagle算法，那个合并小报文的算法
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">tcpkeepalive</span><span class="p">)</span>
            <span class="n">anetKeepAlive</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">fd</span><span class="p">,</span><span class="n">server</span><span class="p">.</span><span class="n">tcpkeepalive</span><span class="p">);</span>

        <span class="c1">// 创建命令请求处理器
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">aeCreateFileEvent</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">el</span><span class="p">,</span><span class="n">fd</span><span class="p">,</span><span class="n">AE_READABLE</span><span class="p">,</span>
            <span class="n">readQueryFromClient</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="o">==</span> <span class="n">AE_ERR</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
            <span class="n">zfree</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
            <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
	<span class="c1">// 客户端的初始化
</span><span class="c1"></span>  	<span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="命令回复处理器">命令回复处理器</h3>
<p>当服务器有命令回复需要传送给客户端时，服务器将客户端套接字的AE_WRITABLE事件与命令回复处理器关联，当客户端准备好接收时，就会执行AE_WRITABLE事件，触发命令回复处理器。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">prepareClientToWrite</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_LUA_CLIENT</span><span class="p">)</span> <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">((</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_MASTER</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
        <span class="o">!</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_MASTER_FORCE_REPLY</span><span class="p">))</span> <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">fd</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span> <span class="cm">/* Fake client */</span>

    <span class="c1">// 为客户端套接字安装写处理器到事件循环
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">bufpos</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">listLength</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">reply</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
        <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">replstate</span> <span class="o">==</span> <span class="n">REDIS_REPL_NONE</span> <span class="o">||</span>
         <span class="n">c</span><span class="o">-&gt;</span><span class="n">replstate</span> <span class="o">==</span> <span class="n">REDIS_REPL_ONLINE</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
        <span class="n">aeCreateFileEvent</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">el</span><span class="p">,</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="n">AE_WRITABLE</span><span class="p">,</span>
        <span class="n">sendReplyToClient</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="o">==</span> <span class="n">AE_ERR</span><span class="p">)</span> <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>

    <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="时间事件的创建">时间事件的创建</h2>
<p>redis在初始化时创建时间时间，用来周期执行serverCron()。</p>
<p>serverCron()主要功能：</p>
<ul>
<li>更新服务器的各类统计信息</li>
<li>清理过期的键值对</li>
<li>关闭和清理连接失效的客户端</li>
<li>尝试AOF\RDB持久化</li>
<li>主服务器则定期同步</li>
<li>集群模式，对集群定期同步和连接测试</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">initServer</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// ...
</span><span class="c1"></span>    <span class="c1">// 为 serverCron() 创建时间事件
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">aeCreateTimeEvent</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">el</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">serverCron</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="n">AE_ERR</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">redisPanic</span><span class="p">(</span><span class="s">&#34;Can&#39;t create the serverCron time event.&#34;</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
  	<span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="事件循环">事件循环</h2>
<p>事件循环主函数为aeMain()，该函数在redis的main()函数中被调用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
  	<span class="c1">// ...
</span><span class="c1"></span>    <span class="c1">// 运行事件处理器，一直到服务器关闭为止
</span><span class="c1"></span>    <span class="n">aeSetBeforeSleepProc</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">el</span><span class="p">,</span><span class="n">beforeSleep</span><span class="p">);</span> <span class="c1">// 设置事件前调用函数
</span><span class="c1"></span>    <span class="n">aeMain</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">el</span><span class="p">);</span>
  
    <span class="c1">// 服务器关闭，停止事件循环
</span><span class="c1"></span>    <span class="n">aeDeleteEventLoop</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">el</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="err">｝</span>
</code></pre></td></tr></table>
</div>
</div><p>事件循环的实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span><span class="lnt">95
</span><span class="lnt">96
</span><span class="lnt">97
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 事件处理器的主循环
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">aeMain</span><span class="p">(</span><span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">eventLoop</span><span class="p">)</span> <span class="p">{</span>

    <span class="n">eventLoop</span><span class="o">-&gt;</span><span class="n">stop</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">eventLoop</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 如果有需要在事件处理前执行的函数，那么运行它
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">eventLoop</span><span class="o">-&gt;</span><span class="n">beforesleep</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="n">eventLoop</span><span class="o">-&gt;</span><span class="n">beforesleep</span><span class="p">(</span><span class="n">eventLoop</span><span class="p">);</span>

        <span class="c1">// 开始处理事件
</span><span class="c1"></span>        <span class="n">aeProcessEvents</span><span class="p">(</span><span class="n">eventLoop</span><span class="p">,</span> <span class="n">AE_ALL_EVENTS</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 事件处理函数
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">aeProcessEvents</span><span class="p">(</span><span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">eventLoop</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">processed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">numevents</span><span class="p">;</span>

    <span class="c1">// 没有需要处理的事件则返回
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">AE_TIME_EVENTS</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">AE_FILE_EVENTS</span><span class="p">))</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">eventLoop</span><span class="o">-&gt;</span><span class="n">maxfd</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span>
        <span class="p">((</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">AE_TIME_EVENTS</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">AE_DONT_WAIT</span><span class="p">)))</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>
        <span class="n">aeTimeEvent</span> <span class="o">*</span><span class="n">shortest</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="k">struct</span> <span class="n">timeval</span> <span class="n">tv</span><span class="p">,</span> <span class="o">*</span><span class="n">tvp</span><span class="p">;</span>

        <span class="c1">// 获取最近的时间事件
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">AE_TIME_EVENTS</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">AE_DONT_WAIT</span><span class="p">))</span>
            <span class="n">shortest</span> <span class="o">=</span> <span class="n">aeSearchNearestTimer</span><span class="p">(</span><span class="n">eventLoop</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">shortest</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">long</span> <span class="n">now_sec</span><span class="p">,</span> <span class="n">now_ms</span><span class="p">;</span>

            <span class="cm">/* Calculate the time missing for the nearest
</span><span class="cm">             * timer to fire. */</span>
            <span class="n">aeGetTime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">now_sec</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">now_ms</span><span class="p">);</span>
            <span class="n">tvp</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tv</span><span class="p">;</span>
            <span class="n">tvp</span><span class="o">-&gt;</span><span class="n">tv_sec</span> <span class="o">=</span> <span class="n">shortest</span><span class="o">-&gt;</span><span class="n">when_sec</span> <span class="o">-</span> <span class="n">now_sec</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">shortest</span><span class="o">-&gt;</span><span class="n">when_ms</span> <span class="o">&lt;</span> <span class="n">now_ms</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">tvp</span><span class="o">-&gt;</span><span class="n">tv_usec</span> <span class="o">=</span> <span class="p">((</span><span class="n">shortest</span><span class="o">-&gt;</span><span class="n">when_ms</span><span class="o">+</span><span class="mi">1000</span><span class="p">)</span> <span class="o">-</span> <span class="n">now_ms</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="p">;</span>
                <span class="n">tvp</span><span class="o">-&gt;</span><span class="n">tv_sec</span> <span class="o">--</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">tvp</span><span class="o">-&gt;</span><span class="n">tv_usec</span> <span class="o">=</span> <span class="p">(</span><span class="n">shortest</span><span class="o">-&gt;</span><span class="n">when_ms</span> <span class="o">-</span> <span class="n">now_ms</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="c1">// 获取要执行事件事件，要等待的时间
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">tvp</span><span class="o">-&gt;</span><span class="n">tv_sec</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">tvp</span><span class="o">-&gt;</span><span class="n">tv_sec</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">tvp</span><span class="o">-&gt;</span><span class="n">tv_usec</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">tvp</span><span class="o">-&gt;</span><span class="n">tv_usec</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// 没有时间事件
</span><span class="c1"></span>            <span class="c1">// 根据AE_DONT_WAIT参数来设置文件事件的阻塞、阻塞时间
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">AE_DONT_WAIT</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">tv</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">=</span> <span class="n">tv</span><span class="p">.</span><span class="n">tv_usec</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="n">tvp</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tv</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="cm">/* Otherwise we can block */</span>
                <span class="n">tvp</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="cm">/* wait forever */</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// 调用io复用函数获取准备好的事件，底层使用select或epoll或其他实现
</span><span class="c1"></span>      	<span class="c1">// tvp阻塞时间
</span><span class="c1"></span>        <span class="n">numevents</span> <span class="o">=</span> <span class="n">aeApiPoll</span><span class="p">(</span><span class="n">eventLoop</span><span class="p">,</span> <span class="n">tvp</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">numevents</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">// 获取所有能够执行的文件事件，并执行
</span><span class="c1"></span>            <span class="n">aeFileEvent</span> <span class="o">*</span><span class="n">fe</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">eventLoop</span><span class="o">-&gt;</span><span class="n">events</span><span class="p">[</span><span class="n">eventLoop</span><span class="o">-&gt;</span><span class="n">fired</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">fd</span><span class="p">];</span>
            <span class="kt">int</span> <span class="n">mask</span> <span class="o">=</span> <span class="n">eventLoop</span><span class="o">-&gt;</span><span class="n">fired</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">mask</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">eventLoop</span><span class="o">-&gt;</span><span class="n">fired</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">fd</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">rfired</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

	        <span class="cm">/* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already processed
</span><span class="cm">             * event removed an element that fired and we still didn&#39;t
</span><span class="cm">             * processed, so we check if the event is still valid. */</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">fe</span><span class="o">-&gt;</span><span class="n">mask</span> <span class="o">&amp;</span> <span class="n">mask</span> <span class="o">&amp;</span> <span class="n">AE_READABLE</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// 读事件
</span><span class="c1"></span>                <span class="n">rfired</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                <span class="n">fe</span><span class="o">-&gt;</span><span class="n">rfileProc</span><span class="p">(</span><span class="n">eventLoop</span><span class="p">,</span><span class="n">fd</span><span class="p">,</span><span class="n">fe</span><span class="o">-&gt;</span><span class="n">clientData</span><span class="p">,</span><span class="n">mask</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">fe</span><span class="o">-&gt;</span><span class="n">mask</span> <span class="o">&amp;</span> <span class="n">mask</span> <span class="o">&amp;</span> <span class="n">AE_WRITABLE</span><span class="p">)</span> <span class="p">{</span>

                <span class="c1">// 写事件
</span><span class="c1"></span>                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">rfired</span> <span class="o">||</span> <span class="n">fe</span><span class="o">-&gt;</span><span class="n">wfileProc</span> <span class="o">!=</span> <span class="n">fe</span><span class="o">-&gt;</span><span class="n">rfileProc</span><span class="p">)</span>
                    <span class="n">fe</span><span class="o">-&gt;</span><span class="n">wfileProc</span><span class="p">(</span><span class="n">eventLoop</span><span class="p">,</span><span class="n">fd</span><span class="p">,</span><span class="n">fe</span><span class="o">-&gt;</span><span class="n">clientData</span><span class="p">,</span><span class="n">mask</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">processed</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="cm">/* Check time events */</span>
    <span class="c1">// 执行时间事件，在阻塞等待一段时间之后，时间事件已经能够执行
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">AE_TIME_EVENTS</span><span class="p">)</span>
        <span class="n">processed</span> <span class="o">+=</span> <span class="n">processTimeEvents</span><span class="p">(</span><span class="n">eventLoop</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">processed</span><span class="p">;</span> <span class="cm">/* return the number of processed file/time events */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="小结">小结</h2>
<p>事件其实不算复杂，整个redis没有太多的事件。但是要理解IO多路服用和redis事件的调用逻辑。理清楚之后就比较好办了。</p>]]></description>
</item><item>
    <title>redis源码阅读-事务</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%BA%8B%E5%8A%A1/</link>
    <pubDate>Sun, 16 Jul 2017 16:11:27 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%BA%8B%E5%8A%A1/</guid>
    <description><![CDATA[<p>redis的事务提供了一种将单个命令请求打包，然后一次性、按照顺序执行多个命令的机制，这种方式服务器会一次性把命令执行完，中间不会执行其他客户端的命令。不过redis的命令不支持错误命令执行后的回滚机制，也就是命令设计者要对命令的正确性负责，即使多个命令中存在部分错误的命令，剩余命令也会继续执行下去。</p>
<h2 id="主要命令">主要命令</h2>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">MULTI</td>
<td style="text-align:center">开始一个新的事务</td>
</tr>
<tr>
<td style="text-align:center">DISCARD</td>
<td style="text-align:center">放弃执行事务</td>
</tr>
<tr>
<td style="text-align:center">EXEC</td>
<td style="text-align:center">执行事务中的所有命令</td>
</tr>
<tr>
<td style="text-align:center">WATCH</td>
<td style="text-align:center">监视key，如果在exec之前被修改，则不执行事务</td>
</tr>
<tr>
<td style="text-align:center">UNWATCH</td>
<td style="text-align:center">取消对所有键的监视</td>
</tr>
</tbody>
</table>
<h2 id="事务的实现">事务的实现</h2>
<p>一个事务分为三个阶段：</p>
<ul>
<li>事务开始</li>
<li>命令入队</li>
<li>事务执行</li>
</ul>
<h3 id="事务开始">事务开始</h3>
<p>使用multi开启事务，redis主要使用redisClient中flag成员记录状态。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c">
<span class="kt">void</span> <span class="nf">multiCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 已经开启事务
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_MULTI</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">addReplyError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;MULTI calls can not be nested&#34;</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 标记事务开启
</span><span class="c1"></span>    <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_MULTI</span><span class="p">;</span>
    <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">ok</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="事务入队">事务入队</h3>
<p>当客户端进入事务状态时，客户端不会立即执行命令EXEC、DISCARD、WATCH、MULTI之外的命令，这些命令先进入事务队列，在之后事务执行时候执行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 客户端结构体
</span><span class="c1"></span><span class="k">struct</span> <span class="n">redisClient</span> <span class="p">{</span>
  	<span class="c1">// ....
</span><span class="c1"></span>  	<span class="n">multiState</span> <span class="n">mstate</span><span class="p">;</span> <span class="c1">// 事务状态
</span><span class="c1"></span>    <span class="c1">// ....
</span><span class="c1"></span><span class="p">}</span>

<span class="c1">// 事务状态
</span><span class="c1"></span><span class="k">typedef</span> <span class="k">struct</span> <span class="n">multiState</span> <span class="p">{</span>
    <span class="n">multiCmd</span> <span class="o">*</span><span class="n">commands</span><span class="p">;</span> <span class="c1">// 事务队列
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">count</span><span class="p">;</span> <span class="c1">// 命令计数
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">minreplicas</span><span class="p">;</span> <span class="c1">// 用于同步复制
</span><span class="c1"></span>    <span class="n">time_t</span> <span class="n">minreplicas_timeout</span><span class="p">;</span> <span class="c1">// 超时时间
</span><span class="c1"></span><span class="p">}</span> <span class="n">multiState</span><span class="p">;</span>

<span class="c1">// 事务命令
</span><span class="c1"></span><span class="k">typedef</span> <span class="k">struct</span> <span class="n">multiCmd</span> <span class="p">{</span>
    <span class="n">robj</span> <span class="o">**</span><span class="n">argv</span><span class="p">;</span> <span class="c1">// 参数
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">argc</span><span class="p">;</span> <span class="c1">// 参数数量 
</span><span class="c1"></span>    <span class="k">struct</span> <span class="n">redisCommand</span> <span class="o">*</span><span class="n">cmd</span><span class="p">;</span> <span class="c1">// 命令指针
</span><span class="c1"></span><span class="p">}</span> <span class="n">multiCmd</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>redis在执行客户端命令时，会判断事务是否开启，如果开启且不是上面提到的几个命令，那么就会将命令压入队列,在redis的命令处理函数processCommand()中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c">
<span class="kt">int</span> <span class="nf">processCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
  	<span class="c1">// ...
</span><span class="c1"></span>    <span class="cm">/* Exec the command */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_MULTI</span> <span class="o">&amp;&amp;</span>
        <span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">!=</span> <span class="n">execCommand</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">!=</span> <span class="n">discardCommand</span> <span class="o">&amp;&amp;</span>
        <span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">!=</span> <span class="n">multiCommand</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">!=</span> <span class="n">watchCommand</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// 处在事务状态
</span><span class="c1"></span>        <span class="c1">// 不是execCommand、discardCommand、multiCommand、watchCommand
</span><span class="c1"></span>        <span class="c1">// 执行入队操作
</span><span class="c1"></span>        <span class="n">queueMultiCommand</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">queued</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// 命令直接执行
</span><span class="c1"></span>        <span class="n">call</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">REDIS_CALL_FULL</span><span class="p">);</span>
        <span class="n">c</span><span class="o">-&gt;</span><span class="n">woff</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">master_repl_offset</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">listLength</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">ready_keys</span><span class="p">))</span>
            <span class="n">handleClientsBlockedOnLists</span><span class="p">();</span>
    <span class="p">}</span>
  	<span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>入队的实现:入队功能依靠queueMultiCommand()实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">queueMultiCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">multiCmd</span> <span class="o">*</span><span class="n">mc</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>

    <span class="c1">// 重新分配足够的空间
</span><span class="c1"></span>    <span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">commands</span> <span class="o">=</span> <span class="n">zrealloc</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">commands</span><span class="p">,</span>
            <span class="k">sizeof</span><span class="p">(</span><span class="n">multiCmd</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">count</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
    <span class="n">mc</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">commands</span><span class="o">+</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="c1">// 压入点
</span><span class="c1"></span>
    <span class="c1">// 初始化事务结构体
</span><span class="c1"></span>    <span class="n">mc</span><span class="o">-&gt;</span><span class="n">cmd</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="p">;</span> 
    <span class="n">mc</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span>
    <span class="n">mc</span><span class="o">-&gt;</span><span class="n">argv</span> <span class="o">=</span> <span class="n">zmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">robj</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">);</span>
    <span class="n">memcpy</span><span class="p">(</span><span class="n">mc</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">robj</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="n">incrRefCount</span><span class="p">(</span><span class="n">mc</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
    <span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">count</span><span class="o">++</span><span class="p">;</span> <span class="c1">// 计数+1
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="事务的执行">事务的执行</h3>
<p>当处于事务状态的客户端向服务器发送EXEC命令时，这个命令被立即执行，具体见processCommand()函数。</p>
<p>最终命令调用execCommand()执行exec命令。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">execCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>
    <span class="n">robj</span> <span class="o">**</span><span class="n">orig_argv</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">orig_argc</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">redisCommand</span> <span class="o">*</span><span class="n">orig_cmd</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">must_propagate</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* Need to propagate MULTI/EXEC to AOF / slaves? */</span>

    <span class="c1">// 判断是否执行事务中
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_MULTI</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">addReplyError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;EXEC without MULTI&#34;</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 判断监视键是否被修改
</span><span class="c1"></span>    <span class="c1">// 命令在入队时发送错误
</span><span class="c1"></span>    <span class="c1">// 均不执行命令
</span><span class="c1"></span>    <span class="c1">// 取消事务
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">REDIS_DIRTY_CAS</span><span class="o">|</span><span class="n">REDIS_DIRTY_EXEC</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_DIRTY_EXEC</span> <span class="o">?</span> <span class="n">shared</span><span class="p">.</span><span class="nl">execaborterr</span> <span class="p">:</span>
                                                  <span class="n">shared</span><span class="p">.</span><span class="n">nullmultibulk</span><span class="p">);</span>
        <span class="n">discardTransaction</span><span class="p">(</span><span class="n">c</span><span class="p">);</span> <span class="c1">// 取消事务
</span><span class="c1"></span>        <span class="k">goto</span> <span class="n">handle_monitor</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 取消对键的监视
</span><span class="c1"></span>    <span class="n">unwatchAllKeys</span><span class="p">(</span><span class="n">c</span><span class="p">);</span> <span class="cm">/* Unwatch ASAP otherwise we&#39;ll waste CPU cycles */</span>

    <span class="c1">// 备份
</span><span class="c1"></span>    <span class="n">orig_argv</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">;</span>
    <span class="n">orig_argc</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span>
    <span class="n">orig_cmd</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="p">;</span>
    <span class="n">addReplyMultiBulkLen</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">count</span><span class="p">);</span>

    <span class="c1">// 遍历事务中的命令，执行
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// 备份
</span><span class="c1"></span>        <span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">commands</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">argc</span><span class="p">;</span>
        <span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">commands</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">argv</span><span class="p">;</span>
        <span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">commands</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">cmd</span><span class="p">;</span>

        <span class="c1">// 在事务中，发现了写命令，传播multi
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">must_propagate</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_CMD_READONLY</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">execCommandPropagateMulti</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
            <span class="n">must_propagate</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// 执行命令
</span><span class="c1"></span>        <span class="n">call</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">REDIS_CALL_FULL</span><span class="p">);</span>

        <span class="c1">// 恢复
</span><span class="c1"></span>        <span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">commands</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">argc</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span>
        <span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">commands</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">argv</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">;</span>
        <span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">commands</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">cmd</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 恢复
</span><span class="c1"></span>    <span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span> <span class="o">=</span> <span class="n">orig_argv</span><span class="p">;</span>
    <span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">=</span> <span class="n">orig_argc</span><span class="p">;</span>
    <span class="n">c</span><span class="o">-&gt;</span><span class="n">cmd</span> <span class="o">=</span> <span class="n">orig_cmd</span><span class="p">;</span>
    <span class="n">discardTransaction</span><span class="p">(</span><span class="n">c</span><span class="p">);</span> <span class="c1">// 关闭事务状态
</span><span class="c1"></span>    <span class="cm">/* Make sure the EXEC command will be propagated as well if MULTI
</span><span class="cm">     * was already propagated. */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">must_propagate</span><span class="p">)</span> <span class="n">server</span><span class="p">.</span><span class="n">dirty</span><span class="o">++</span><span class="p">;</span>

<span class="nl">handle_monitor</span><span class="p">:</span>
    <span class="cm">/* Send EXEC to clients waiting data from MONITOR. We do it here
</span><span class="cm">     * since the natural order of commands execution is actually:
</span><span class="cm">     * MUTLI, EXEC, ... commands inside transaction ...
</span><span class="cm">     * Instead EXEC is flagged as REDIS_CMD_SKIP_MONITOR in the command
</span><span class="cm">     * table, and we do it here with correct ordering. */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">listLength</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">monitors</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">server</span><span class="p">.</span><span class="n">loading</span><span class="p">)</span>
        <span class="n">replicationFeedMonitors</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">server</span><span class="p">.</span><span class="n">monitors</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="事务取消">事务取消</h3>
<p>DISCARD函数取消客户端的事务状态</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// discardCommand命令处理函数
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">discardCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 没有在事务状态
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_MULTI</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">addReplyError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;DISCARD without MULTI&#34;</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 取消事务状态
</span><span class="c1"></span>    <span class="n">discardTransaction</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
    <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">ok</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 取消事务状态
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">discardTransaction</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">freeClientMultiState</span><span class="p">(</span><span class="n">c</span><span class="p">);</span> <span class="c1">// 释放事务
</span><span class="c1"></span>    <span class="n">initClientMultiState</span><span class="p">(</span><span class="n">c</span><span class="p">);</span> <span class="c1">// 初始化事务
</span><span class="c1"></span>
    <span class="c1">// 取消事务状态
</span><span class="c1"></span>    <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="n">REDIS_MULTI</span><span class="o">|</span><span class="n">REDIS_DIRTY_CAS</span><span class="o">|</span><span class="n">REDIS_DIRTY_EXEC</span><span class="p">);</span>
    <span class="n">unwatchAllKeys</span><span class="p">(</span><span class="n">c</span><span class="p">);</span> <span class="c1">// 取消键的监视
</span><span class="c1"></span><span class="p">}</span>

<span class="kt">void</span> <span class="nf">freeClientMultiState</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
        <span class="n">multiCmd</span> <span class="o">*</span><span class="n">mc</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">commands</span><span class="o">+</span><span class="n">j</span><span class="p">;</span>

        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mc</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
            <span class="n">decrRefCount</span><span class="p">(</span><span class="n">mc</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="n">zfree</span><span class="p">(</span><span class="n">mc</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">zfree</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">commands</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">initClientMultiState</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">commands</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">c</span><span class="o">-&gt;</span><span class="n">mstate</span><span class="p">.</span><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="watch命令的实现">WATCH命令的实现</h3>
<p>WATCH命令用来监视键是否被修改。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">redisDb</span> <span class="p">{</span>
	<span class="c1">// ...
</span><span class="c1"></span>    <span class="n">dict</span> <span class="o">*</span><span class="n">watched_keys</span><span class="p">;</span> <span class="c1">// 监视键的字典，字典的键为数据库的键，值为链表，保存所有监视的客户端
</span><span class="c1"></span>    <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span> <span class="n">redisDb</span><span class="p">;</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">redisClient</span> <span class="p">{</span>
    <span class="c1">// ...
</span><span class="c1"></span>    <span class="n">list</span> <span class="o">*</span><span class="n">watched_keys</span><span class="p">;</span>  <span class="c1">// 保存该客户端所有被监视的键,保存watchedKey结构
</span><span class="c1"></span>    <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">watchedKey</span> <span class="p">{</span>
    <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">;</span>  <span class="c1">// 保存键
</span><span class="c1"></span>    <span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">;</span>  <span class="c1">// 保存键所在的数据库
</span><span class="c1"></span><span class="p">}</span> <span class="n">watchedKey</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="watch的触发">WATCH的触发</h4>
<p>所有的对数据库进行修改的命令，比如set、del等，在执行之后都会调用signalModifiedKey(redisDb *db, robj *key)，而该函数调用touchWatchedKey(redisDb *db, robj *key)。touchWatchedKey(redisDb *db, robj *key)查找监视字典，对被修改的键进行标记。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">signalModifiedKey</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">touchWatchedKey</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">touchWatchedKey</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">list</span> <span class="o">*</span><span class="n">clients</span><span class="p">;</span>
    <span class="n">listIter</span> <span class="n">li</span><span class="p">;</span>
    <span class="n">listNode</span> <span class="o">*</span><span class="n">ln</span><span class="p">;</span>

    <span class="c1">// 字典为空
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">dictSize</span><span class="p">(</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">watched_keys</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="c1">// 获取进行监视的客户端
</span><span class="c1"></span>    <span class="n">clients</span> <span class="o">=</span> <span class="n">dictFetchValue</span><span class="p">(</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">watched_keys</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">clients</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="c1">// 遍历所有客户端，进行标记
</span><span class="c1"></span>    <span class="n">listRewind</span><span class="p">(</span><span class="n">clients</span><span class="p">,</span><span class="o">&amp;</span><span class="n">li</span><span class="p">);</span>
    <span class="k">while</span><span class="p">((</span><span class="n">ln</span> <span class="o">=</span> <span class="n">listNext</span><span class="p">(</span><span class="o">&amp;</span><span class="n">li</span><span class="p">)))</span> <span class="p">{</span>
        <span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="n">listNodeValue</span><span class="p">(</span><span class="n">ln</span><span class="p">);</span>

        <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_DIRTY_CAS</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="监视的开启">监视的开启</h4>
<p>监视的开启就是在字典里添加键</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">watchCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">REDIS_MULTI</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">addReplyError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;WATCH inside MULTI is not allowed&#34;</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="n">watchForKey</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
    <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">ok</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 客户端C监视键Key
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">watchForKey</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">list</span> <span class="o">*</span><span class="n">clients</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">listIter</span> <span class="n">li</span><span class="p">;</span>
    <span class="n">listNode</span> <span class="o">*</span><span class="n">ln</span><span class="p">;</span>
    <span class="n">watchedKey</span> <span class="o">*</span><span class="n">wk</span><span class="p">;</span>

    <span class="c1">// 判断是否已经被监视了
</span><span class="c1"></span>    <span class="c1">// 发现则直接返回
</span><span class="c1"></span>    <span class="n">listRewind</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">watched_keys</span><span class="p">,</span><span class="o">&amp;</span><span class="n">li</span><span class="p">);</span>
    <span class="k">while</span><span class="p">((</span><span class="n">ln</span> <span class="o">=</span> <span class="n">listNext</span><span class="p">(</span><span class="o">&amp;</span><span class="n">li</span><span class="p">)))</span> <span class="p">{</span>
        <span class="n">wk</span> <span class="o">=</span> <span class="n">listNodeValue</span><span class="p">(</span><span class="n">ln</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">wk</span><span class="o">-&gt;</span><span class="n">db</span> <span class="o">==</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span> <span class="o">&amp;&amp;</span> <span class="n">equalStringObjects</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">wk</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">))</span>
            <span class="k">return</span><span class="p">;</span> <span class="cm">/* Key already watched */</span>
    <span class="p">}</span>
    
    <span class="c1">// 检查key是否存在数据库的watched_keys字典力
</span><span class="c1"></span>    <span class="n">clients</span> <span class="o">=</span> <span class="n">dictFetchValue</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">watched_keys</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">clients</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// 不存在就增加一个链表
</span><span class="c1"></span>        <span class="n">clients</span> <span class="o">=</span> <span class="n">listCreate</span><span class="p">();</span>
        <span class="n">dictAdd</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">watched_keys</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">clients</span><span class="p">);</span>
        <span class="n">incrRefCount</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// 在链表末尾增加key
</span><span class="c1"></span>    <span class="c1">// 前面已经保证没有被监视过，所以这里不需要再判断，直接插入到末尾
</span><span class="c1"></span>    <span class="n">listAddNodeTail</span><span class="p">(</span><span class="n">clients</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
    <span class="cm">/* Add the new key to the list of keys watched by this client */</span>
    <span class="n">wk</span> <span class="o">=</span> <span class="n">zmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">wk</span><span class="p">));</span>
    <span class="n">wk</span><span class="o">-&gt;</span><span class="n">key</span> <span class="o">=</span> <span class="n">key</span><span class="p">;</span>
    <span class="n">wk</span><span class="o">-&gt;</span><span class="n">db</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span><span class="p">;</span>
    <span class="n">incrRefCount</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
    <span class="n">listAddNodeTail</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">watched_keys</span><span class="p">,</span><span class="n">wk</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="监视的关闭">监视的关闭</h4>
<p>监视的关闭即将字典中键删除。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c">
<span class="kt">void</span> <span class="nf">unwatchCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 取消客户端对所有键的监视
</span><span class="c1"></span>    <span class="n">unwatchAllKeys</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
    <span class="c1">// 重置状态
</span><span class="c1"></span>    <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;=</span> <span class="p">(</span><span class="o">~</span><span class="n">REDIS_DIRTY_CAS</span><span class="p">);</span>
    <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">ok</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 清除所有监视
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">unwatchAllKeys</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">listIter</span> <span class="n">li</span><span class="p">;</span>
    <span class="n">listNode</span> <span class="o">*</span><span class="n">ln</span><span class="p">;</span>

    <span class="c1">// 没有键被监视，直接返回
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">listLength</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">watched_keys</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="c1">// 遍历被监视的键
</span><span class="c1"></span>    <span class="n">listRewind</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">watched_keys</span><span class="p">,</span><span class="o">&amp;</span><span class="n">li</span><span class="p">);</span>
    <span class="k">while</span><span class="p">((</span><span class="n">ln</span> <span class="o">=</span> <span class="n">listNext</span><span class="p">(</span><span class="o">&amp;</span><span class="n">li</span><span class="p">)))</span> <span class="p">{</span>
        <span class="n">list</span> <span class="o">*</span><span class="n">clients</span><span class="p">;</span>
        <span class="n">watchedKey</span> <span class="o">*</span><span class="n">wk</span><span class="p">;</span>

        <span class="n">wk</span> <span class="o">=</span> <span class="n">listNodeValue</span><span class="p">(</span><span class="n">ln</span><span class="p">);</span> <span class="c1">// 键
</span><span class="c1"></span>        <span class="n">clients</span> <span class="o">=</span> <span class="n">dictFetchValue</span><span class="p">(</span><span class="n">wk</span><span class="o">-&gt;</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">watched_keys</span><span class="p">,</span> <span class="n">wk</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 数据库中查找
</span><span class="c1"></span>        <span class="n">redisAssertWithInfo</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="n">clients</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
        <span class="n">listDelNode</span><span class="p">(</span><span class="n">clients</span><span class="p">,</span><span class="n">listSearchKey</span><span class="p">(</span><span class="n">clients</span><span class="p">,</span><span class="n">c</span><span class="p">));</span> <span class="c1">// 删除数据库中监视节点
</span><span class="c1"></span>        
        <span class="c1">// 如果链表为空，删除键
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">listLength</span><span class="p">(</span><span class="n">clients</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
            <span class="n">dictDelete</span><span class="p">(</span><span class="n">wk</span><span class="o">-&gt;</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">watched_keys</span><span class="p">,</span> <span class="n">wk</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">);</span>
        
        <span class="c1">// 删除客户端监视的节点key
</span><span class="c1"></span>        <span class="n">listDelNode</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">watched_keys</span><span class="p">,</span><span class="n">ln</span><span class="p">);</span>
        <span class="n">decrRefCount</span><span class="p">(</span><span class="n">wk</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">);</span>
        <span class="n">zfree</span><span class="p">(</span><span class="n">wk</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Redis源码阅读-AOF持久化</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-aof%E6%8C%81%E4%B9%85%E5%8C%96/</link>
    <pubDate>Sun, 16 Jul 2017 12:52:43 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-aof%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
    <description><![CDATA[<p>之前看了RDB持久化，功能是把数据库的数据全部使用一种特定格式进行存储。恢复时一个一个数据库键恢复。</p>
<p>AOF持久化与RDB持久化不同，AOF通过保存Redis服务器执行的写命令来记录数据库的状态。</p>
<h2 id="aof持久化的实现">AOF持久化的实现</h2>
<p>AOF持久化功能分为命令追加、文件写入、文件同步三个步骤。</p>
<ul>
<li>命令追加：将命令数据写入aof_buf缓冲区</li>
<li>文件写入：将aof_buff缓冲区数据写入系统IO缓冲区</li>
<li>文件同步：将系统IO缓冲区的数据同步到磁盘文件</li>
</ul>
<h3 id="命令追加">命令追加</h3>
<p>AOF持久化打开时，服务器在执行一个写命令之后，会以协议的格式将执行的命令追加倒服务器状态aof_buf缓冲区尾部。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="k">struct</span> <span class="n">redisServer</span> <span class="p">{</span> 
  <span class="c1">// ...
</span><span class="c1"></span>  <span class="n">sds</span> <span class="n">aof_buf</span><span class="p">;</span>  <span class="c1">// aof缓冲区
</span><span class="c1"></span>  <span class="c1">// ....
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>命令追加的实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 将命令追加到AOF缓冲区中
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">feedAppendOnlyFile</span><span class="p">(</span><span class="k">struct</span> <span class="n">redisCommand</span> <span class="o">*</span><span class="n">cmd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dictid</span><span class="p">,</span> <span class="n">robj</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">sds</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">sdsempty</span><span class="p">();</span>
    <span class="n">robj</span> <span class="o">*</span><span class="n">tmpargv</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>

    <span class="c1">// 如果没切换到正确的数据库，则追加切换数据库命令
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">dictid</span> <span class="o">!=</span> <span class="n">server</span><span class="p">.</span><span class="n">aof_selected_db</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">char</span> <span class="n">seldb</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>

        <span class="n">snprintf</span><span class="p">(</span><span class="n">seldb</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">seldb</span><span class="p">),</span><span class="s">&#34;%d&#34;</span><span class="p">,</span><span class="n">dictid</span><span class="p">);</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">sdscatprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="s">&#34;*2</span><span class="se">\r\n</span><span class="s">$6</span><span class="se">\r\n</span><span class="s">SELECT</span><span class="se">\r\n</span><span class="s">$%lu</span><span class="se">\r\n</span><span class="s">%s</span><span class="se">\r\n</span><span class="s">&#34;</span><span class="p">,</span>
            <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">strlen</span><span class="p">(</span><span class="n">seldb</span><span class="p">),</span><span class="n">seldb</span><span class="p">);</span>
        <span class="n">server</span><span class="p">.</span><span class="n">aof_selected_db</span> <span class="o">=</span> <span class="n">dictid</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 根据命令类型追加命令
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">==</span> <span class="n">expireCommand</span> <span class="o">||</span> <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">==</span> <span class="n">pexpireCommand</span> <span class="o">||</span>
        <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">==</span> <span class="n">expireatCommand</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 追加过期键命令
</span><span class="c1"></span>        <span class="n">buf</span> <span class="o">=</span> <span class="n">catAppendOnlyExpireAtCommand</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="n">cmd</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">==</span> <span class="n">setexCommand</span> <span class="o">||</span> <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">proc</span> <span class="o">==</span> <span class="n">psetexCommand</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 追加setexCommand或者psetexCommand
</span><span class="c1"></span>        <span class="n">tmpargv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">createStringObject</span><span class="p">(</span><span class="s">&#34;SET&#34;</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
        <span class="n">tmpargv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
        <span class="n">tmpargv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">catAppendOnlyGenericCommand</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">tmpargv</span><span class="p">);</span>
        <span class="n">decrRefCount</span><span class="p">(</span><span class="n">tmpargv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">catAppendOnlyExpireAtCommand</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="n">cmd</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// 追加其他一般修改数据库命令
</span><span class="c1"></span>        <span class="n">buf</span> <span class="o">=</span> <span class="n">catAppendOnlyGenericCommand</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="n">argc</span><span class="p">,</span><span class="n">argv</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// 将格式化的命令字符串追加到aof_buf缓冲区中
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_state</span> <span class="o">==</span> <span class="n">REDIS_AOF_ON</span><span class="p">)</span>
        <span class="n">server</span><span class="p">.</span><span class="n">aof_buf</span> <span class="o">=</span> <span class="n">sdscatlen</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_buf</span><span class="p">,</span><span class="n">buf</span><span class="p">,</span><span class="n">sdslen</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_child_pid</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="c1">// 如果在执行AOF重写，那么追加的新的AOF文件中
</span><span class="c1"></span>        <span class="n">aofRewriteBufferAppend</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buf</span><span class="p">,</span><span class="n">sdslen</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>

    <span class="n">sdsfree</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 根据参数，格式化命令
</span><span class="c1"></span><span class="n">sds</span> <span class="nf">catAppendOnlyGenericCommand</span><span class="p">(</span><span class="n">sds</span> <span class="n">dst</span><span class="p">,</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">robj</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">len</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
    <span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">;</span>

    <span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;*&#39;</span><span class="p">;</span>
    <span class="n">len</span> <span class="o">=</span> <span class="mi">1</span><span class="o">+</span><span class="n">ll2string</span><span class="p">(</span><span class="n">buf</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">argc</span><span class="p">);</span>
    <span class="n">buf</span><span class="p">[</span><span class="n">len</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\r&#39;</span><span class="p">;</span>
    <span class="n">buf</span><span class="p">[</span><span class="n">len</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span>
    <span class="n">dst</span> <span class="o">=</span> <span class="n">sdscatlen</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span><span class="n">buf</span><span class="p">,</span><span class="n">len</span><span class="p">);</span>

    <span class="c1">// 遍历每一个参数，支架到AOF缓冲区中
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">o</span> <span class="o">=</span> <span class="n">getDecodedObject</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
        <span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;$&#39;</span><span class="p">;</span>
        <span class="n">len</span> <span class="o">=</span> <span class="mi">1</span><span class="o">+</span><span class="n">ll2string</span><span class="p">(</span><span class="n">buf</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">sdslen</span><span class="p">(</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">));</span>
        <span class="n">buf</span><span class="p">[</span><span class="n">len</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\r&#39;</span><span class="p">;</span>
        <span class="n">buf</span><span class="p">[</span><span class="n">len</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span>
        <span class="n">dst</span> <span class="o">=</span> <span class="n">sdscatlen</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span><span class="n">buf</span><span class="p">,</span><span class="n">len</span><span class="p">);</span>
        <span class="n">dst</span> <span class="o">=</span> <span class="n">sdscatlen</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">,</span><span class="n">sdslen</span><span class="p">(</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">));</span>
        <span class="n">dst</span> <span class="o">=</span> <span class="n">sdscatlen</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span><span class="s">&#34;</span><span class="se">\r\n</span><span class="s">&#34;</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
        <span class="n">decrRefCount</span><span class="p">(</span><span class="n">o</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">dst</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="文件写入与同步">文件写入与同步</h3>
<p>Redis服务器就是一个事件循环，这个循环中的文件时间负责接收客户端的命令请求，同时存在serverCron函数定时运行函数。</p>
<p>服务器每次结束事件循环之前，会调用flushAppendOnlyFile函数，执行文件写入操作。</p>
<p>调用write函数时，系统会将数据保存到一个内存缓冲区，等到填满时才进行写入，或者在指定时间之后才真正写入。虽然提高了效率，但是带来了数据安全问题。</p>
<p>redis提供了appendgsync选项来设置aof持久化怎么同步，三种方案：</p>
<ul>
<li>always，一直同步，安全性好，但是最慢。</li>
<li>everysec，当aof文件内容全部写入时，每隔一秒在子线程中对aof文件进行一次同步。</li>
<li>no，由操作系统决定什么时候同步。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">flushAppendOnlyFile</span><span class="p">(</span><span class="kt">int</span> <span class="n">force</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ssize_t</span> <span class="n">nwritten</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">sync_in_progress</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">mstime_t</span> <span class="n">latency</span><span class="p">;</span>

    <span class="c1">// 缓冲区没有内容直接返回
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">sdslen</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_buf</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_fsync</span> <span class="o">==</span> <span class="n">AOF_FSYNC_EVERYSEC</span><span class="p">)</span>
        <span class="n">sync_in_progress</span> <span class="o">=</span> <span class="n">bioPendingJobsOfType</span><span class="p">(</span><span class="n">REDIS_BIO_AOF_FSYNC</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_fsync</span> <span class="o">==</span> <span class="n">AOF_FSYNC_EVERYSEC</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">force</span><span class="p">)</span> <span class="p">{</span>
        <span class="cm">/* With this append fsync policy we do background fsyncing.
</span><span class="cm">         * If the fsync is still in progress we can try to delay
</span><span class="cm">         * the write for a couple of seconds. */</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">sync_in_progress</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_flush_postponed_start</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="cm">/* No previous write postponing, remember that we are
</span><span class="cm">                 * postponing the flush and return. */</span>
                <span class="n">server</span><span class="p">.</span><span class="n">aof_flush_postponed_start</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">unixtime</span><span class="p">;</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">unixtime</span> <span class="o">-</span> <span class="n">server</span><span class="p">.</span><span class="n">aof_flush_postponed_start</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
                <span class="cm">/* We were already waiting for fsync to finish, but for less
</span><span class="cm">                 * than two seconds this is still ok. Postpone again. */</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="cm">/* Otherwise fall trough, and go write since we can&#39;t wait
</span><span class="cm">             * over two seconds. */</span>
            <span class="n">server</span><span class="p">.</span><span class="n">aof_delayed_fsync</span><span class="o">++</span><span class="p">;</span>
            <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_NOTICE</span><span class="p">,</span><span class="s">&#34;Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.&#34;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 调用write命令将缓冲区数据写入磁盘文件中，
</span><span class="c1"></span>    <span class="n">latencyStartMonitor</span><span class="p">(</span><span class="n">latency</span><span class="p">);</span>
    <span class="n">nwritten</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_fd</span><span class="p">,</span><span class="n">server</span><span class="p">.</span><span class="n">aof_buf</span><span class="p">,</span><span class="n">sdslen</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_buf</span><span class="p">));</span>
    <span class="n">latencyEndMonitor</span><span class="p">(</span><span class="n">latency</span><span class="p">);</span>
    <span class="cm">/* We want to capture different events for delayed writes:
</span><span class="cm">     * when the delay happens with a pending fsync, or with a saving child
</span><span class="cm">     * active, and when the above two conditions are missing.
</span><span class="cm">     * We also use an additional event name to save all samples which is
</span><span class="cm">     * useful for graphing / monitoring purposes. */</span>

    <span class="c1">// ...部分同步功能
</span><span class="c1"></span>
    <span class="c1">// 重置aof写入的延迟时间
</span><span class="c1"></span>    <span class="n">server</span><span class="p">.</span><span class="n">aof_flush_postponed_start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// 写入操作出现错误
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">nwritten</span> <span class="o">!=</span> <span class="p">(</span><span class="kt">signed</span><span class="p">)</span><span class="n">sdslen</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_buf</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">static</span> <span class="n">time_t</span> <span class="n">last_write_error_log</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">can_log</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="cm">/* Limit logging rate to 1 line per AOF_WRITE_LOG_ERROR_RATE seconds. */</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">server</span><span class="p">.</span><span class="n">unixtime</span> <span class="o">-</span> <span class="n">last_write_error_log</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">AOF_WRITE_LOG_ERROR_RATE</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">can_log</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">last_write_error_log</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">unixtime</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="cm">/* Log the AOF write error and record the error code. */</span>
        <span class="c1">// 写错误日志
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">nwritten</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">can_log</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span><span class="s">&#34;Error writing to the AOF file: %s&#34;</span><span class="p">,</span>
                    <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
                <span class="n">server</span><span class="p">.</span><span class="n">aof_last_write_errno</span> <span class="o">=</span> <span class="n">errno</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">can_log</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span><span class="s">&#34;Short write while writing to &#34;</span>
                                       <span class="s">&#34;the AOF file: (nwritten=%lld, &#34;</span>
                                       <span class="s">&#34;expected=%lld)&#34;</span><span class="p">,</span>
                                       <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">)</span><span class="n">nwritten</span><span class="p">,</span>
                                       <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">)</span><span class="n">sdslen</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_buf</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="c1">// 尝试移除新追加的不完整内容
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">ftruncate</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_fd</span><span class="p">,</span> <span class="n">server</span><span class="p">.</span><span class="n">aof_current_size</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">can_log</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span> <span class="s">&#34;Could not remove short write &#34;</span>
                             <span class="s">&#34;from the append-only file.  Redis may refuse &#34;</span>
                             <span class="s">&#34;to load the AOF the next time it starts.  &#34;</span>
                             <span class="s">&#34;ftruncate: %s&#34;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="cm">/* If the ftruncate() succeeded we can set nwritten to
</span><span class="cm">                 * -1 since there is no longer partial data into the AOF. */</span>
                <span class="n">nwritten</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">server</span><span class="p">.</span><span class="n">aof_last_write_errno</span> <span class="o">=</span> <span class="n">ENOSPC</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// 处理写入时错误
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_fsync</span> <span class="o">==</span> <span class="n">AOF_FSYNC_ALWAYS</span><span class="p">)</span> <span class="p">{</span>
            <span class="cm">/* We can&#39;t recover when the fsync policy is ALWAYS since the
</span><span class="cm">             * reply for the client is already in the output buffers, and we
</span><span class="cm">             * have the contract with the user that on acknowledged write data
</span><span class="cm">             * is synced on disk. */</span>
            <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span><span class="s">&#34;Can&#39;t recover from AOF write error when the AOF fsync policy is &#39;always&#39;. Exiting...&#34;</span><span class="p">);</span>
            <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="cm">/* Recover from failed write leaving data into the buffer. However
</span><span class="cm">             * set an error to stop accepting writes as long as the error
</span><span class="cm">             * condition is not cleared. */</span>
            <span class="n">server</span><span class="p">.</span><span class="n">aof_last_write_status</span> <span class="o">=</span> <span class="n">REDIS_ERR</span><span class="p">;</span>

            <span class="cm">/* Trim the sds buffer if there was a partial write, and there
</span><span class="cm">             * was no way to undo it with ftruncate(2). */</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">nwritten</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">server</span><span class="p">.</span><span class="n">aof_current_size</span> <span class="o">+=</span> <span class="n">nwritten</span><span class="p">;</span>
                <span class="n">sdsrange</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_buf</span><span class="p">,</span><span class="n">nwritten</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">return</span><span class="p">;</span> <span class="cm">/* We&#39;ll try again on the next call... */</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        
        <span class="c1">// 写入成功
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_last_write_status</span> <span class="o">==</span> <span class="n">REDIS_ERR</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span>
                <span class="s">&#34;AOF write error looks solved, Redis can write again.&#34;</span><span class="p">);</span>
            <span class="n">server</span><span class="p">.</span><span class="n">aof_last_write_status</span> <span class="o">=</span> <span class="n">REDIS_OK</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">server</span><span class="p">.</span><span class="n">aof_current_size</span> <span class="o">+=</span> <span class="n">nwritten</span><span class="p">;</span>

    <span class="c1">// 当缓冲区使用很小时，考虑重用
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">((</span><span class="n">sdslen</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_buf</span><span class="p">)</span><span class="o">+</span><span class="n">sdsavail</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_buf</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">4000</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sdsclear</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_buf</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">sdsfree</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_buf</span><span class="p">);</span>
        <span class="n">server</span><span class="p">.</span><span class="n">aof_buf</span> <span class="o">=</span> <span class="n">sdsempty</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// 在no_fsync_on_rewrite开启并且BGSAVE或者BGREWRITE进行不执行fsync
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_no_fsync_on_rewrite</span> <span class="o">&amp;&amp;</span>
        <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_child_pid</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="n">server</span><span class="p">.</span><span class="n">rdb_child_pid</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span>
            <span class="k">return</span><span class="p">;</span>
  
    <span class="c1">// 执行fsnyc,根据redis配置
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_fsync</span> <span class="o">==</span> <span class="n">AOF_FSYNC_ALWAYS</span><span class="p">)</span> <span class="p">{</span>
        <span class="cm">/* aof_fsync is defined as fdatasync() for Linux in order to avoid
</span><span class="cm">         * flushing metadata. */</span>
        <span class="n">latencyStartMonitor</span><span class="p">(</span><span class="n">latency</span><span class="p">);</span>
        <span class="n">aof_fsync</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_fd</span><span class="p">);</span> <span class="cm">/* Let&#39;s try to get this data on the disk */</span>
        <span class="n">latencyEndMonitor</span><span class="p">(</span><span class="n">latency</span><span class="p">);</span>
        <span class="n">latencyAddSampleIfNeeded</span><span class="p">(</span><span class="s">&#34;aof-fsync-always&#34;</span><span class="p">,</span><span class="n">latency</span><span class="p">);</span>
        <span class="n">server</span><span class="p">.</span><span class="n">aof_last_fsync</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">unixtime</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">server</span><span class="p">.</span><span class="n">aof_fsync</span> <span class="o">==</span> <span class="n">AOF_FSYNC_EVERYSEC</span> <span class="o">&amp;&amp;</span>
                <span class="n">server</span><span class="p">.</span><span class="n">unixtime</span> <span class="o">&gt;</span> <span class="n">server</span><span class="p">.</span><span class="n">aof_last_fsync</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sync_in_progress</span><span class="p">)</span> <span class="n">aof_background_fsync</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_fd</span><span class="p">);</span>
        <span class="n">server</span><span class="p">.</span><span class="n">aof_last_fsync</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">unixtime</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="aof文件的载入与数据还原">AOF文件的载入与数据还原</h2>
<p>数据存储在AOF文件中后，服务器只要读取并重新执行一遍AOF文件里保存的写命令，就可以还原服务器关闭之前的数据库状态。</p>
<h2 id="aof重写">AOF重写</h2>
<p>重写的目的主要是因为很多命令在执行多次后，可以进行合并，恢复时起始并不需要执行这么多命令。其实只要找到数据库的所有数据，生成相对应的命令即可，至于其他的命令完全不需要。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// aof重写的实现
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">rewriteAppendOnlyFile</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dictIterator</span> <span class="o">*</span><span class="n">di</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">dictEntry</span> <span class="o">*</span><span class="n">de</span><span class="p">;</span>
    <span class="n">rio</span> <span class="n">aof</span><span class="p">;</span>
    <span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">tmpfile</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">now</span> <span class="o">=</span> <span class="n">mstime</span><span class="p">();</span>
    <span class="kt">char</span> <span class="n">byte</span><span class="p">;</span>
    <span class="n">size_t</span> <span class="n">processed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// 创建一个零食文件
</span><span class="c1"></span>    <span class="n">snprintf</span><span class="p">(</span><span class="n">tmpfile</span><span class="p">,</span><span class="mi">256</span><span class="p">,</span><span class="s">&#34;temp-rewriteaof-%d.aof&#34;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">getpid</span><span class="p">());</span>
    <span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">tmpfile</span><span class="p">,</span><span class="s">&#34;w&#34;</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">fp</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span> <span class="s">&#34;Opening the temp file for AOF rewrite in rewriteAppendOnlyFile(): %s&#34;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">server</span><span class="p">.</span><span class="n">aof_child_diff</span> <span class="o">=</span> <span class="n">sdsempty</span><span class="p">();</span>

    <span class="c1">// redis内部文件结构体初始化
</span><span class="c1"></span>    <span class="n">rioInitWithFile</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aof</span><span class="p">,</span><span class="n">fp</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_rewrite_incremental_fsync</span><span class="p">)</span>
        <span class="n">rioSetAutoSync</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aof</span><span class="p">,</span><span class="n">REDIS_AOF_AUTOSYNC_BYTES</span><span class="p">);</span>
    
    <span class="c1">// 遍历数据库
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">server</span><span class="p">.</span><span class="n">dbnum</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">char</span> <span class="n">selectcmd</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&#34;*2</span><span class="se">\r\n</span><span class="s">$6</span><span class="se">\r\n</span><span class="s">SELECT</span><span class="se">\r\n</span><span class="s">&#34;</span><span class="p">;</span>
        <span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">db</span><span class="o">+</span><span class="n">j</span><span class="p">;</span>
        <span class="n">dict</span> <span class="o">*</span><span class="n">d</span> <span class="o">=</span> <span class="n">db</span><span class="o">-&gt;</span><span class="n">dict</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">dictSize</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
        <span class="n">di</span> <span class="o">=</span> <span class="n">dictGetSafeIterator</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">di</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// 生成数据库选择语句
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">rioWrite</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aof</span><span class="p">,</span><span class="n">selectcmd</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">selectcmd</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">rioWriteBulkLongLong</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aof</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>

        <span class="c1">// 获取每一个键，生成命令
</span><span class="c1"></span>        <span class="k">while</span><span class="p">((</span><span class="n">de</span> <span class="o">=</span> <span class="n">dictNext</span><span class="p">(</span><span class="n">di</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">sds</span> <span class="n">keystr</span><span class="p">;</span>
            <span class="n">robj</span> <span class="n">key</span><span class="p">,</span> <span class="o">*</span><span class="n">o</span><span class="p">;</span>
            <span class="kt">long</span> <span class="kt">long</span> <span class="n">expiretime</span><span class="p">;</span>

            <span class="n">keystr</span> <span class="o">=</span> <span class="n">dictGetKey</span><span class="p">(</span><span class="n">de</span><span class="p">);</span>
            <span class="n">o</span> <span class="o">=</span> <span class="n">dictGetVal</span><span class="p">(</span><span class="n">de</span><span class="p">);</span>
            <span class="n">initStaticStringObject</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">keystr</span><span class="p">);</span>

            <span class="n">expiretime</span> <span class="o">=</span> <span class="n">getExpire</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="o">&amp;</span><span class="n">key</span><span class="p">);</span>

            <span class="c1">// 跳过过期键
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">expiretime</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">expiretime</span> <span class="o">&lt;</span> <span class="n">now</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>

            <span class="c1">// 根据类型保存
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">REDIS_STRING</span><span class="p">)</span> <span class="p">{</span>
                <span class="cm">/* Emit a SET command */</span>
                <span class="kt">char</span> <span class="n">cmd</span><span class="p">[]</span><span class="o">=</span><span class="s">&#34;*3</span><span class="se">\r\n</span><span class="s">$3</span><span class="se">\r\n</span><span class="s">SET</span><span class="se">\r\n</span><span class="s">&#34;</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">rioWrite</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aof</span><span class="p">,</span><span class="n">cmd</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
                <span class="cm">/* Key and value */</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">rioWriteBulkObject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aof</span><span class="p">,</span><span class="o">&amp;</span><span class="n">key</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">rioWriteBulkObject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aof</span><span class="p">,</span><span class="n">o</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">REDIS_LIST</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">rewriteListObject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aof</span><span class="p">,</span><span class="o">&amp;</span><span class="n">key</span><span class="p">,</span><span class="n">o</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">REDIS_SET</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">rewriteSetObject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aof</span><span class="p">,</span><span class="o">&amp;</span><span class="n">key</span><span class="p">,</span><span class="n">o</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">REDIS_ZSET</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">rewriteSortedSetObject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aof</span><span class="p">,</span><span class="o">&amp;</span><span class="n">key</span><span class="p">,</span><span class="n">o</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">REDIS_HASH</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">rewriteHashObject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aof</span><span class="p">,</span><span class="o">&amp;</span><span class="n">key</span><span class="p">,</span><span class="n">o</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">redisPanic</span><span class="p">(</span><span class="s">&#34;Unknown object type&#34;</span><span class="p">);</span>
            <span class="p">}</span>
            
            <span class="c1">// 保存过期时间
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">expiretime</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="kt">char</span> <span class="n">cmd</span><span class="p">[]</span><span class="o">=</span><span class="s">&#34;*3</span><span class="se">\r\n</span><span class="s">$9</span><span class="se">\r\n</span><span class="s">PEXPIREAT</span><span class="se">\r\n</span><span class="s">&#34;</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">rioWrite</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aof</span><span class="p">,</span><span class="n">cmd</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">rioWriteBulkObject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aof</span><span class="p">,</span><span class="o">&amp;</span><span class="n">key</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">rioWriteBulkLongLong</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aof</span><span class="p">,</span><span class="n">expiretime</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="cm">/* Read some diff from the parent process from time to time. */</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">aof</span><span class="p">.</span><span class="n">processed_bytes</span> <span class="o">&gt;</span> <span class="n">processed</span><span class="o">+</span><span class="mi">1024</span><span class="o">*</span><span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">processed</span> <span class="o">=</span> <span class="n">aof</span><span class="p">.</span><span class="n">processed_bytes</span><span class="p">;</span>
                <span class="n">aofReadDiffFromParent</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">dictReleaseIterator</span><span class="p">(</span><span class="n">di</span><span class="p">);</span>
        <span class="n">di</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">fflush</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">==</span> <span class="n">EOF</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fsync</span><span class="p">(</span><span class="n">fileno</span><span class="p">(</span><span class="n">fp</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>

    <span class="cm">/* Read again a few times to get more data from the parent.
</span><span class="cm">     * We can&#39;t read forever (the server may receive data from clients
</span><span class="cm">     * faster than it is able to send data to the child), so we try to read
</span><span class="cm">     * some more data in a loop as soon as there is a good chance more data
</span><span class="cm">     * will come. If it looks like we are wasting time, we abort (this
</span><span class="cm">     * happens after 20 ms without new data). */</span>
    <span class="kt">int</span> <span class="n">nodata</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">mstime_t</span> <span class="n">start</span> <span class="o">=</span> <span class="n">mstime</span><span class="p">();</span>
    <span class="k">while</span><span class="p">(</span><span class="n">mstime</span><span class="p">()</span><span class="o">-</span><span class="n">start</span> <span class="o">&lt;</span> <span class="mi">1000</span> <span class="o">&amp;&amp;</span> <span class="n">nodata</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">aeWait</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_pipe_read_data_from_parent</span><span class="p">,</span> <span class="n">AE_READABLE</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">nodata</span><span class="o">++</span><span class="p">;</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">nodata</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* Start counting from zero, we stop on N *contiguous*
</span><span class="cm">                       timeouts. */</span>
        <span class="n">aofReadDiffFromParent</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="cm">/* Ask the master to stop sending diffs. */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">write</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_pipe_write_ack_to_parent</span><span class="p">,</span><span class="s">&#34;!&#34;</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">anetNonBlock</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">server</span><span class="p">.</span><span class="n">aof_pipe_read_ack_from_parent</span><span class="p">)</span> <span class="o">!=</span> <span class="n">ANET_OK</span><span class="p">)</span>
        <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
    <span class="cm">/* We read the ACK from the server using a 10 seconds timeout. Normally
</span><span class="cm">     * it should reply ASAP, but just in case we lose its reply, we are sure
</span><span class="cm">     * the child will eventually get terminated. */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">syncRead</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_pipe_read_ack_from_parent</span><span class="p">,</span><span class="o">&amp;</span><span class="n">byte</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5000</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span> <span class="o">||</span>
        <span class="n">byte</span> <span class="o">!=</span> <span class="sc">&#39;!&#39;</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
    <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_NOTICE</span><span class="p">,</span><span class="s">&#34;Parent agreed to stop sending diffs. Finalizing AOF...&#34;</span><span class="p">);</span>

    <span class="cm">/* Read the final diff if any. */</span>
    <span class="n">aofReadDiffFromParent</span><span class="p">();</span>

    <span class="cm">/* Write the received diff to the file. */</span>
    <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_NOTICE</span><span class="p">,</span>
        <span class="s">&#34;Concatenating %.2f MB of AOF diff received from parent.&#34;</span><span class="p">,</span>
        <span class="p">(</span><span class="kt">double</span><span class="p">)</span> <span class="n">sdslen</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_child_diff</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">rioWrite</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aof</span><span class="p">,</span><span class="n">server</span><span class="p">.</span><span class="n">aof_child_diff</span><span class="p">,</span><span class="n">sdslen</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_child_diff</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>

    <span class="c1">// flush并关闭文件
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">fflush</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">==</span> <span class="n">EOF</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fsync</span><span class="p">(</span><span class="n">fileno</span><span class="p">(</span><span class="n">fp</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">==</span> <span class="n">EOF</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>

    <span class="c1">// 重命名aof文件
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">rename</span><span class="p">(</span><span class="n">tmpfile</span><span class="p">,</span><span class="n">filename</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span><span class="s">&#34;Error moving temp append only file on the final destination: %s&#34;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
        <span class="n">unlink</span><span class="p">(</span><span class="n">tmpfile</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_NOTICE</span><span class="p">,</span><span class="s">&#34;SYNC append only file rewrite performed&#34;</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span>

<span class="nl">werr</span><span class="p">:</span>
    <span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
    <span class="n">unlink</span><span class="p">(</span><span class="n">tmpfile</span><span class="p">);</span>
    <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span><span class="s">&#34;Write error writing append only file on disk: %s&#34;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">di</span><span class="p">)</span> <span class="n">dictReleaseIterator</span><span class="p">(</span><span class="n">di</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><h2 id="aof后台重写">AOF后台重写</h2>
<p>与RDB一样，AOF也提供一个fork线程后台重写的功能，异步调用的实现类似与RDB。</p>
<p>在子线程完成重写之后(创建一个新文件)，调用backgroundRewriteDoneHandler()，再调用aofRewriteBufferWrite(),将子线程执行重写过程中产生的新AOF数据写入新文件，然后改名覆盖源文件。</p>]]></description>
</item><item>
    <title>Redis源码阅读-订阅与发布</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E8%AE%A2%E9%98%85%E4%B8%8E%E5%8F%91%E5%B8%83/</link>
    <pubDate>Wed, 12 Jul 2017 19:36:41 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E8%AE%A2%E9%98%85%E4%B8%8E%E5%8F%91%E5%B8%83/</guid>
    <description><![CDATA[<p>Redis的发布与订阅主要是实现客户端订阅一个频道或者模式，当某客户端向一个频道发送消息时，该频道或者匹配模式订阅者都能够收到消息。</p>
<h2 id="频道的订阅与退订">频道的订阅与退订</h2>
<p>Redis在服务器结构体中的pubsub_channels字典中保存了所有的频道订阅关系。pubsub_channels键为频道，值为订阅的客户端组成的链表。</p>
<p>客户端结构体的pubsub_channels保存了客户端订阅的所有频道，pubsub_channels的键为频道，值为空。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="k">struct</span> <span class="n">redisServer</span> <span class="p">{</span>
  <span class="c1">// ...
</span><span class="c1"></span>  <span class="n">dict</span> <span class="o">*</span><span class="n">pubsub_channels</span><span class="p">;</span>  <span class="c1">// 保存所有的频道订阅关系
</span><span class="c1"></span>  <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>

<span class="k">struct</span> <span class="n">redisClient</span> <span class="p">{</span>
  <span class="c1">// ...
</span><span class="c1"></span>  <span class="n">dict</span> <span class="o">*</span><span class="n">pubsub_channels</span><span class="p">;</span> <span class="c1">// 记录客户端订阅的频道
</span><span class="c1"></span>  <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="订阅">订阅</h2>
<p>源码如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 订阅命令处理函数
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">subscribeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>

    <span class="c1">// 遍历指令中的所有频道
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="n">pubsubSubscribeChannel</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
    <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_PUBSUB</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 设置客户端c订阅频道channel
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">pubsubSubscribeChannel</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">channel</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dictEntry</span> <span class="o">*</span><span class="n">de</span><span class="p">;</span>
    <span class="n">list</span> <span class="o">*</span><span class="n">clients</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">retval</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="cm">/* Add the channel to the client -&gt; channels hash table */</span>
    <span class="c1">// 将channels加倒c-&gt;c-&gt;pubsub_channels的字典里
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">dictAdd</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pubsub_channels</span><span class="p">,</span><span class="n">channel</span><span class="p">,</span><span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="n">DICT_OK</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">retval</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">incrRefCount</span><span class="p">(</span><span class="n">channel</span><span class="p">);</span>
        <span class="cm">/* Add the client to the channel -&gt; list of clients hash table */</span>
        <span class="c1">// 找出服务器中的频道
</span><span class="c1"></span>        <span class="n">de</span> <span class="o">=</span> <span class="n">dictFind</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">pubsub_channels</span><span class="p">,</span><span class="n">channel</span><span class="p">);</span>
        
        <span class="c1">// 不存在就添加一个频道
</span><span class="c1"></span>        <span class="c1">// 获取客户端链表
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">de</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">clients</span> <span class="o">=</span> <span class="n">listCreate</span><span class="p">();</span>
            <span class="n">dictAdd</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">pubsub_channels</span><span class="p">,</span><span class="n">channel</span><span class="p">,</span><span class="n">clients</span><span class="p">);</span>
            <span class="n">incrRefCount</span><span class="p">(</span><span class="n">channel</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">clients</span> <span class="o">=</span> <span class="n">dictGetVal</span><span class="p">(</span><span class="n">de</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// 添加到客户端链表尾部
</span><span class="c1"></span>        <span class="n">listAddNodeTail</span><span class="p">(</span><span class="n">clients</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="cm">/* Notify the client */</span>
    <span class="c1">// 回复客户端
</span><span class="c1"></span>    <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">mbulkhdr</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
    <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">subscribebulk</span><span class="p">);</span>
    <span class="n">addReplyBulk</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">channel</span><span class="p">);</span>
    <span class="n">addReplyLongLong</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">clientSubscriptionsCount</span><span class="p">(</span><span class="n">c</span><span class="p">));</span>
    <span class="k">return</span> <span class="n">retval</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="退订">退订</h2>
<p>源码如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">unsubscribeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 退订所有频道
</span><span class="c1"></span>        <span class="n">pubsubUnsubscribeAllChannels</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>

        <span class="c1">// 遍历频道一一退订
</span><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="n">pubsubUnsubscribeChannel</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">clientSubscriptionsCount</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">REDIS_PUBSUB</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 退订所有频道
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">pubsubUnsubscribeAllChannels</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">notify</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dictIterator</span> <span class="o">*</span><span class="n">di</span> <span class="o">=</span> <span class="n">dictGetSafeIterator</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pubsub_channels</span><span class="p">);</span>
    <span class="n">dictEntry</span> <span class="o">*</span><span class="n">de</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// 遍历一一退订
</span><span class="c1"></span>    <span class="k">while</span><span class="p">((</span><span class="n">de</span> <span class="o">=</span> <span class="n">dictNext</span><span class="p">(</span><span class="n">di</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">robj</span> <span class="o">*</span><span class="n">channel</span> <span class="o">=</span> <span class="n">dictGetKey</span><span class="p">(</span><span class="n">de</span><span class="p">);</span>

        <span class="n">count</span> <span class="o">+=</span> <span class="n">pubsubUnsubscribeChannel</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">channel</span><span class="p">,</span><span class="n">notify</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="cm">/* We were subscribed to nothing? Still reply to the client. */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">notify</span> <span class="o">&amp;&amp;</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">mbulkhdr</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">unsubscribebulk</span><span class="p">);</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">nullbulk</span><span class="p">);</span>
        <span class="n">addReplyLongLong</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">dictSize</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pubsub_channels</span><span class="p">)</span><span class="o">+</span>
                       <span class="n">listLength</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pubsub_patterns</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="n">dictReleaseIterator</span><span class="p">(</span><span class="n">di</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// 客户端退订频道
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">pubsubUnsubscribeChannel</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">channel</span><span class="p">,</span> <span class="kt">int</span> <span class="n">notify</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dictEntry</span> <span class="o">*</span><span class="n">de</span><span class="p">;</span>
    <span class="n">list</span> <span class="o">*</span><span class="n">clients</span><span class="p">;</span>
    <span class="n">listNode</span> <span class="o">*</span><span class="n">ln</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">retval</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="cm">/* Remove the channel from the client -&gt; channels hash table */</span>
    <span class="n">incrRefCount</span><span class="p">(</span><span class="n">channel</span><span class="p">);</span> <span class="cm">/* channel may be just a pointer to the same object
</span><span class="cm">                            we have in the hash tables. Protect it... */</span>

    <span class="c1">// 移除客户端字典中频道的订阅
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">dictDelete</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pubsub_channels</span><span class="p">,</span><span class="n">channel</span><span class="p">)</span> <span class="o">==</span> <span class="n">DICT_OK</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">retval</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="cm">/* Remove the client from the channel -&gt; clients list hash table */</span>
        <span class="c1">// 找到服务器频道
</span><span class="c1"></span>        <span class="n">de</span> <span class="o">=</span> <span class="n">dictFind</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">pubsub_channels</span><span class="p">,</span><span class="n">channel</span><span class="p">);</span>
        <span class="n">redisAssertWithInfo</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="n">de</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
        <span class="n">clients</span> <span class="o">=</span> <span class="n">dictGetVal</span><span class="p">(</span><span class="n">de</span><span class="p">);</span> <span class="c1">// 获取链表
</span><span class="c1"></span>        <span class="n">ln</span> <span class="o">=</span> <span class="n">listSearchKey</span><span class="p">(</span><span class="n">clients</span><span class="p">,</span><span class="n">c</span><span class="p">);</span> <span class="c1">// 寻找链表中的订阅
</span><span class="c1"></span>        <span class="n">redisAssertWithInfo</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="n">ln</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
        <span class="n">listDelNode</span><span class="p">(</span><span class="n">clients</span><span class="p">,</span><span class="n">ln</span><span class="p">);</span> <span class="c1">// 删除节点
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">listLength</span><span class="p">(</span><span class="n">clients</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="cm">/* Free the list and associated hash entry at all if this was
</span><span class="cm">             * the latest client, so that it will be possible to abuse
</span><span class="cm">             * Redis PUBSUB creating millions of channels. */</span>
            <span class="c1">// 删除节点后 链表为空 删除字典中的节点
</span><span class="c1"></span>            <span class="n">dictDelete</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">pubsub_channels</span><span class="p">,</span><span class="n">channel</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="cm">/* Notify the client */</span>
    <span class="c1">// 回复客户端
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">notify</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">mbulkhdr</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">unsubscribebulk</span><span class="p">);</span>
        <span class="n">addReplyBulk</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">channel</span><span class="p">);</span>
        <span class="n">addReplyLongLong</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">dictSize</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pubsub_channels</span><span class="p">)</span><span class="o">+</span>
                       <span class="n">listLength</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pubsub_patterns</span><span class="p">));</span>

    <span class="p">}</span>
    <span class="n">decrRefCount</span><span class="p">(</span><span class="n">channel</span><span class="p">);</span> <span class="cm">/* it is finally safe to release it */</span>
    <span class="k">return</span> <span class="n">retval</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="模式的订阅与退订">模式的订阅与退订</h2>
<p>Redis在服务器结构体中的pubsub_patterns链表中保存了所有订阅模式关系。使用pubsubPattern结构的数据作为节点。</p>
<p>客户端结构体的pubsub_patterns保存了客户端订阅的所有模式，节点使用pubsubPattern结构的数据。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="k">struct</span> <span class="n">redisServer</span> <span class="p">{</span>
  <span class="c1">// ...
</span><span class="c1"></span>  <span class="n">list</span> <span class="o">*</span><span class="n">pubsub_patterns</span><span class="p">;</span>  <span class="c1">// 所有订阅模式关系
</span><span class="c1"></span>  <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>

<span class="k">struct</span> <span class="n">redisClient</span> <span class="p">{</span>
  <span class="c1">// ...
</span><span class="c1"></span>  <span class="n">list</span> <span class="o">*</span><span class="n">pubsub_patterns</span><span class="p">;</span>  <span class="c1">// 订阅模式关系
</span><span class="c1"></span>  <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">pubsubPattern</span> <span class="p">{</span>
    <span class="n">client</span> <span class="o">*</span><span class="n">client</span><span class="p">;</span> <span class="c1">// 订阅模式的客户端
</span><span class="c1"></span>    <span class="n">robj</span> <span class="o">*</span><span class="n">pattern</span><span class="p">;</span>  <span class="c1">// 被订阅模式
</span><span class="c1"></span><span class="p">}</span> <span class="n">pubsubPattern</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="订阅-1">订阅</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 订阅模式
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">psubscribeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>

    <span class="c1">// 遍历命令中的模式
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="n">pubsubSubscribePattern</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
    <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">REDIS_PUBSUB</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 设置客户端c订阅模式pattern
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">pubsubSubscribePattern</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">pattern</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">retval</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// 客户端模式链表中查找模式
</span><span class="c1"></span>    <span class="c1">// 为空则创建
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">listSearchKey</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pubsub_patterns</span><span class="p">,</span><span class="n">pattern</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">retval</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">pubsubPattern</span> <span class="o">*</span><span class="n">pat</span><span class="p">;</span>
        <span class="c1">// 客户端模式链表尾部添加模式
</span><span class="c1"></span>        <span class="n">listAddNodeTail</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pubsub_patterns</span><span class="p">,</span><span class="n">pattern</span><span class="p">);</span>
        <span class="n">incrRefCount</span><span class="p">(</span><span class="n">pattern</span><span class="p">);</span>

        <span class="c1">// 服务端模式链表尾部添加模式
</span><span class="c1"></span>        <span class="n">pat</span> <span class="o">=</span> <span class="n">zmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">pat</span><span class="p">));</span>
        <span class="n">pat</span><span class="o">-&gt;</span><span class="n">pattern</span> <span class="o">=</span> <span class="n">getDecodedObject</span><span class="p">(</span><span class="n">pattern</span><span class="p">);</span>
        <span class="n">pat</span><span class="o">-&gt;</span><span class="n">client</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
        <span class="n">listAddNodeTail</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">pubsub_patterns</span><span class="p">,</span><span class="n">pat</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="cm">/* Notify the client */</span>
    <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">mbulkhdr</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
    <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">psubscribebulk</span><span class="p">);</span>
    <span class="n">addReplyBulk</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">pattern</span><span class="p">);</span>
    <span class="n">addReplyLongLong</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">clientSubscriptionsCount</span><span class="p">(</span><span class="n">c</span><span class="p">));</span>
    <span class="k">return</span> <span class="n">retval</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="退订-1">退订</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 退订模式
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">punsubscribeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 退订所有模式
</span><span class="c1"></span>        <span class="n">pubsubUnsubscribeAllPatterns</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>

        <span class="c1">// 退订命令中的模式
</span><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="n">pubsubUnsubscribePattern</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">clientSubscriptionsCount</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">REDIS_PUBSUB</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 退订客户端c订阅的所有模式
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">pubsubUnsubscribeAllPatterns</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">notify</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">listNode</span> <span class="o">*</span><span class="n">ln</span><span class="p">;</span>
    <span class="n">listIter</span> <span class="n">li</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// 遍历，一一退订
</span><span class="c1"></span>    <span class="n">listRewind</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pubsub_patterns</span><span class="p">,</span><span class="o">&amp;</span><span class="n">li</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">((</span><span class="n">ln</span> <span class="o">=</span> <span class="n">listNext</span><span class="p">(</span><span class="o">&amp;</span><span class="n">li</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">robj</span> <span class="o">*</span><span class="n">pattern</span> <span class="o">=</span> <span class="n">ln</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span>

        <span class="n">count</span> <span class="o">+=</span> <span class="n">pubsubUnsubscribePattern</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">pattern</span><span class="p">,</span><span class="n">notify</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">notify</span> <span class="o">&amp;&amp;</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="cm">/* We were subscribed to nothing? Still reply to the client. */</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">mbulkhdr</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">punsubscribebulk</span><span class="p">);</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">nullbulk</span><span class="p">);</span>
        <span class="n">addReplyLongLong</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">dictSize</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pubsub_channels</span><span class="p">)</span><span class="o">+</span>
                       <span class="n">listLength</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pubsub_patterns</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
<span class="p">}</span>

 <span class="c1">// 取消客户端c对模式pattern的订阅
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">pubsubUnsubscribePattern</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">pattern</span><span class="p">,</span> <span class="kt">int</span> <span class="n">notify</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">listNode</span> <span class="o">*</span><span class="n">ln</span><span class="p">;</span>
    <span class="n">pubsubPattern</span> <span class="n">pat</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">retval</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">incrRefCount</span><span class="p">(</span><span class="n">pattern</span><span class="p">);</span> <span class="cm">/* Protect the object. May be the same we remove */</span>

    <span class="c1">// 订阅了才进行操作
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">((</span><span class="n">ln</span> <span class="o">=</span> <span class="n">listSearchKey</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pubsub_patterns</span><span class="p">,</span><span class="n">pattern</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">retval</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

        <span class="c1">// 从客户端订阅中删除
</span><span class="c1"></span>        <span class="n">listDelNode</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pubsub_patterns</span><span class="p">,</span><span class="n">ln</span><span class="p">);</span>
        <span class="n">pat</span><span class="p">.</span><span class="n">client</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
        <span class="n">pat</span><span class="p">.</span><span class="n">pattern</span> <span class="o">=</span> <span class="n">pattern</span><span class="p">;</span>

        <span class="c1">// 从服务端订阅中删除
</span><span class="c1"></span>        <span class="n">ln</span> <span class="o">=</span> <span class="n">listSearchKey</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">pubsub_patterns</span><span class="p">,</span><span class="o">&amp;</span><span class="n">pat</span><span class="p">);</span>
        <span class="n">listDelNode</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">pubsub_patterns</span><span class="p">,</span><span class="n">ln</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="cm">/* Notify the client */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">notify</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">mbulkhdr</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">punsubscribebulk</span><span class="p">);</span>
        <span class="n">addReplyBulk</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">pattern</span><span class="p">);</span>
        <span class="n">addReplyLongLong</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">dictSize</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pubsub_channels</span><span class="p">)</span><span class="o">+</span>
                       <span class="n">listLength</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">pubsub_patterns</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="n">decrRefCount</span><span class="p">(</span><span class="n">pattern</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">retval</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="发送消息">发送消息</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 发布消息
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">publishCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">receivers</span> <span class="o">=</span> <span class="n">pubsubPublishMessage</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>

    <span class="c1">// 暂时不考虑集群
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">cluster_enabled</span><span class="p">)</span>
        <span class="n">clusterPropagatePublish</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
    <span class="k">else</span>
        <span class="n">forceCommandPropagation</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">REDIS_PROPAGATE_REPL</span><span class="p">);</span>
    <span class="n">addReplyLongLong</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">receivers</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 将消息发送到所有订阅了频道的客户端
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">pubsubPublishMessage</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">channel</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">receivers</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">dictEntry</span> <span class="o">*</span><span class="n">de</span><span class="p">;</span>
    <span class="n">listNode</span> <span class="o">*</span><span class="n">ln</span><span class="p">;</span>
    <span class="n">listIter</span> <span class="n">li</span><span class="p">;</span>

    <span class="cm">/* Send to clients listening for that channel */</span>
    <span class="c1">// 先查找订阅了频道的
</span><span class="c1"></span>    <span class="n">de</span> <span class="o">=</span> <span class="n">dictFind</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">pubsub_channels</span><span class="p">,</span><span class="n">channel</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">de</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// 获取链表
</span><span class="c1"></span>        <span class="n">list</span> <span class="o">*</span><span class="n">list</span> <span class="o">=</span> <span class="n">dictGetVal</span><span class="p">(</span><span class="n">de</span><span class="p">);</span>
        <span class="n">listNode</span> <span class="o">*</span><span class="n">ln</span><span class="p">;</span>
        <span class="n">listIter</span> <span class="n">li</span><span class="p">;</span>

        <span class="c1">// 遍历链表 发送消息
</span><span class="c1"></span>        <span class="n">listRewind</span><span class="p">(</span><span class="n">list</span><span class="p">,</span><span class="o">&amp;</span><span class="n">li</span><span class="p">);</span>
        <span class="k">while</span> <span class="p">((</span><span class="n">ln</span> <span class="o">=</span> <span class="n">listNext</span><span class="p">(</span><span class="o">&amp;</span><span class="n">li</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="n">ln</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span>

            <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">mbulkhdr</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
            <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">messagebulk</span><span class="p">);</span>
            <span class="n">addReplyBulk</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">channel</span><span class="p">);</span>
            <span class="n">addReplyBulk</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">message</span><span class="p">);</span>
            <span class="n">receivers</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="cm">/* Send to clients listening to matching channels */</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">listLength</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">pubsub_patterns</span><span class="p">))</span> <span class="p">{</span>

        <span class="c1">// 遍历模式链表
</span><span class="c1"></span>        <span class="n">listRewind</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">pubsub_patterns</span><span class="p">,</span><span class="o">&amp;</span><span class="n">li</span><span class="p">);</span>
        <span class="n">channel</span> <span class="o">=</span> <span class="n">getDecodedObject</span><span class="p">(</span><span class="n">channel</span><span class="p">);</span>
        <span class="k">while</span> <span class="p">((</span><span class="n">ln</span> <span class="o">=</span> <span class="n">listNext</span><span class="p">(</span><span class="o">&amp;</span><span class="n">li</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">pubsubPattern</span> <span class="o">*</span><span class="n">pat</span> <span class="o">=</span> <span class="n">ln</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span>

            <span class="c1">// 匹配模式 发送消息
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">stringmatchlen</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">pat</span><span class="o">-&gt;</span><span class="n">pattern</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">,</span>
                                <span class="n">sdslen</span><span class="p">(</span><span class="n">pat</span><span class="o">-&gt;</span><span class="n">pattern</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">),</span>
                                <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">channel</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">,</span>
                                <span class="n">sdslen</span><span class="p">(</span><span class="n">channel</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">),</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
                <span class="n">addReply</span><span class="p">(</span><span class="n">pat</span><span class="o">-&gt;</span><span class="n">client</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">mbulkhdr</span><span class="p">[</span><span class="mi">4</span><span class="p">]);</span>
                <span class="n">addReply</span><span class="p">(</span><span class="n">pat</span><span class="o">-&gt;</span><span class="n">client</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">pmessagebulk</span><span class="p">);</span>
                <span class="n">addReplyBulk</span><span class="p">(</span><span class="n">pat</span><span class="o">-&gt;</span><span class="n">client</span><span class="p">,</span><span class="n">pat</span><span class="o">-&gt;</span><span class="n">pattern</span><span class="p">);</span>
                <span class="n">addReplyBulk</span><span class="p">(</span><span class="n">pat</span><span class="o">-&gt;</span><span class="n">client</span><span class="p">,</span><span class="n">channel</span><span class="p">);</span>
                <span class="n">addReplyBulk</span><span class="p">(</span><span class="n">pat</span><span class="o">-&gt;</span><span class="n">client</span><span class="p">,</span><span class="n">message</span><span class="p">);</span>
                <span class="n">receivers</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">decrRefCount</span><span class="p">(</span><span class="n">channel</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">receivers</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>redis源码阅读-RDB持久化</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-rdb%E6%8C%81%E4%B9%85%E5%8C%96/</link>
    <pubDate>Wed, 12 Jul 2017 16:04:59 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-rdb%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
    <description><![CDATA[<p>Redis是一个内存数据库，数据存储在内存之中。有一个问题就是如果数据不存储到硬盘，那么在服务器进程退出之后，服务器中所有的数据库数据就会丢失。</p>
<p>Redis为了解决这个问题，提供了持久化功能，目前有两种一种是RDB持久化，一种是AOF持久化。</p>
<p>RDB持久化是生成一个RDB文件，该文件是一个经过压缩的二进制文件，通过该文件可以还原数据库的状态。</p>
<h2 id="rdb文件的保存命令">RDB文件的保存命令</h2>
<p>Redis有两个命令可以生成RDB文件一个是SAVE，一个是BGSAVE。
SAVE命令调用saveCommand进行处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">saveCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 判断是否正在执行BGSAVE，是则退出
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_child_pid</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">addReplyError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;Background save already in progress&#34;</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">//调用rdbSave生成RDB文件
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">rdbSave</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_filename</span><span class="p">)</span> <span class="o">==</span> <span class="n">REDIS_OK</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">ok</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">err</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>BGSAVE调用bgsaveCommand进行处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">bgsaveCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 判断是否已经在执行BGSAVE
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_child_pid</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">addReplyError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;Background save already in progress&#34;</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">aof_child_pid</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        
    <span class="c1">// 判断是否在执行BGREWRIEAOF
</span><span class="c1"></span>        <span class="n">addReplyError</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;Can&#39;t BGSAVE while AOF log rewriting is in progress&#34;</span><span class="p">);</span>
    
    <span class="c1">// 执行rdbSaveBackground 生成RDB文件
</span><span class="c1"></span>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">rdbSaveBackground</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_filename</span><span class="p">)</span> <span class="o">==</span> <span class="n">REDIS_OK</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">addReplyStatus</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="s">&#34;Background saving started&#34;</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">err</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">rdbSaveBackground</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">pid_t</span> <span class="n">childpid</span><span class="p">;</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">start</span><span class="p">;</span>

    <span class="c1">// 如果BGSAVE正在执行直接返回
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_child_pid</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>

    <span class="c1">// 获取dirty数据 执行时间
</span><span class="c1"></span>    <span class="n">server</span><span class="p">.</span><span class="n">dirty_before_bgsave</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">dirty</span><span class="p">;</span>
    <span class="n">server</span><span class="p">.</span><span class="n">lastbgsave_try</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>

    <span class="c1">// fork() 开始前时间
</span><span class="c1"></span>    <span class="n">start</span> <span class="o">=</span> <span class="n">ustime</span><span class="p">();</span>

    <span class="c1">// 调用fork，克隆该进程
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">((</span><span class="n">childpid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">())</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">retval</span><span class="p">;</span>

        <span class="cm">/* Child */</span>
        <span class="n">closeListeningSockets</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
        <span class="n">redisSetProcTitle</span><span class="p">(</span><span class="s">&#34;redis-rdb-bgsave&#34;</span><span class="p">);</span>

        <span class="c1">// 执行保存操作
</span><span class="c1"></span>        <span class="n">retval</span> <span class="o">=</span> <span class="n">rdbSave</span><span class="p">(</span><span class="n">filename</span><span class="p">);</span>

        <span class="c1">// 打印 copy-on-write 时使用的内存数
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">retval</span> <span class="o">==</span> <span class="n">REDIS_OK</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">size_t</span> <span class="n">private_dirty</span> <span class="o">=</span> <span class="n">zmalloc_get_private_dirty</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">private_dirty</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_NOTICE</span><span class="p">,</span>
                    <span class="s">&#34;RDB: %zu MB of memory used by copy-on-write&#34;</span><span class="p">,</span>
                    <span class="n">private_dirty</span><span class="o">/</span><span class="p">(</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="p">));</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="c1">// 向父进程发送信号
</span><span class="c1"></span>        <span class="n">exitFromChild</span><span class="p">((</span><span class="n">retval</span> <span class="o">==</span> <span class="n">REDIS_OK</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="cm">/* Parent */</span>

        <span class="c1">// 计算 fork() 执行的时间
</span><span class="c1"></span>        <span class="n">server</span><span class="p">.</span><span class="n">stat_fork_time</span> <span class="o">=</span> <span class="n">ustime</span><span class="p">()</span><span class="o">-</span><span class="n">start</span><span class="p">;</span>
        <span class="n">server</span><span class="p">.</span><span class="n">stat_fork_rate</span> <span class="o">=</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span> <span class="n">zmalloc_used_memory</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000000</span> <span class="o">/</span> <span class="n">server</span><span class="p">.</span><span class="n">stat_fork_time</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="p">);</span> <span class="cm">/* GB per second. */</span>
        <span class="n">latencyAddSampleIfNeeded</span><span class="p">(</span><span class="s">&#34;fork&#34;</span><span class="p">,</span><span class="n">server</span><span class="p">.</span><span class="n">stat_fork_time</span><span class="o">/</span><span class="mi">1000</span><span class="p">);</span>
        
        <span class="c1">// 执行fork()错误信息
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">childpid</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">server</span><span class="p">.</span><span class="n">lastbgsave_status</span> <span class="o">=</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
            <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span><span class="s">&#34;Can&#39;t save in background: fork: %s&#34;</span><span class="p">,</span>
                <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
            <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_NOTICE</span><span class="p">,</span><span class="s">&#34;Background saving started by pid %d&#34;</span><span class="p">,</span><span class="n">childpid</span><span class="p">);</span>
        
        <span class="c1">// 记录数据库开始BGSAVE时间
</span><span class="c1"></span>        <span class="n">server</span><span class="p">.</span><span class="n">rdb_save_time_start</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>

        <span class="c1">// 子进程ID 类型
</span><span class="c1"></span>        <span class="n">server</span><span class="p">.</span><span class="n">rdb_child_pid</span> <span class="o">=</span> <span class="n">childpid</span><span class="p">;</span>
        <span class="n">server</span><span class="p">.</span><span class="n">rdb_child_type</span> <span class="o">=</span> <span class="n">REDIS_RDB_CHILD_TYPE_DISK</span><span class="p">;</span>

        <span class="c1">// 关闭自动Rehash
</span><span class="c1"></span>        <span class="n">updateDictResizePolicy</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span> <span class="cm">/* unreached */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>那么怎么才能够知道BGSAVE执行完毕，BGSAVE执行完毕后使用exitFromChild((retval == REDIS_OK) ? 0 : 1);向父进程发送信号。父进程调用serverCron接收该信号。</p>
<p>以下是处理函数的部分代码，处理BGREWRITEAOF与BGSAVE的完成信号。最终调用backgroundSaveDoneHandler根据返回信号信息进行对应处理。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">serverCron</span><span class="p">(</span><span class="k">struct</span> <span class="n">aeEventLoop</span> <span class="o">*</span><span class="n">eventLoop</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">id</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">clientData</span><span class="p">)</span> <span class="p">{</span>
<span class="err">\\</span> <span class="p">...</span>
    <span class="c1">// 检查 BGSAVE 或者 BGREWRITEAOF 是否已经执行完毕
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_child_pid</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="n">server</span><span class="p">.</span><span class="n">aof_child_pid</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">statloc</span><span class="p">;</span>
        <span class="n">pid_t</span> <span class="n">pid</span><span class="p">;</span>

        <span class="c1">// 接收子进程发来的信号
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">((</span><span class="n">pid</span> <span class="o">=</span> <span class="n">wait3</span><span class="p">(</span><span class="o">&amp;</span><span class="n">statloc</span><span class="p">,</span><span class="n">WNOHANG</span><span class="p">,</span><span class="nb">NULL</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">exitcode</span> <span class="o">=</span> <span class="n">WEXITSTATUS</span><span class="p">(</span><span class="n">statloc</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">bysignal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            
            <span class="k">if</span> <span class="p">(</span><span class="n">WIFSIGNALED</span><span class="p">(</span><span class="n">statloc</span><span class="p">))</span> <span class="n">bysignal</span> <span class="o">=</span> <span class="n">WTERMSIG</span><span class="p">(</span><span class="n">statloc</span><span class="p">);</span>

            <span class="c1">// BGSAVE 执行完毕
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="n">server</span><span class="p">.</span><span class="n">rdb_child_pid</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">backgroundSaveDoneHandler</span><span class="p">(</span><span class="n">exitcode</span><span class="p">,</span><span class="n">bysignal</span><span class="p">);</span>

            <span class="c1">// BGREWRITEAOF 执行完毕
</span><span class="c1"></span>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="n">server</span><span class="p">.</span><span class="n">aof_child_pid</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">backgroundRewriteDoneHandler</span><span class="p">(</span><span class="n">exitcode</span><span class="p">,</span><span class="n">bysignal</span><span class="p">);</span>

            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span>
                    <span class="s">&#34;Warning, detected child with unmatched pid: %ld&#34;</span><span class="p">,</span>
                    <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pid</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">updateDictResizePolicy</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="err">\\</span> <span class="p">...</span>
  
<span class="cm">/* A background saving child (BGSAVE) terminated its work. Handle this.
</span><span class="cm"> * This function covers the case of actual BGSAVEs. */</span>
<span class="kt">void</span> <span class="n">backgroundSaveDoneHandlerDisk</span><span class="p">(</span><span class="kt">int</span> <span class="n">exitcode</span><span class="p">,</span> <span class="kt">int</span> <span class="n">bysignal</span><span class="p">)</span> <span class="p">{</span>
    
    <span class="c1">// 成功
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">bysignal</span> <span class="o">&amp;&amp;</span> <span class="n">exitcode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_NOTICE</span><span class="p">,</span>
            <span class="s">&#34;Background saving terminated with success&#34;</span><span class="p">);</span>
        <span class="n">server</span><span class="p">.</span><span class="n">dirty</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">dirty</span> <span class="o">-</span> <span class="n">server</span><span class="p">.</span><span class="n">dirty_before_bgsave</span><span class="p">;</span>
        <span class="n">server</span><span class="p">.</span><span class="n">lastsave</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
        <span class="n">server</span><span class="p">.</span><span class="n">lastbgsave_status</span> <span class="o">=</span> <span class="n">REDIS_OK</span><span class="p">;</span>

    <span class="c1">// 出错
</span><span class="c1"></span>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">bysignal</span> <span class="o">&amp;&amp;</span> <span class="n">exitcode</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span> <span class="s">&#34;Background saving error&#34;</span><span class="p">);</span>
        <span class="n">server</span><span class="p">.</span><span class="n">lastbgsave_status</span> <span class="o">=</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">mstime_t</span> <span class="n">latency</span><span class="p">;</span>

        <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span>
            <span class="s">&#34;Background saving terminated by signal %d&#34;</span><span class="p">,</span> <span class="n">bysignal</span><span class="p">);</span>
        <span class="n">latencyStartMonitor</span><span class="p">(</span><span class="n">latency</span><span class="p">);</span>
        <span class="n">rdbRemoveTempFile</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_child_pid</span><span class="p">);</span>
        <span class="n">latencyEndMonitor</span><span class="p">(</span><span class="n">latency</span><span class="p">);</span>
        <span class="n">latencyAddSampleIfNeeded</span><span class="p">(</span><span class="s">&#34;rdb-unlink-temp-file&#34;</span><span class="p">,</span><span class="n">latency</span><span class="p">);</span>
        <span class="cm">/* SIGUSR1 is whitelisted, so we have a way to kill a child without
</span><span class="cm">         * tirggering an error conditon. */</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">bysignal</span> <span class="o">!=</span> <span class="n">SIGUSR1</span><span class="p">)</span>
            <span class="n">server</span><span class="p">.</span><span class="n">lastbgsave_status</span> <span class="o">=</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 更新状态
</span><span class="c1"></span>    <span class="n">server</span><span class="p">.</span><span class="n">rdb_child_pid</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="n">server</span><span class="p">.</span><span class="n">rdb_child_type</span> <span class="o">=</span> <span class="n">REDIS_RDB_CHILD_TYPE_NONE</span><span class="p">;</span>
    <span class="n">server</span><span class="p">.</span><span class="n">rdb_save_time_last</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span><span class="o">-</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_save_time_start</span><span class="p">;</span>
    <span class="n">server</span><span class="p">.</span><span class="n">rdb_save_time_start</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="cm">/* Possibly there are slaves waiting for a BGSAVE in order to be served
</span><span class="cm">     * (the first stage of SYNC is a bulk transfer of dump.rdb) */</span>
    <span class="n">updateSlavesWaitingBgsave</span><span class="p">((</span><span class="o">!</span><span class="n">bysignal</span> <span class="o">&amp;&amp;</span> <span class="n">exitcode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="nl">REDIS_OK</span> <span class="p">:</span> <span class="n">REDIS_ERR</span><span class="p">,</span> <span class="n">REDIS_RDB_CHILD_TYPE_DISK</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="rdbsave">rdbSave</h3>
<p>int rdbSave(char *filename);是SAVE与BGSAVE命令执行时正在用来生成RDB文件的函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">rdbSave</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">tmpfile</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
    <span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>
    <span class="n">rio</span> <span class="n">rdb</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">error</span><span class="p">;</span>

    <span class="c1">// 生成临时文件
</span><span class="c1"></span>    <span class="n">snprintf</span><span class="p">(</span><span class="n">tmpfile</span><span class="p">,</span><span class="mi">256</span><span class="p">,</span><span class="s">&#34;temp-%d.rdb&#34;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">getpid</span><span class="p">());</span>
    <span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">tmpfile</span><span class="p">,</span><span class="s">&#34;w&#34;</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">fp</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span> <span class="s">&#34;Failed opening .rdb for saving: %s&#34;</span><span class="p">,</span>
            <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 初始化I/O
</span><span class="c1"></span>    <span class="n">rioInitWithFile</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rdb</span><span class="p">,</span><span class="n">fp</span><span class="p">);</span>
    
    <span class="c1">// 生成RDB文件
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">rdbSaveRio</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rdb</span><span class="p">,</span><span class="o">&amp;</span><span class="n">error</span><span class="p">)</span> <span class="o">==</span> <span class="n">REDIS_ERR</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">errno</span> <span class="o">=</span> <span class="n">error</span><span class="p">;</span>
        <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 确保缓存中没有数据
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">fflush</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">==</span> <span class="n">EOF</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fsync</span><span class="p">(</span><span class="n">fileno</span><span class="p">(</span><span class="n">fp</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">==</span> <span class="n">EOF</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>

    <span class="c1">// 使用RENAME改名
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">rename</span><span class="p">(</span><span class="n">tmpfile</span><span class="p">,</span><span class="n">filename</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span><span class="s">&#34;Error moving temp DB file on the final destination: %s&#34;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
        <span class="n">unlink</span><span class="p">(</span><span class="n">tmpfile</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 日志 设置状态
</span><span class="c1"></span>    <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_NOTICE</span><span class="p">,</span><span class="s">&#34;DB saved on disk&#34;</span><span class="p">);</span>
    <span class="n">server</span><span class="p">.</span><span class="n">dirty</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">server</span><span class="p">.</span><span class="n">lastsave</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="n">server</span><span class="p">.</span><span class="n">lastbgsave_status</span> <span class="o">=</span> <span class="n">REDIS_OK</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span>

<span class="nl">werr</span><span class="p">:</span>

    <span class="c1">// 异常处理
</span><span class="c1"></span>    <span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
    <span class="n">unlink</span><span class="p">(</span><span class="n">tmpfile</span><span class="p">);</span>
    <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span><span class="s">&#34;Write error saving DB on disk: %s&#34;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
    <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>实际是调用rdbSaveRio执行写入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">rdbSaveRio</span><span class="p">(</span><span class="n">rio</span> <span class="o">*</span><span class="n">rdb</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dictIterator</span> <span class="o">*</span><span class="n">di</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">dictEntry</span> <span class="o">*</span><span class="n">de</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">magic</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">now</span> <span class="o">=</span> <span class="n">mstime</span><span class="p">();</span>
    <span class="n">uint64_t</span> <span class="n">cksum</span><span class="p">;</span>

    <span class="c1">// 设置校验和
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_checksum</span><span class="p">)</span>
        <span class="n">rdb</span><span class="o">-&gt;</span><span class="n">update_cksum</span> <span class="o">=</span> <span class="n">rioGenericUpdateChecksum</span><span class="p">;</span>

    <span class="c1">// 写入REDIS版本号
</span><span class="c1"></span>    <span class="n">snprintf</span><span class="p">(</span><span class="n">magic</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">magic</span><span class="p">),</span><span class="s">&#34;REDIS%04d&#34;</span><span class="p">,</span><span class="n">REDIS_RDB_VERSION</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">rdbWriteRaw</span><span class="p">(</span><span class="n">rdb</span><span class="p">,</span><span class="n">magic</span><span class="p">,</span><span class="mi">9</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>

    <span class="c1">// 遍历数据库
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">server</span><span class="p">.</span><span class="n">dbnum</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">db</span><span class="o">+</span><span class="n">j</span><span class="p">;</span>
        <span class="n">dict</span> <span class="o">*</span><span class="n">d</span> <span class="o">=</span> <span class="n">db</span><span class="o">-&gt;</span><span class="n">dict</span><span class="p">;</span>

        <span class="c1">// 跳过空数据库
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">dictSize</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>

        <span class="c1">// 键空间迭代器
</span><span class="c1"></span>        <span class="n">di</span> <span class="o">=</span> <span class="n">dictGetSafeIterator</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">di</span><span class="p">)</span> <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>

        <span class="cm">/* Write the SELECT DB opcode */</span>
        <span class="c1">// 写入DB选择器
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">rdbSaveType</span><span class="p">(</span><span class="n">rdb</span><span class="p">,</span><span class="n">REDIS_RDB_OPCODE_SELECTDB</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">rdbSaveLen</span><span class="p">(</span><span class="n">rdb</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>

        <span class="cm">/* Iterate this DB writing every entry */</span>
      <span class="c1">// 遍历数据库，写入键值对
</span><span class="c1"></span>        <span class="k">while</span><span class="p">((</span><span class="n">de</span> <span class="o">=</span> <span class="n">dictNext</span><span class="p">(</span><span class="n">di</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">sds</span> <span class="n">keystr</span> <span class="o">=</span> <span class="n">dictGetKey</span><span class="p">(</span><span class="n">de</span><span class="p">);</span>
            <span class="n">robj</span> <span class="n">key</span><span class="p">,</span> <span class="o">*</span><span class="n">o</span> <span class="o">=</span> <span class="n">dictGetVal</span><span class="p">(</span><span class="n">de</span><span class="p">);</span>
            <span class="kt">long</span> <span class="kt">long</span> <span class="n">expire</span><span class="p">;</span>

            <span class="n">initStaticStringObject</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">keystr</span><span class="p">);</span>
            <span class="n">expire</span> <span class="o">=</span> <span class="n">getExpire</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="o">&amp;</span><span class="n">key</span><span class="p">);</span>

            <span class="c1">// 写入键值对
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">rdbSaveKeyValuePair</span><span class="p">(</span><span class="n">rdb</span><span class="p">,</span><span class="o">&amp;</span><span class="n">key</span><span class="p">,</span><span class="n">o</span><span class="p">,</span><span class="n">expire</span><span class="p">,</span><span class="n">now</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">dictReleaseIterator</span><span class="p">(</span><span class="n">di</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">di</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="cm">/* So that we don&#39;t release it again on error. */</span>

    <span class="cm">/* EOF opcode */</span>
    <span class="c1">// 写入 EOF 代码
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">rdbSaveType</span><span class="p">(</span><span class="n">rdb</span><span class="p">,</span><span class="n">REDIS_RDB_OPCODE_EOF</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>

    <span class="cm">/* CRC64 checksum. It will be zero if checksum computation is disabled, the
</span><span class="cm">     * loading code skips the check in this case. */</span>
    <span class="c1">// CRC64 校验和。
</span><span class="c1"></span>    <span class="n">cksum</span> <span class="o">=</span> <span class="n">rdb</span><span class="o">-&gt;</span><span class="n">cksum</span><span class="p">;</span>
    <span class="n">memrev64ifbe</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cksum</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">rioWrite</span><span class="p">(</span><span class="n">rdb</span><span class="p">,</span><span class="o">&amp;</span><span class="n">cksum</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">werr</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span>

<span class="nl">werr</span><span class="p">:</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="n">errno</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">di</span><span class="p">)</span> <span class="n">dictReleaseIterator</span><span class="p">(</span><span class="n">di</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="自动保存">自动保存</h2>
<p>redis能够配置自动保存条件，当满足的情况下执行BGSAVE。</p>
<p>依赖上次保存时间和dirty计数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// serverCron函数
</span><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_child_pid</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="n">server</span><span class="p">.</span><span class="n">aof_child_pid</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span>
    <span class="n">ldbPendingChildren</span><span class="p">())</span>
<span class="p">{</span>
  <span class="c1">// 为之前处理BGSAVE完成的部分的代码
</span><span class="c1"></span><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="c1">// 检查所有保存条件
</span><span class="c1"></span>  <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">server</span><span class="p">.</span><span class="n">saveparamslen</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">saveparam</span> <span class="o">*</span><span class="n">sp</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">saveparams</span><span class="o">+</span><span class="n">j</span><span class="p">;</span>
    <span class="c1">// 检查某个保存条件是否符合
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">dirty</span> <span class="o">&gt;=</span> <span class="n">sp</span><span class="o">-&gt;</span><span class="n">changes</span> <span class="o">&amp;&amp;</span>
        <span class="n">server</span><span class="p">.</span><span class="n">unixtime</span><span class="o">-</span><span class="n">server</span><span class="p">.</span><span class="n">lastsave</span> <span class="o">&gt;</span> <span class="n">sp</span><span class="o">-&gt;</span><span class="n">seconds</span> <span class="o">&amp;&amp;</span>
        <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">unixtime</span><span class="o">-</span><span class="n">server</span><span class="p">.</span><span class="n">lastbgsave_try</span> <span class="o">&gt;</span>
         <span class="n">CONFIG_BGSAVE_RETRY_DELAY</span> <span class="o">||</span>
         <span class="n">server</span><span class="p">.</span><span class="n">lastbgsave_status</span> <span class="o">==</span> <span class="n">C_OK</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="n">serverLog</span><span class="p">(</span><span class="n">LL_NOTICE</span><span class="p">,</span><span class="s">&#34;%d changes in %d seconds. Saving...&#34;</span><span class="p">,</span>
                <span class="n">sp</span><span class="o">-&gt;</span><span class="n">changes</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">sp</span><span class="o">-&gt;</span><span class="n">seconds</span><span class="p">);</span>
      
      <span class="c1">// 保存
</span><span class="c1"></span>      <span class="n">rdbSaveBackground</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_filename</span><span class="p">);</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="rdb的文件载入">RDB的文件载入</h2>
<p>rdbload()用于将RDB文件从硬盘载入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">rdbLoad</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">uint32_t</span> <span class="n">dbid</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">type</span><span class="p">,</span> <span class="n">rdbver</span><span class="p">;</span>
    <span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">db</span><span class="o">+</span><span class="mi">0</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">expiretime</span><span class="p">,</span> <span class="n">now</span> <span class="o">=</span> <span class="n">mstime</span><span class="p">();</span>
    <span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>
    <span class="n">rio</span> <span class="n">rdb</span><span class="p">;</span>

    <span class="c1">// 打开rdb文件
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">((</span><span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span><span class="s">&#34;r&#34;</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>

    <span class="c1">// 初始化rio
</span><span class="c1"></span>    <span class="n">rioInitWithFile</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rdb</span><span class="p">,</span><span class="n">fp</span><span class="p">);</span>
    <span class="n">rdb</span><span class="p">.</span><span class="n">update_cksum</span> <span class="o">=</span> <span class="n">rdbLoadProgressCallback</span><span class="p">;</span>
    <span class="n">rdb</span><span class="p">.</span><span class="n">max_processing_chunk</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">loading_process_events_interval_bytes</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">rioRead</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rdb</span><span class="p">,</span><span class="n">buf</span><span class="p">,</span><span class="mi">9</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">eoferr</span><span class="p">;</span>
    <span class="n">buf</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>

    <span class="c1">// 校验版本号
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">memcmp</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="s">&#34;REDIS&#34;</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
        <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span><span class="s">&#34;Wrong signature trying to load DB from file&#34;</span><span class="p">);</span>
        <span class="n">errno</span> <span class="o">=</span> <span class="n">EINVAL</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">rdbver</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">buf</span><span class="o">+</span><span class="mi">5</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">rdbver</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">rdbver</span> <span class="o">&gt;</span> <span class="n">REDIS_RDB_VERSION</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
        <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span><span class="s">&#34;Can&#39;t handle RDB format version %d&#34;</span><span class="p">,</span><span class="n">rdbver</span><span class="p">);</span>
        <span class="n">errno</span> <span class="o">=</span> <span class="n">EINVAL</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 标记开始载入
</span><span class="c1"></span>    <span class="n">startLoading</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="o">*</span><span class="n">val</span><span class="p">;</span>
        <span class="n">expiretime</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

        <span class="cm">/* Read type. */</span>
        <span class="c1">// 读取类型
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">((</span><span class="n">type</span> <span class="o">=</span> <span class="n">rdbLoadType</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rdb</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">goto</span> <span class="n">eoferr</span><span class="p">;</span>

        <span class="c1">// 过期时间 秒为单位
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="n">REDIS_RDB_OPCODE_EXPIRETIME</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">// 过期时间
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">((</span><span class="n">expiretime</span> <span class="o">=</span> <span class="n">rdbLoadTime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rdb</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">goto</span> <span class="n">eoferr</span><span class="p">;</span>
            <span class="cm">/* We read the time so we need to read the object type again. */</span>

            <span class="c1">// 键值对
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">((</span><span class="n">type</span> <span class="o">=</span> <span class="n">rdbLoadType</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rdb</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">goto</span> <span class="n">eoferr</span><span class="p">;</span>
            <span class="cm">/* the EXPIRETIME opcode specifies time in seconds, so convert
</span><span class="cm">             * into milliseconds. */</span>
            <span class="n">expiretime</span> <span class="o">*=</span> <span class="mi">1000</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="n">REDIS_RDB_OPCODE_EXPIRETIME_MS</span><span class="p">)</span> <span class="p">{</span>
            <span class="cm">/* Milliseconds precision expire times introduced with RDB
</span><span class="cm">             * version 3. */</span>
             <span class="c1">// 过期时间 毫秒但闻
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">((</span><span class="n">expiretime</span> <span class="o">=</span> <span class="n">rdbLoadMillisecondTime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rdb</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">goto</span> <span class="n">eoferr</span><span class="p">;</span>
            <span class="cm">/* We read the time so we need to read the object type again. */</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">type</span> <span class="o">=</span> <span class="n">rdbLoadType</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rdb</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">goto</span> <span class="n">eoferr</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// EOF
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="n">REDIS_RDB_OPCODE_EOF</span><span class="p">)</span>
            <span class="k">break</span><span class="p">;</span>

        <span class="cm">/* Handle SELECT DB opcode as a special case */</span>
        <span class="c1">// 读取切换数据库指示
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="n">REDIS_RDB_OPCODE_SELECTDB</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">// 数据库号
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">((</span><span class="n">dbid</span> <span class="o">=</span> <span class="n">rdbLoadLen</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rdb</span><span class="p">,</span><span class="nb">NULL</span><span class="p">))</span> <span class="o">==</span> <span class="n">REDIS_RDB_LENERR</span><span class="p">)</span>
                <span class="k">goto</span> <span class="n">eoferr</span><span class="p">;</span>

            <span class="c1">// 校验
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">dbid</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="kt">unsigned</span><span class="p">)</span><span class="n">server</span><span class="p">.</span><span class="n">dbnum</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span><span class="s">&#34;FATAL: Data file was created with a Redis server configured to handle more than %d databases. Exiting</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">server</span><span class="p">.</span><span class="n">dbnum</span><span class="p">);</span>
                <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="c1">// 切换数据库
</span><span class="c1"></span>            <span class="n">db</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">db</span><span class="o">+</span><span class="n">dbid</span><span class="p">;</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="cm">/* Read key */</span>
        <span class="c1">// 读取键
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">((</span><span class="n">key</span> <span class="o">=</span> <span class="n">rdbLoadStringObject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rdb</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">goto</span> <span class="n">eoferr</span><span class="p">;</span>
        <span class="cm">/* Read value */</span>
        <span class="c1">// 读取值
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">((</span><span class="n">val</span> <span class="o">=</span> <span class="n">rdbLoadObject</span><span class="p">(</span><span class="n">type</span><span class="p">,</span><span class="o">&amp;</span><span class="n">rdb</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">goto</span> <span class="n">eoferr</span><span class="p">;</span>
        <span class="cm">/* Check if the key already expired. This function is used when loading
</span><span class="cm">         * an RDB file from disk, either at startup, or when an RDB was
</span><span class="cm">         * received from the master. In the latter case, the master is
</span><span class="cm">         * responsible for key expiry. If we would expire keys here, the
</span><span class="cm">         * snapshot taken by the master may not be reflected on the slave. */</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">masterhost</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">expiretime</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">expiretime</span> <span class="o">&lt;</span> <span class="n">now</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">decrRefCount</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
            <span class="n">decrRefCount</span><span class="p">(</span><span class="n">val</span><span class="p">);</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="cm">/* Add the new object in the hash table */</span>
        <span class="c1">// 将键值关联到数据库内
</span><span class="c1"></span>        <span class="n">dbAdd</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">);</span>

        <span class="cm">/* Set the expire time if needed */</span>
        <span class="c1">// 设置过期时间
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">expiretime</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">setExpire</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">expiretime</span><span class="p">);</span>

        <span class="n">decrRefCount</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="cm">/* Verify the checksum if RDB version is &gt;= 5 */</span>
    <span class="c1">// 校验和比较
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">rdbver</span> <span class="o">&gt;=</span> <span class="mi">5</span> <span class="o">&amp;&amp;</span> <span class="n">server</span><span class="p">.</span><span class="n">rdb_checksum</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">uint64_t</span> <span class="n">cksum</span><span class="p">,</span> <span class="n">expected</span> <span class="o">=</span> <span class="n">rdb</span><span class="p">.</span><span class="n">cksum</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">rioRead</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rdb</span><span class="p">,</span><span class="o">&amp;</span><span class="n">cksum</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">goto</span> <span class="n">eoferr</span><span class="p">;</span>
        <span class="n">memrev64ifbe</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cksum</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">cksum</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span><span class="s">&#34;RDB file was saved with checksum disabled: no check performed.&#34;</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">cksum</span> <span class="o">!=</span> <span class="n">expected</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span><span class="s">&#34;Wrong RDB checksum. Aborting now.&#34;</span><span class="p">);</span>
            <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 结束
</span><span class="c1"></span>    <span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
    <span class="n">stopLoading</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span>

<span class="nl">eoferr</span><span class="p">:</span> <span class="cm">/* unexpected end of file is handled here with a fatal exit */</span>
    <span class="n">redisLog</span><span class="p">(</span><span class="n">REDIS_WARNING</span><span class="p">,</span><span class="s">&#34;Short read or OOM loading DB. Unrecoverable error, aborting now.&#34;</span><span class="p">);</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span> <span class="cm">/* Just to avoid warning */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>redis源码阅读-服务器</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <pubDate>Mon, 10 Jul 2017 16:21:21 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
    <description><![CDATA[<h2 id="服务器">服务器</h2>
<p>redis运行存在一个redis服务器结构，一个服务器中保存着n个数据库。</p>
<p>dbnum由服务器配置决定，默认值为16。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="k">struct</span> <span class="n">redisServer</span> <span class="p">{</span>
    <span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">;</span>  <span class="c1">// Redis的数据库
</span><span class="c1"></span>    <span class="c1">// ...
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">dbnum</span><span class="p">;</span>  <span class="c1">// 表明数据库的数量
</span><span class="c1"></span>    <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">redisDb</span> <span class="p">{</span>
    <span class="n">dict</span> <span class="o">*</span><span class="n">dict</span><span class="p">;</span>                 <span class="cm">/* 数据库键字典 */</span>
    <span class="n">dict</span> <span class="o">*</span><span class="n">expires</span><span class="p">;</span>              <span class="cm">/* 键过期时间字典 */</span>
    <span class="n">dict</span> <span class="o">*</span><span class="n">blocking_keys</span><span class="p">;</span>        <span class="cm">/* 处于阻塞状态的键 */</span>
    <span class="n">dict</span> <span class="o">*</span><span class="n">ready_keys</span><span class="p">;</span>           <span class="cm">/* 可以解除阻塞的键 */</span>
    <span class="n">dict</span> <span class="o">*</span><span class="n">watched_keys</span><span class="p">;</span>         <span class="cm">/* 被watch的键 */</span>
    <span class="k">struct</span> <span class="n">evictionPoolEntry</span> <span class="o">*</span><span class="n">eviction_pool</span><span class="p">;</span>    <span class="cm">/* Eviction pool of keys */</span>
    <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>                     <span class="cm">/* 数据库编号 */</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">avg_ttl</span><span class="p">;</span>          <span class="cm">/* 数据库键的平均时间*/</span>
<span class="p">}</span> <span class="n">redisDb</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="切换数据库">切换数据库</h2>
<p>每个redis客户端都有自己的目标数据库，当客户端执行数据库读写命令，目标数据库是这些命令的操作对象。</p>
<p>redis提供select命令来切换数据库，redisClient</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">redisClient</span> <span class="p">{</span> 
    <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>  <span class="c1">// 套接字描述符
</span><span class="c1"></span>    <span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">;</span> <span class="c1">// 当前正在使用的数据库
</span><span class="c1"></span>    <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>

<span class="kt">int</span> <span class="n">selectDb</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 校验id
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">id</span> <span class="o">&gt;=</span> <span class="n">server</span><span class="p">.</span><span class="n">dbnum</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">REDIS_ERR</span><span class="p">;</span>

    <span class="c1">// 切换客户端数据库
</span><span class="c1"></span>    <span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">server</span><span class="p">.</span><span class="n">db</span><span class="p">[</span><span class="n">id</span><span class="p">];</span>

    <span class="k">return</span> <span class="n">REDIS_OK</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><h2 id="数据库键空间">数据库键空间</h2>
<p>Redis数据库存放的数据都是以键值对形式存在，redisDB结构的dict字典保存数据库中的所有键值对，这个字典被成为键空间。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c">
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">redisDb</span> <span class="p">{</span>
    <span class="n">dict</span> <span class="o">*</span><span class="n">dict</span><span class="p">;</span>                 <span class="cm">/* 数据库键字典 */</span>
    <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span> <span class="n">redisDb</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>键空间的键就是数据库的键，每个键都是一个字符串对象。</p>
<p>键空间的值就是数据库的值，每个值可以是字符串对象、列表对象、哈希表对象、集合对象、有序集合对象中任意一种。</p>
<h2 id="键空间的操作">键空间的操作</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="cm">/* db.c -- Keyspace access API */</span>
<span class="kt">int</span> <span class="nf">removeExpire</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span><span class="c1">// 移除键的过期时间
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">propagateExpire</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">expireIfNeeded</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 检查是否过期，是则删除键
</span><span class="c1"></span><span class="kt">long</span> <span class="kt">long</span> <span class="nf">getExpire</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 获取过期时间
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">setExpire</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">when</span><span class="p">);</span> <span class="c1">// 设定过期时间
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">lookupKey</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 从db中取出键key的值
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">lookupKeyRead</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 从db中取出键key的值
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">lookupKeyWrite</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 从db中取出键key的值
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">lookupKeyReadOrReply</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">reply</span><span class="p">);</span> <span class="c1">// 从db中取出键key的值
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">lookupKeyWriteOrReply</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">reply</span><span class="p">);</span><span class="c1">// 从db中取出键key的值
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">dbAdd</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">val</span><span class="p">);</span><span class="c1">// 尝试将键值对key\val添加到数据库中
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">dbOverwrite</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">val</span><span class="p">);</span> <span class="c1">// 重写指定键的值,键不存在的话终止
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">setKey</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">val</span><span class="p">);</span><span class="c1">// 设定指定键的值，不管存不存在
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">dbExists</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 判断指定键是否存在  
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">dbRandomKey</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">);</span> <span class="c1">// 随机从数据库中取出一个键，并以字符串对象的方式返回这个键
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">dbDelete</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 从数据库中删除给定的键
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">dbUnshareStringValue</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">);</span>
<span class="kt">long</span> <span class="kt">long</span> <span class="nf">emptyDb</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="n">callback</span><span class="p">)(</span><span class="kt">void</span><span class="o">*</span><span class="p">));</span><span class="c1">// 情况所有数据
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">selectDb</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">id</span><span class="p">);</span> <span class="c1">// 切换db
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">signalModifiedKey</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">signalFlushedDb</span><span class="p">(</span><span class="kt">int</span> <span class="n">dbid</span><span class="p">);</span>
<span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">getKeysInSlot</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">hashslot</span><span class="p">,</span> <span class="n">robj</span> <span class="o">**</span><span class="n">keys</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">count</span><span class="p">);</span>
<span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">countKeysInSlot</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">hashslot</span><span class="p">);</span>
<span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">delKeysInSlot</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">hashslot</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">verifyClusterConfigWithData</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">scanGenericCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">cursor</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">parseScanCursorOrReply</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">*</span><span class="n">cursor</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="键空间的初始化">键空间的初始化</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="cm">/* Db-&gt;dict, keys are sds strings, vals are Redis objects. */</span>
<span class="c1">// 键空间的类型
</span><span class="c1"></span><span class="n">dictType</span> <span class="n">dbDictType</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">dictSdsHash</span><span class="p">,</span>                <span class="cm">/* hash function */</span>
    <span class="nb">NULL</span><span class="p">,</span>                       <span class="cm">/* key dup */</span>
    <span class="nb">NULL</span><span class="p">,</span>                       <span class="cm">/* val dup */</span>
    <span class="n">dictSdsKeyCompare</span><span class="p">,</span>          <span class="cm">/* key compare */</span>
    <span class="n">dictSdsDestructor</span><span class="p">,</span>          <span class="cm">/* key destructor */</span>
    <span class="n">dictRedisObjectDestructor</span>   <span class="cm">/* val destructor */</span>
<span class="p">};</span>

<span class="c1">// 服务器初始化的同时初始化键空间
</span><span class="c1"></span>
<span class="kt">void</span> <span class="nf">initServer</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// ...
</span><span class="c1"></span>    <span class="cm">/* Create the Redis databases, and initialize other internal state. */</span>
    <span class="c1">// 创建并初始化数据库结构
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">server</span><span class="p">.</span><span class="n">dbnum</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">server</span><span class="p">.</span><span class="n">db</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">dict</span> <span class="o">=</span> <span class="n">dictCreate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dbDictType</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
		<span class="c1">// ...
</span><span class="c1"></span>        <span class="n">server</span><span class="p">.</span><span class="n">db</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">id</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
		<span class="c1">// ...
</span><span class="c1"></span>    <span class="p">}</span>
	<span class="c1">// ...
</span><span class="c1"></span><span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="查找">查找</h3>
<p>有五个和查找相关的接口，代码如下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">robj</span> <span class="o">*</span><span class="nf">lookupKeyWriteOrReply</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">reply</span><span class="p">)</span> <span class="p">{</span>

    <span class="n">robj</span> <span class="o">*</span><span class="n">o</span> <span class="o">=</span> <span class="n">lookupKeyWrite</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">o</span><span class="p">)</span> <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">reply</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">o</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">robj</span> <span class="o">*</span><span class="nf">lookupKeyReadOrReply</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">reply</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 查找
</span><span class="c1"></span>    <span class="n">robj</span> <span class="o">*</span><span class="n">o</span> <span class="o">=</span> <span class="n">lookupKeyRead</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span>

    <span class="c1">// 发送信息
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">o</span><span class="p">)</span> <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">reply</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">o</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">robj</span> <span class="o">*</span><span class="nf">lookupKeyWrite</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 删除过期键
</span><span class="c1"></span>    <span class="n">expireIfNeeded</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>

    <span class="c1">// 查找并返回对象
</span><span class="c1"></span>    <span class="k">return</span> <span class="n">lookupKey</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">robj</span> <span class="o">*</span><span class="nf">lookupKeyRead</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">robj</span> <span class="o">*</span><span class="n">val</span><span class="p">;</span>

    <span class="c1">// 删除过期键
</span><span class="c1"></span>    <span class="n">expireIfNeeded</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>

    <span class="c1">// 查找对象
</span><span class="c1"></span>    <span class="n">val</span> <span class="o">=</span> <span class="n">lookupKey</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>

    <span class="c1">// 更新命中/不命中信息
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="n">server</span><span class="p">.</span><span class="n">stat_keyspace_misses</span><span class="o">++</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">server</span><span class="p">.</span><span class="n">stat_keyspace_hits</span><span class="o">++</span><span class="p">;</span>

    <span class="c1">// 返回值
</span><span class="c1"></span>    <span class="k">return</span> <span class="n">val</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">robj</span> <span class="o">*</span><span class="nf">lookupKey</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 查找
</span><span class="c1"></span>    <span class="n">dictEntry</span> <span class="o">*</span><span class="n">de</span> <span class="o">=</span> <span class="n">dictFind</span><span class="p">(</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">dict</span><span class="p">,</span><span class="n">key</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">de</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// 取出值
</span><span class="c1"></span>        <span class="n">robj</span> <span class="o">*</span><span class="n">val</span> <span class="o">=</span> <span class="n">dictGetVal</span><span class="p">(</span><span class="n">de</span><span class="p">);</span>

        <span class="c1">// 更新时间信息
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_child_pid</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">server</span><span class="p">.</span><span class="n">aof_child_pid</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">val</span><span class="o">-&gt;</span><span class="n">lru</span> <span class="o">=</span> <span class="n">LRU_CLOCK</span><span class="p">();</span>

        <span class="c1">// 返回值
</span><span class="c1"></span>        <span class="k">return</span> <span class="n">val</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="添加新键">添加新键</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">dbAdd</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">val</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">sds</span> <span class="n">copy</span> <span class="o">=</span> <span class="n">sdsdup</span><span class="p">(</span><span class="n">key</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">);</span> <span class="c1">// 复制键名
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">retval</span> <span class="o">=</span> <span class="n">dictAdd</span><span class="p">(</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">dict</span><span class="p">,</span> <span class="n">copy</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span> <span class="c1">// 尝试添加
</span><span class="c1"></span>
    <span class="n">redisAssertWithInfo</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">retval</span> <span class="o">==</span> <span class="n">REDIS_OK</span><span class="p">);</span> <span class="c1">// 已经存在则停止
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">val</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">REDIS_LIST</span><span class="p">)</span> <span class="n">signalListAsReady</span><span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">cluster_enabled</span><span class="p">)</span> <span class="n">slotToKeyAdd</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
 <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="修改键">修改键</h3>
<p>两种方式一种重写，一种设定不管存不存在。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">dbOverwrite</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">val</span><span class="p">);</span> <span class="c1">// 重写指定键的值,键不存在的话终止
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">setKey</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">val</span><span class="p">);</span><span class="c1">// 设定指定键的值，不管存不存在
</span><span class="c1"></span>
<span class="kt">void</span> <span class="nf">dbOverwrite</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">val</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dictEntry</span> <span class="o">*</span><span class="n">de</span> <span class="o">=</span> <span class="n">dictFind</span><span class="p">(</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">dict</span><span class="p">,</span><span class="n">key</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">);</span> <span class="c1">// 查找
</span><span class="c1"></span>
    <span class="n">redisAssertWithInfo</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">de</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span> <span class="c1">// 不存在，终止
</span><span class="c1"></span>    <span class="n">dictReplace</span><span class="p">(</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">dict</span><span class="p">,</span> <span class="n">key</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span> <span class="c1">// 修改旧值
</span><span class="c1"></span><span class="p">}</span>

<span class="kt">void</span> <span class="nf">setKey</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">val</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">lookupKeyWrite</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">dbAdd</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">);</span> <span class="c1">// 找不到就添加
</span><span class="c1"></span>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">dbOverwrite</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">);</span> <span class="c1">// 找到就重写
</span><span class="c1"></span>    <span class="p">}</span>
    <span class="n">incrRefCount</span><span class="p">(</span><span class="n">val</span><span class="p">);</span> <span class="c1">// 增加引用计数
</span><span class="c1"></span>    <span class="n">removeExpire</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 移除过期时间
</span><span class="c1"></span>    <span class="n">signalModifiedKey</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">);</span> <span class="c1">// 发送键修改通知
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="删除键">删除键</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">dbDelete</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/* Deleting an entry from the expires dict will not free the sds of
</span><span class="cm">     * the key, because it is shared with the main dictionary. */</span>
    <span class="c1">// 删除键的过期时间
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">dictSize</span><span class="p">(</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">expires</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">dictDelete</span><span class="p">(</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">expires</span><span class="p">,</span><span class="n">key</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">);</span>

    <span class="c1">// 删除键值对
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">dictDelete</span><span class="p">(</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">dict</span><span class="p">,</span><span class="n">key</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">)</span> <span class="o">==</span> <span class="n">DICT_OK</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">cluster_enabled</span><span class="p">)</span> <span class="n">slotToKeyDel</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="键的生存时间或过期时间">键的生存时间或过期时间</h2>
<p>与键空间类似redis建立了一个字典，存放每个键的对应的过期时间。在初始化的时候创建</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">dictType</span> <span class="n">keyptrDictType</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">dictSdsHash</span><span class="p">,</span>               <span class="cm">/* hash function */</span>
    <span class="nb">NULL</span><span class="p">,</span>                      <span class="cm">/* key dup */</span>
    <span class="nb">NULL</span><span class="p">,</span>                      <span class="cm">/* val dup */</span>
    <span class="n">dictSdsKeyCompare</span><span class="p">,</span>         <span class="cm">/* key compare */</span>
    <span class="nb">NULL</span><span class="p">,</span>                      <span class="cm">/* key destructor */</span>
    <span class="nb">NULL</span>                       <span class="cm">/* val destructor */</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="nf">initServer</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// ...
</span><span class="c1"></span>    <span class="c1">// 创建并初始化数据库结构
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">server</span><span class="p">.</span><span class="n">dbnum</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">server</span><span class="p">.</span><span class="n">db</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">expires</span> <span class="o">=</span> <span class="n">dictCreate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">keyptrDictType</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
		<span class="c1">// ...
</span><span class="c1"></span>        <span class="n">server</span><span class="p">.</span><span class="n">db</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">id</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
		<span class="c1">// ...
</span><span class="c1"></span>    <span class="p">}</span>
	<span class="c1">// ...
</span><span class="c1"></span><span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="设定键的过期时间">设定键的过期时间</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">setExpire</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">when</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dictEntry</span> <span class="o">*</span><span class="n">kde</span><span class="p">,</span> <span class="o">*</span><span class="n">de</span><span class="p">;</span>

    <span class="n">kde</span> <span class="o">=</span> <span class="n">dictFind</span><span class="p">(</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">dict</span><span class="p">,</span><span class="n">key</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">);</span> <span class="c1">// 查找键
</span><span class="c1"></span>    <span class="n">redisAssertWithInfo</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">kde</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="c1">// 在过期时间字典中查找，没有则添加
</span><span class="c1"></span>    <span class="n">de</span> <span class="o">=</span> <span class="n">dictReplaceRaw</span><span class="p">(</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">expires</span><span class="p">,</span><span class="n">dictGetKey</span><span class="p">(</span><span class="n">kde</span><span class="p">));</span>
    <span class="n">dictSetSignedIntegerVal</span><span class="p">(</span><span class="n">de</span><span class="p">,</span><span class="n">when</span><span class="p">);</span> <span class="c1">// 设置过期时间
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="获取键的过期时间">获取键的过期时间</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">long</span> <span class="kt">long</span> <span class="nf">getExpire</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dictEntry</span> <span class="o">*</span><span class="n">de</span><span class="p">;</span>

    <span class="c1">//  如果不存在直接返回
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">dictSize</span><span class="p">(</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">expires</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span>
       <span class="p">(</span><span class="n">de</span> <span class="o">=</span> <span class="n">dictFind</span><span class="p">(</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">expires</span><span class="p">,</span><span class="n">key</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

    <span class="n">redisAssertWithInfo</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">dictFind</span><span class="p">(</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">dict</span><span class="p">,</span><span class="n">key</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>

    <span class="c1">// 返回过期时间
</span><span class="c1"></span>    <span class="k">return</span> <span class="n">dictGetSignedIntegerVal</span><span class="p">(</span><span class="n">de</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="删除键的过期时间">删除键的过期时间</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">removeExpire</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
     <span class="c1">// 确保键有过期时间
</span><span class="c1"></span>    <span class="n">redisAssertWithInfo</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">dictFind</span><span class="p">(</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">dict</span><span class="p">,</span><span class="n">key</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">dictDelete</span><span class="p">(</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">expires</span><span class="p">,</span><span class="n">key</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">)</span> <span class="o">==</span> <span class="n">DICT_OK</span><span class="p">;</span> <span class="c1">// 删除
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="过期键的删除策略">过期键的删除策略</h3>
<p>三种策略：</p>
<ul>
<li>定时删除。定时删除占用cpu，可能使服务器长期无响应。但是对内存友好。</li>
<li>惰性删除，对键进行操作时，才删除。缺点是对内存不友好，过期键过多的话，没有及时清理。</li>
<li>定期删除。间隔依据算法确定。两者结合，主要看算法选择。</li>
</ul>
<p>redis采用定期和惰性两种删除方式。</p>
<h4 id="惰性删除">惰性删除</h4>
<p>redis在很多操作前都会调用expireIfNeeded进行惰性删除。例如lookupKeyRead。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">expireIfNeeded</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">mstime_t</span> <span class="n">when</span> <span class="o">=</span> <span class="n">getExpire</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>
    <span class="n">mstime_t</span> <span class="n">now</span><span class="p">;</span>

    <span class="c1">// 无过期时间
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">when</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* No expire for this key */</span>

    <span class="c1">// 正在加载不删除
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">loading</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

    <span class="cm">/* If we are in the context of a Lua script, we claim that time is
</span><span class="cm">     * blocked to when the Lua script started. This way a key can expire
</span><span class="cm">     * only the first time it is accessed and not in the middle of the
</span><span class="cm">     * script execution, making propagation to slaves / AOF consistent.
</span><span class="cm">     * See issue #1525 on Github for more information. */</span>
    <span class="n">now</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">lua_caller</span> <span class="o">?</span> <span class="n">server</span><span class="p">.</span><span class="nl">lua_time_start</span> <span class="p">:</span> <span class="n">mstime</span><span class="p">();</span>

    <span class="cm">/* If we are running in the context of a slave, return ASAP:
</span><span class="cm">     * the slave key expiration is controlled by the master that will
</span><span class="cm">     * send us synthesized DEL operations for expired keys.
</span><span class="cm">     *
</span><span class="cm">     * Still we try to return the right information to the caller,
</span><span class="cm">     * that is, 0 if we think the key should be still valid, 1 if
</span><span class="cm">     * we think the key is expired at this time. */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">masterhost</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="n">now</span> <span class="o">&gt;</span> <span class="n">when</span><span class="p">;</span>

    <span class="c1">// 没过期，返回0
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">now</span> <span class="o">&lt;=</span> <span class="n">when</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// 删除
</span><span class="c1"></span>    <span class="n">server</span><span class="p">.</span><span class="n">stat_expiredkeys</span><span class="o">++</span><span class="p">;</span>
    <span class="n">propagateExpire</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>
    <span class="n">notifyKeyspaceEvent</span><span class="p">(</span><span class="n">REDIS_NOTIFY_EXPIRED</span><span class="p">,</span>
        <span class="s">&#34;expired&#34;</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">dbDelete</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="定期删除">定期删除</h4>
<p>redis服务器周期性操作serverCron函数执行时，activeExpireCycle被调用，它在规定时间内分多次遍历服务器中的各个数据库，从数据库的expires字典中随机检查一部分键的过期时间，并删除其中的过期键。</p>]]></description>
</item><item>
    <title>redis源码阅读-对象</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%AF%B9%E8%B1%A1/</link>
    <pubDate>Sun, 09 Jul 2017 22:55:14 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%AF%B9%E8%B1%A1/</guid>
    <description><![CDATA[<p>之前阅读了redis用到的主要的数据结构，这些数据结构是redis对象基础。redis在这些基础数据结构之上创建了一个对象系统，这个系统包含字符串对象、列表对象、哈希对象、集合对象和有序集合对象五种类型的对象。</p>
<p>redis执行命令前，先判断命令是否能够执行给定命令。根据不同场合选择使用不同的数据结构。</p>
<h2 id="对象的类型与编码">对象的类型与编码</h2>
<p>redis使用对象来表示数据库中的键值，创建一个键值对时，会创建至少两个对象，一个对象用作键值对的键，一个对象用作键值对的值。</p>
<h3 id="对象的结构体">对象的结构体</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">redisObject</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="nl">type</span><span class="p">:</span><span class="mi">4</span><span class="p">;</span> <span class="c1">// 类型
</span><span class="c1"></span>    <span class="kt">unsigned</span> <span class="nl">encoding</span><span class="p">:</span><span class="mi">4</span><span class="p">;</span> <span class="c1">// 编码
</span><span class="c1"></span>    <span class="kt">unsigned</span> <span class="nl">lru</span><span class="p">:</span><span class="n">REDIS_LRU_BITS</span><span class="p">;</span> <span class="cm">/* lru time (relative to server.lruclock) */</span>
    <span class="kt">int</span> <span class="n">refcount</span><span class="p">;</span> <span class="c1">// 引用计数
</span><span class="c1"></span>    <span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span> <span class="c1">// 值
</span><span class="c1"></span><span class="p">}</span> <span class="n">robj</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>redis结构体使用位段结构节省空间</p>
<h4 id="类型type">类型type</h4>
<p>记录redis对象类型，五种类型</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="cp">#define REDIS_STRING 0 </span><span class="c1">// 字符串对象
</span><span class="c1"></span><span class="cp">#define REDIS_LIST 1 </span><span class="c1">// 列表对象
</span><span class="c1"></span><span class="cp">#define REDIS_SET 2 </span><span class="c1">// 哈希对象
</span><span class="c1"></span><span class="cp">#define REDIS_ZSET 3 </span><span class="c1">// 集合对象
</span><span class="c1"></span><span class="cp">#define REDIS_HASH 4 </span><span class="c1">// 有序集合对象
</span></code></pre></td></tr></table>
</div>
</div><h4 id="编码encoding">编码encoding</h4>
<p>记录redis对象的编码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 对象编码
</span><span class="c1"></span><span class="cp">#define REDIS_ENCODING_RAW 0     </span><span class="cm">/* 简单动态字符串 */</span><span class="cp">
</span><span class="cp">#define REDIS_ENCODING_INT 1     </span><span class="cm">/* long类型的整数 */</span><span class="cp">
</span><span class="cp">#define REDIS_ENCODING_HT 2      </span><span class="cm">/* 字典 */</span><span class="cp">
</span><span class="cp">#define REDIS_ENCODING_ZIPMAP 3  </span><span class="cm">/* zipmap 3.2.5不再使用 */</span><span class="cp">
</span><span class="cp">#define REDIS_ENCODING_LINKEDLIST 4 </span><span class="cm">/* 双端队列 */</span><span class="cp">
</span><span class="cp">#define REDIS_ENCODING_ZIPLIST 5 </span><span class="cm">/* 压缩列表 */</span><span class="cp">
</span><span class="cp">#define REDIS_ENCODING_INTSET 6  </span><span class="cm">/* 整数集合 */</span><span class="cp">
</span><span class="cp">#define REDIS_ENCODING_SKIPLIST 7  </span><span class="cm">/* 跳跃表 */</span><span class="cp">
</span><span class="cp">#define REDIS_ENCODING_EMBSTR 8  </span><span class="cm">/* EMBSTR编码的简单字符串 */</span><span class="cp">
</span></code></pre></td></tr></table>
</div>
</div><p>每种类型对应至少两种不同的编码。</p>
<table>
<thead>
<tr>
<th>对象类型</th>
<th>编码方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>REDIS_STRING</td>
<td>REDIS_ENCODING_RAW ,REDIS_ENCODING_INT ,REDIS_ENCODING_EMBSTR</td>
</tr>
<tr>
<td>REDIS_LIST</td>
<td>REDIS_ENCODING_LINKEDLIST ,REDIS_ENCODING_ZIPLIST</td>
</tr>
<tr>
<td>REDIS_SET</td>
<td>REDIS_ENCODING_INTSET ,REDIS_ENCODING_HT</td>
</tr>
<tr>
<td>REDIS_ZSET</td>
<td>REDIS_ENCODING_ZIPLIST ,REDIS_ENCODING_SKIPLIST</td>
</tr>
<tr>
<td>REDIS_HASH</td>
<td>REDIS_ENCODING_ZIPLIST ,REDIS_ENCODING_HT</td>
</tr>
</tbody>
</table>
<h4 id="访问时间">访问时间</h4>
<p>表示对象的最后一次访问时间。</p>
<h4 id="引用计数">引用计数</h4>
<p>常见的管理方式，引用计数为0时回收。</p>
<h2 id="对象的api">对象的API</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">decrRefCount</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">);</span> <span class="c1">// 引用计数-1，降为0时释放对象
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">decrRefCountVoid</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">o</span><span class="p">);</span> <span class="c1">// 用于特定数据结构的释放
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">incrRefCount</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">);</span> <span class="c1">// 引用计数+1
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">resetRefCount</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">obj</span><span class="p">);</span> <span class="c1">// 设置引用计数为0
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">freeStringObject</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">);</span> <span class="c1">// 释放字符串对象
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">freeListObject</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">);</span> <span class="c1">// 释放列表对象
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">freeSetObject</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">);</span>  <span class="c1">// 释放集合对象
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">freeZsetObject</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">);</span> <span class="c1">// 释放有序集合对象
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">freeHashObject</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">);</span> <span class="c1">// 释放hash对象
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">createObject</span><span class="p">(</span><span class="kt">int</span> <span class="n">type</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">);</span> <span class="c1">// 创建一个新robj对象
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">createStringObject</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">len</span><span class="p">);</span> <span class="c1">// 创建一个字符串对象，根据大小选择编码
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">createRawStringObject</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">len</span><span class="p">);</span><span class="c1">// 创建一个 REDIS_ENCODING_RAW 编码的字符对象
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">createEmbeddedStringObject</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">len</span><span class="p">);</span><span class="c1">// 创建一个 REDIS_ENCODING_EMBSTR 编码的字符对象
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">dupStringObject</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">);</span> <span class="c1">// 复制一个字符串对象
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">isObjectRepresentableAsLongLong</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span> <span class="o">*</span><span class="n">llongval</span><span class="p">);</span> <span class="c1">// 检查对象的值是否为Long long
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">tryObjectEncoding</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">);</span> <span class="c1">// 尝试对字符串对象编码，以节约内存
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">getDecodedObject</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">);</span> <span class="c1">// 返回一个对象的编码版本
</span><span class="c1"></span><span class="n">size_t</span> <span class="nf">stringObjectLen</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">);</span> <span class="c1">// 返回字符串对象的字符串值的长度
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">createStringObjectFromLongLong</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">value</span><span class="p">);</span> <span class="c1">// 根据传入的值，创建一个字符串对象
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">createStringObjectFromLongDouble</span><span class="p">(</span><span class="kt">long</span> <span class="kt">double</span> <span class="n">value</span><span class="p">,</span> <span class="kt">int</span> <span class="n">humanfriendly</span><span class="p">);</span> <span class="c1">// 根据传入的值，创建一个字符串对象
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">createListObject</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span> <span class="c1">// 创建一个linkedlist编码的列表对象
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">createZiplistObject</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span> <span class="c1">// 创建一个ziplist编码的列表对象
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">createSetObject</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span> <span class="c1">// 创建一个ht编码的集合对象
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">createIntsetObject</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span> <span class="c1">// 创建一个intset编码的集合对象
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">createHashObject</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span> <span class="c1">// 创建一个ziplist编码的哈希对象
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">createZsetObject</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span> <span class="c1">// 创建一个skiplist编码的有序集合
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">createZsetZiplistObject</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span> <span class="c1">// 创建一个ziplist编码的有序集合
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">getLongFromObjectOrReply</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">,</span> <span class="kt">long</span> <span class="o">*</span><span class="n">target</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">msg</span><span class="p">);</span> <span class="c1">// 尝试从对象中获取Long类型值
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">checkType</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">,</span> <span class="kt">int</span> <span class="n">type</span><span class="p">);</span> <span class="c1">// 检查对象0的类型是否和type相同
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">getLongLongFromObjectOrReply</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span> <span class="o">*</span><span class="n">target</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">msg</span><span class="p">);</span> <span class="c1">// 尝试从对象中取出整数值
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">getDoubleFromObjectOrReply</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">,</span> <span class="kt">double</span> <span class="o">*</span><span class="n">target</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">msg</span><span class="p">);</span> <span class="c1">// 尝试从对象中取出double值
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">getLongLongFromObject</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span> <span class="o">*</span><span class="n">target</span><span class="p">);</span> <span class="c1">// 尝试从对象中获取整数值
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">getLongDoubleFromObject</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">double</span> <span class="o">*</span><span class="n">target</span><span class="p">);</span> <span class="c1">// 尝试从对象获取long double值
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">getLongDoubleFromObjectOrReply</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">double</span> <span class="o">*</span><span class="n">target</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">msg</span><span class="p">);</span> <span class="c1">// 尝试从对象获取long double值
</span><span class="c1"></span><span class="kt">char</span> <span class="o">*</span><span class="nf">strEncoding</span><span class="p">(</span><span class="kt">int</span> <span class="n">encoding</span><span class="p">);</span> <span class="c1">// 返回编码的字符串表示
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">compareStringObjects</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">b</span><span class="p">);</span> <span class="c1">// 二进制方式比较两个字符串对象
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">collateStringObjects</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">b</span><span class="p">);</span> <span class="c1">// 以collation方式比较两个字符串对象
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">equalStringObjects</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="n">robj</span> <span class="o">*</span><span class="n">b</span><span class="p">);</span> <span class="c1">// 判断是否相同两个字符串对象
</span><span class="c1"></span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="nf">estimateObjectIdleTime</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">);</span> <span class="c1">// 计算对象的闲置时间
</span></code></pre></td></tr></table>
</div>
</div><h3 id="对象的创建">对象的创建</h3>
<p>对象的创建都比较类似，一般创建底层数据结构，然后创建对象。然后初始化。</p>
<p>以string对象为例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 创建字符串对象
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">createStringObject</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 长度小于39时使用EMBSTR
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&lt;=</span> <span class="n">REDIS_ENCODING_EMBSTR_SIZE_LIMIT</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">createEmbeddedStringObject</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span><span class="n">len</span><span class="p">);</span>
    <span class="k">else</span>
        <span class="k">return</span> <span class="n">createRawStringObject</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span><span class="n">len</span><span class="p">);</span>
<span class="p">}</span>

 <span class="c1">// 创建一个embstr编码的字符串对象
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">createEmbeddedStringObject</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 直接分配一个连续空间长度为redis和字符串结构+字符串保存内存
</span><span class="c1"></span>    <span class="n">robj</span> <span class="o">*</span><span class="n">o</span> <span class="o">=</span> <span class="n">zmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">robj</span><span class="p">)</span><span class="o">+</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">sdshdr</span><span class="p">)</span><span class="o">+</span><span class="n">len</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
    <span class="k">struct</span> <span class="n">sdshdr</span> <span class="o">*</span><span class="n">sh</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">o</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// 找到字符串的起始位置
</span><span class="c1"></span>
    <span class="c1">// 初始化字符串
</span><span class="c1"></span>    <span class="n">o</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">=</span> <span class="n">REDIS_STRING</span><span class="p">;</span>
    <span class="n">o</span><span class="o">-&gt;</span><span class="n">encoding</span> <span class="o">=</span> <span class="n">REDIS_ENCODING_EMBSTR</span><span class="p">;</span>
    <span class="n">o</span><span class="o">-&gt;</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">sh</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
    <span class="n">o</span><span class="o">-&gt;</span><span class="n">refcount</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">o</span><span class="o">-&gt;</span><span class="n">lru</span> <span class="o">=</span> <span class="n">LRU_CLOCK</span><span class="p">();</span>

    <span class="n">sh</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
    <span class="n">sh</span><span class="o">-&gt;</span><span class="n">free</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">memcpy</span><span class="p">(</span><span class="n">sh</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">,</span><span class="n">ptr</span><span class="p">,</span><span class="n">len</span><span class="p">);</span>
        <span class="n">sh</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">[</span><span class="n">len</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">sh</span><span class="o">-&gt;</span><span class="n">buf</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">len</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">o</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 创建一个 REDIS_ENCODING_RAW 编码的字符对象
</span><span class="c1">// 对象的指针指向一个 sds 结构
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">createRawStringObject</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
  	<span class="c1">// sdsnewlen新建字符串
</span><span class="c1"></span>    <span class="k">return</span> <span class="n">createObject</span><span class="p">(</span><span class="n">REDIS_STRING</span><span class="p">,</span><span class="n">sdsnewlen</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span><span class="n">len</span><span class="p">));</span>
<span class="p">}</span>

<span class="c1">// 创建一个新对象
</span><span class="c1"></span><span class="n">robj</span> <span class="o">*</span><span class="nf">createObject</span><span class="p">(</span><span class="kt">int</span> <span class="n">type</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span>

    <span class="n">robj</span> <span class="o">*</span><span class="n">o</span> <span class="o">=</span> <span class="n">zmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">o</span><span class="p">));</span>

    <span class="n">o</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">=</span> <span class="n">type</span><span class="p">;</span>
    <span class="n">o</span><span class="o">-&gt;</span><span class="n">encoding</span> <span class="o">=</span> <span class="n">REDIS_ENCODING_RAW</span><span class="p">;</span>
    <span class="n">o</span><span class="o">-&gt;</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span>
    <span class="n">o</span><span class="o">-&gt;</span><span class="n">refcount</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="cm">/* Set the LRU to the current lruclock (minutes resolution). */</span>
    <span class="n">o</span><span class="o">-&gt;</span><span class="n">lru</span> <span class="o">=</span> <span class="n">LRU_CLOCK</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">o</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="对象的释放">对象的释放</h3>
<p>以字符串对象为例子，redis采用引用计数进行对象的释放，当对象不再使用时调用decrRefCount减少引用计数，在引用计数减到0后，释放对象。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">decrRefCount</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">refcount</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">redisPanic</span><span class="p">(</span><span class="s">&#34;decrRefCount against refcount &lt;= 0&#34;</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">refcount</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">switch</span><span class="p">(</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 根据类型释放 各个函数会调用各自的释放函数释放
</span><span class="c1"></span>        <span class="k">case</span> <span class="nl">REDIS_STRING</span><span class="p">:</span> <span class="n">freeStringObject</span><span class="p">(</span><span class="n">o</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="nl">REDIS_LIST</span><span class="p">:</span> <span class="n">freeListObject</span><span class="p">(</span><span class="n">o</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="nl">REDIS_SET</span><span class="p">:</span> <span class="n">freeSetObject</span><span class="p">(</span><span class="n">o</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="nl">REDIS_ZSET</span><span class="p">:</span> <span class="n">freeZsetObject</span><span class="p">(</span><span class="n">o</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="nl">REDIS_HASH</span><span class="p">:</span> <span class="n">freeHashObject</span><span class="p">(</span><span class="n">o</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
        <span class="k">default</span><span class="o">:</span> <span class="n">redisPanic</span><span class="p">(</span><span class="s">&#34;Unknown object type&#34;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">zfree</span><span class="p">(</span><span class="n">o</span><span class="p">);</span> <span class="c1">// 释放对象内存
</span><span class="c1"></span>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">o</span><span class="o">-&gt;</span><span class="n">refcount</span><span class="o">--</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 如果时RAW编码调用sdsfree释放，否则在释放robj时就释放了，因为采用了embstr编码
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">freeStringObject</span><span class="p">(</span><span class="n">robj</span> <span class="o">*</span><span class="n">o</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">encoding</span> <span class="o">==</span> <span class="n">REDIS_ENCODING_RAW</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sdsfree</span><span class="p">(</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="字符串对象">字符串对象</h2>
<p>字符串编码可以是Int、raw或者embstr。</p>
<p>字符串对象为整数值，可以用long long类型表示，则为int编码。</p>
<p>字符串对象为浮点数，能够用long double类型表示，使用embstr还是raw根据长度来定。</p>
<p>如果一个字符串对象小于等于REDIS_ENCODING_EMBSTR_SIZE_LIMIT则用embstr编码。</p>
<p>大于REDIS_ENCODING_EMBSTR_SIZE_LIMIT采用raw编码。</p>
<p>int编码在执行一个会将int转变为字符串值时，编码变为raw。</p>
<p>embstr为只读的，当尝试修改时会转换为raw。</p>
<h2 id="列表对象">列表对象</h2>
<p>列表对象编码是ziplist或者linkedlist。</p>
<p>满足以下两个条件使用ziplist：</p>
<ul>
<li>保存的字符串长度都小于64</li>
<li>元素数量小于512</li>
</ul>
<h2 id="哈希对象">哈希对象</h2>
<p>哈希对象编码是ziplist或者hashtable。</p>
<p>如果采用的是ziplist那么添加键值时，先将键推入压缩列表表尾部，再将值推入压缩列表表尾。</p>
<p>如果采用hashtable编码，那么字典的键就是键值对的键的字符串对象，字典的值时键值对的值。</p>
<p>满足以下两个条件使用ziplist：</p>
<ul>
<li>保存的字符串长度都小于64</li>
<li>元素数量小于512</li>
</ul>
<h2 id="集合对象">集合对象</h2>
<p>集合的编码是inset或者hashtable</p>
<p>满足以下条件使用intset编码：</p>
<ul>
<li>集合对象保存的值都为整数</li>
<li>集合对象保存的元素不超过512个</li>
</ul>
<h2 id="有序集合对象">有序集合对象</h2>
<p>有序集合编码是ziplist或者skiplist。</p>
<p>skiplist编码使用一个zskiplist和dict作为底层实现。zskiplist按照分值从大到小保存集合元素。dict保存从成员到分值的映射。</p>
<p>满足以下条件使用ziplist编码：</p>
<ul>
<li>有序集合保存的元素小于128个。</li>
<li>有序集合保存的所有元素成员的长度都小于64字节。</li>
</ul>
<h2 id="命令">命令</h2>
<p>对象的命令处理在redis.h中。
执行命令之前会检查对象的类型，是否能够执行该命令。
如果能就调用对象的命令处理函数,否则返回错误。</p>
<p>在调用了对象的命令处理函数之后，则根据命令具体的编码，去选择使用什么底层数据结构的接口来实现。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c">
<span class="cm">/* Commands prototypes */</span>
<span class="kt">void</span> <span class="nf">authCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">pingCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">echoCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">setCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">setnxCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">setexCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">psetexCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">getCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">delCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">existsCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">setbitCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">getbitCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">setrangeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">getrangeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">incrCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">decrCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">incrbyCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">decrbyCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">incrbyfloatCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">selectCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">randomkeyCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">keysCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">scanCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">dbsizeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">lastsaveCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">saveCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">bgsaveCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">bgrewriteaofCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">shutdownCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">moveCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">renameCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">renamenxCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">lpushCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">rpushCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">lpushxCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">rpushxCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">linsertCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">lpopCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">rpopCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">llenCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">lindexCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">lrangeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">ltrimCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">typeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">lsetCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">saddCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">sremCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">smoveCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">sismemberCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">scardCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">spopCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">srandmemberCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">sinterCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">sinterstoreCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">sunionCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">sunionstoreCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">sdiffCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">sdiffstoreCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">sscanCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">syncCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">flushdbCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">flushallCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">sortCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">lremCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">rpoplpushCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">infoCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">mgetCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">monitorCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">expireCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">expireatCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">pexpireCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">pexpireatCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">getsetCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">ttlCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">pttlCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">persistCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">slaveofCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">debugCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">msetCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">msetnxCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zaddCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zincrbyCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zrangeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zrangebyscoreCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zrevrangebyscoreCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zrangebylexCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zrevrangebylexCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zcountCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zlexcountCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zrevrangeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zcardCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zremCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zscoreCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zremrangebyscoreCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zremrangebylexCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">multiCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">execCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">discardCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">blpopCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">brpopCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">brpoplpushCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">appendCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">strlenCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zrankCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zrevrankCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">hsetCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">hsetnxCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">hgetCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">hmsetCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">hmgetCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">hdelCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">hlenCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zremrangebyrankCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zunionstoreCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zinterstoreCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">zscanCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">hkeysCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">hvalsCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">hgetallCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">hexistsCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">hscanCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">configCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">hincrbyCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">hincrbyfloatCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">subscribeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">unsubscribeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">psubscribeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">punsubscribeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">publishCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">pubsubCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">watchCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">unwatchCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">clusterCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">restoreCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">migrateCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">askingCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">readonlyCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">readwriteCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">dumpCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">objectCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">clientCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">evalCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">evalShaCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">scriptCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">timeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">bitopCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">bitcountCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">bitposCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">replconfCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">waitCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">pfselftestCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">pfaddCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">pfcountCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">pfmergeCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">pfdebugCommand</span><span class="p">(</span><span class="n">redisClient</span> <span class="o">*</span><span class="n">c</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>redis源码阅读-压缩列表ziplist</title>
    <link>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8ziplist/</link>
    <pubDate>Sat, 08 Jul 2017 21:49:02 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://coderyang.com/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8ziplist/</guid>
    <description><![CDATA[<p>压缩列表时列表键和哈希键的底层实现之一。当一个列表键只包含少量列表项，并且每个列表项要么是小整数，要么是长度比较短的字符串，那么Redis就会使用压缩列表来做列表键的底层实现。</p>
<h2 id="压缩列表的构成">压缩列表的构成</h2>
<p>压缩列表是redis为了节约内存而开发的，由一系列特殊编码的连续内存块组成的顺序型数据结构。一个压缩列表可以包含任意多个节点，每个节点可以保存一个字节数组或者一个整数组。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">《redis设计与实现》
空白 ziplist 示例图

area        |&lt;---- ziplist header ----&gt;|&lt;-- end --&gt;|

size          4 bytes   4 bytes 2 bytes  1 byte
            +---------+--------+-------+-----------+
component   | zlbytes | zltail | zllen | zlend     |
            |         |        |       |           |
value       |  1011   |  1010  |   0   | 1111 1111 |
            +---------+--------+-------+-----------+
                                       ^
                                       |
                               ZIPLIST_ENTRY_HEAD
                                       &amp;
address                        ZIPLIST_ENTRY_TAIL
                                       &amp;
                               ZIPLIST_ENTRY_END

非空 ziplist 示例图

area        |&lt;---- ziplist header ----&gt;|&lt;----------- entries -------------&gt;|&lt;-end-&gt;|

size          4 bytes  4 bytes  2 bytes    ?        ?        ?        ?     1 byte
            +---------+--------+-------+--------+--------+--------+--------+-------+
component   | zlbytes | zltail | zllen | entry1 | entry2 |  ...   | entryN | zlend |
            +---------+--------+-------+--------+--------+--------+--------+-------+
                                       ^                          ^        ^
address                                |                          |        |
                                ZIPLIST_ENTRY_HEAD                |   ZIPLIST_ENTRY_END
                                                                  |
                                                        ZIPLIST_ENTRY_TAIL
</code></pre></td></tr></table>
</div>
</div><p>zlbytes记录整个压缩列表占用的字节数。</p>
<p>zltail记录压缩列表尾节点距离压缩列表的起始地址有多少字节。</p>
<p>zzlen记录压缩列表包含的节点数量。</p>
<p>entryX列表节点，数量不定。</p>
<p>zlend特殊值0xff，标记压缩列表末端。</p>
<h2 id="压缩列表节点的构成">压缩列表节点的构成</h2>
<p>每个压缩列表可以保存一个字节数组或者一个整数值，字节数组可以有三种长度：</p>
<ol>
<li>长度小于等于63字节的字节数组</li>
<li>长度小于等于16383字节的字节数组</li>
<li>长度小于等于4294967295字节的字节数组</li>
</ol>
<p>每个压缩列表节点由previous_entry_length、encoding、content三个部分组成。</p>
<h3 id="previous_entry_length">previous_entry_length</h3>
<p>节点previous_entry_length属性以字节为单位，记录一个压缩列表节点的长度。previous_entry_length属性的长度可以是1字节或者5字节：</p>
<ul>
<li>如果前一节点的长度小于254字节，长度为1,前一节点长度保存在这个字节里面。</li>
<li>如果前一节点的长度大于 等于254字节，长度为5：属性的第一个字节被设置为0xfe，而之后的四个字节用于保存前一 节点的长度。</li>
</ul>
<h3 id="encoding">encoding</h3>
<p>记录节点的content属性所保存数据类型以及长度：</p>
<ul>
<li>一字节、两字节或者五字节长，值的最高位为00、01或者10的是 字节数组编码：这种编码表示节点的content属性保存着字节数组，数组的长度由编码除去最高两位之后的其他位记录</li>
<li>一字节长，值的最高位以11开头的是整数编码：这种编码表示节点的content属性保存着整数数值，整数值的类型和长度由编码除去最高两位之后的其他位记录。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">编码</th>
<th>编码长度</th>
<th>content属性保存的值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">00bbbbbb</td>
<td>1 bytes</td>
<td>&lt;= 63 bytes的字节数组</td>
</tr>
<tr>
<td style="text-align:left">01bbbbbb xxxxxxxx</td>
<td>2 bytes</td>
<td>&lt;= 16383 bytes字节数组</td>
</tr>
<tr>
<td style="text-align:left">10**__** aaaaaaaa bbbbbbbb cccccccc dddddddd</td>
<td>5 bytes</td>
<td>&lt;= 4294967295 bytes字节数组</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>编码</th>
<th>编码长度</th>
<th>content属性保存的值</th>
</tr>
</thead>
<tbody>
<tr>
<td>11000000</td>
<td>1</td>
<td>int16_t（2 bytes）类型整数</td>
</tr>
<tr>
<td>11010000</td>
<td>1</td>
<td>int32_t（4 bytes）类型整数</td>
</tr>
<tr>
<td>11100000</td>
<td>1</td>
<td>int64_t（8 bytes）类型整数</td>
</tr>
<tr>
<td>11110000</td>
<td>1</td>
<td>24位有符整数</td>
</tr>
<tr>
<td>11111110</td>
<td>1</td>
<td>8位有符整数</td>
</tr>
<tr>
<td>1111xxxx</td>
<td>1</td>
<td>0~12</td>
</tr>
</tbody>
</table>
<h3 id="content">content</h3>
<p>节点的content属性负责保存节点的值，节点值可以是一个字节数组或者整数，值的类型和长度由节点的encoding属性决定。</p>
<h2 id="连锁更新">连锁更新</h2>
<p>previous_entry_length属性的长度可以是1字节或者5字节：</p>
<ul>
<li>如果前一节点的长度小于254字节，长度为1,前一节点长度保存在这个字节里面。</li>
<li>如果前一节点的长度大于 等于254字节，长度为5：属性的第一个字节被设置为0xfe，而之后的四个字节用于保存前一 节点的长度。</li>
</ul>
<p>那么一种情况：在压缩列表中，有多个连续的长度介于250字节到253字节之间的节点e1至eN。</p>
<p>在e1前插入一个大于254字节的节点，此时要更新e1的previous_entry_length属性，由于前一个节点大于254，那么要扩容，重新设置好压缩列表。之后又发现e2需要更新previous_entry_length属性，依旧大于254。产生了连锁反应。</p>
<p>同理删除节点也可能发生这种情况。</p>
<h2 id="压缩列表api">压缩列表API</h2>
<h3 id="创建空ziplist">创建空ziplist</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 创建一个空的ziplist
</span><span class="c1"></span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">ziplistNew</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ZIPLIST_HEADER_SIZE 是 ziplist 表头的大小
</span><span class="c1"></span>    <span class="c1">// 1 字节是表末端 ZIP_END 的大小
</span><span class="c1"></span>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">ZIPLIST_HEADER_SIZE</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">zl</span> <span class="o">=</span> <span class="n">zmalloc</span><span class="p">(</span><span class="n">bytes</span><span class="p">);</span>
    <span class="n">ZIPLIST_BYTES</span><span class="p">(</span><span class="n">zl</span><span class="p">)</span> <span class="o">=</span> <span class="n">intrev32ifbe</span><span class="p">(</span><span class="n">bytes</span><span class="p">);</span> <span class="c1">// 设置ziplist所占字节数，如有必要进行大小端转换
</span><span class="c1"></span>    <span class="n">ZIPLIST_TAIL_OFFSET</span><span class="p">(</span><span class="n">zl</span><span class="p">)</span> <span class="o">=</span> <span class="n">intrev32ifbe</span><span class="p">(</span><span class="n">ZIPLIST_HEADER_SIZE</span><span class="p">);</span> <span class="c1">// 设定尾节点相对头部的偏移量
</span><span class="c1"></span>    <span class="n">ZIPLIST_LENGTH</span><span class="p">(</span><span class="n">zl</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 设定ziplist的节点数
</span><span class="c1"></span>    <span class="n">zl</span><span class="p">[</span><span class="n">bytes</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">ZIP_END</span><span class="p">;</span> <span class="c1">// 设定尾部字节位0xff
</span><span class="c1"></span>    <span class="k">return</span> <span class="n">zl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="插入节点">插入节点</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">ziplistInsert</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">zl</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">slen</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">__ziplistInsert</span><span class="p">(</span><span class="n">zl</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">slen</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 将长度为slen的字符串s插入到z1中，位置为p前
</span><span class="c1"></span><span class="k">static</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">__ziplistInsert</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">zl</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">slen</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">size_t</span> <span class="n">curlen</span> <span class="o">=</span> <span class="n">intrev32ifbe</span><span class="p">(</span><span class="n">ZIPLIST_BYTES</span><span class="p">(</span><span class="n">zl</span><span class="p">)),</span> <span class="n">reqlen</span><span class="p">;</span> <span class="c1">// 当前ziplist长度，插入后的长度
</span><span class="c1"></span>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">prevlensize</span><span class="p">,</span> <span class="n">prevlen</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 前置节点长度和编码该长度所需要的长度
</span><span class="c1"></span>    <span class="n">size_t</span> <span class="n">offset</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">nextdiff</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">encoding</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">123456789</span><span class="p">;</span> <span class="cm">/* initialized to avoid warning. Using a value
</span><span class="cm">                                    that is easy to see if for some reason
</span><span class="cm">                                    we use it uninitialized. */</span>
    <span class="n">zlentry</span> <span class="n">tail</span><span class="p">;</span>

    <span class="cm">/* Find out prevlen for the entry that is inserted. */</span>
    <span class="c1">// 找到待插入节点的前置节点长度
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">ZIP_END</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 不为末尾解码长度
</span><span class="c1"></span>        <span class="n">ZIP_DECODE_PREVLEN</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">prevlensize</span><span class="p">,</span> <span class="n">prevlen</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// 指向末尾则表示ziplist为空
</span><span class="c1"></span>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">ptail</span> <span class="o">=</span> <span class="n">ZIPLIST_ENTRY_TAIL</span><span class="p">(</span><span class="n">zl</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">ptail</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">ZIP_END</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 计算尾节点长度
</span><span class="c1"></span>            <span class="n">prevlen</span> <span class="o">=</span> <span class="n">zipRawEntryLength</span><span class="p">(</span><span class="n">ptail</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 判断编码是否为整数
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">zipTryEncoding</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">slen</span><span class="p">,</span><span class="o">&amp;</span><span class="n">value</span><span class="p">,</span><span class="o">&amp;</span><span class="n">encoding</span><span class="p">))</span> <span class="p">{</span>
        <span class="c1">// 该节点编码为整数，通过encoding来获取编码长度
</span><span class="c1"></span>        <span class="n">reqlen</span> <span class="o">=</span> <span class="n">zipIntSize</span><span class="p">(</span><span class="n">encoding</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// 使用字符串来编码节点
</span><span class="c1"></span>        <span class="n">reqlen</span> <span class="o">=</span> <span class="n">slen</span><span class="p">;</span>
    <span class="p">}</span>
     <span class="c1">// 计算前置节点长度所需的大小
</span><span class="c1"></span>    <span class="n">reqlen</span> <span class="o">+=</span> <span class="n">zipPrevEncodeLength</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">prevlen</span><span class="p">);</span>
    <span class="c1">// 计算编码当前节点值所需要的大小
</span><span class="c1"></span>    <span class="n">reqlen</span> <span class="o">+=</span> <span class="n">zipEncodeLength</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">encoding</span><span class="p">,</span><span class="n">slen</span><span class="p">);</span>

    <span class="c1">// 保存新旧编码之间的字节差
</span><span class="c1"></span>    <span class="n">nextdiff</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">ZIP_END</span><span class="p">)</span> <span class="o">?</span> <span class="n">zipPrevLenByteDiff</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">reqlen</span><span class="p">)</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">offset</span> <span class="o">=</span> <span class="n">p</span><span class="o">-</span><span class="n">zl</span><span class="p">;</span> <span class="c1">// 保存偏移
</span><span class="c1"></span>    <span class="c1">// 重分配长度
</span><span class="c1"></span>    <span class="n">zl</span> <span class="o">=</span> <span class="n">ziplistResize</span><span class="p">(</span><span class="n">zl</span><span class="p">,</span><span class="n">curlen</span><span class="o">+</span><span class="n">reqlen</span><span class="o">+</span><span class="n">nextdiff</span><span class="p">);</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">zl</span><span class="o">+</span><span class="n">offset</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">ZIP_END</span><span class="p">)</span> <span class="p">{</span>
        
        <span class="c1">// 移动元素，为新元素腾出位置
</span><span class="c1"></span>        <span class="n">memmove</span><span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="n">reqlen</span><span class="p">,</span><span class="n">p</span><span class="o">-</span><span class="n">nextdiff</span><span class="p">,</span><span class="n">curlen</span><span class="o">-</span><span class="n">offset</span><span class="o">-</span><span class="mi">1</span><span class="o">+</span><span class="n">nextdiff</span><span class="p">);</span>

        <span class="c1">// 将新节点的长度编码到后置节点
</span><span class="c1"></span>        <span class="n">zipPrevEncodeLength</span><span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="n">reqlen</span><span class="p">,</span><span class="n">reqlen</span><span class="p">);</span>

        <span class="c1">// 更新尾部的偏移量
</span><span class="c1"></span>        <span class="n">ZIPLIST_TAIL_OFFSET</span><span class="p">(</span><span class="n">zl</span><span class="p">)</span> <span class="o">=</span>
            <span class="n">intrev32ifbe</span><span class="p">(</span><span class="n">intrev32ifbe</span><span class="p">(</span><span class="n">ZIPLIST_TAIL_OFFSET</span><span class="p">(</span><span class="n">zl</span><span class="p">))</span><span class="o">+</span><span class="n">reqlen</span><span class="p">);</span>

        <span class="cm">/* When the tail contains more than one entry, we need to take
</span><span class="cm">         * &#34;nextdiff&#34; in account as well. Otherwise, a change in the
</span><span class="cm">         * size of prevlen doesn&#39;t have an effect on the *tail* offset. */</span>
        <span class="n">tail</span> <span class="o">=</span> <span class="n">zipEntry</span><span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="n">reqlen</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">reqlen</span><span class="o">+</span><span class="n">tail</span><span class="p">.</span><span class="n">headersize</span><span class="o">+</span><span class="n">tail</span><span class="p">.</span><span class="n">len</span><span class="p">]</span> <span class="o">!=</span> <span class="n">ZIP_END</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">ZIPLIST_TAIL_OFFSET</span><span class="p">(</span><span class="n">zl</span><span class="p">)</span> <span class="o">=</span>
                <span class="n">intrev32ifbe</span><span class="p">(</span><span class="n">intrev32ifbe</span><span class="p">(</span><span class="n">ZIPLIST_TAIL_OFFSET</span><span class="p">(</span><span class="n">zl</span><span class="p">))</span><span class="o">+</span><span class="n">nextdiff</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="cm">/* This element will be the new tail. */</span>
        <span class="n">ZIPLIST_TAIL_OFFSET</span><span class="p">(</span><span class="n">zl</span><span class="p">)</span> <span class="o">=</span> <span class="n">intrev32ifbe</span><span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="n">zl</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="cm">/* When nextdiff != 0, the raw length of the next entry has changed, so
</span><span class="cm">     * we need to cascade the update throughout the ziplist */</span>
    <span class="c1">// 判断是不是需要连锁更新
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">nextdiff</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">offset</span> <span class="o">=</span> <span class="n">p</span><span class="o">-</span><span class="n">zl</span><span class="p">;</span>
        <span class="n">zl</span> <span class="o">=</span> <span class="n">__ziplistCascadeUpdate</span><span class="p">(</span><span class="n">zl</span><span class="p">,</span><span class="n">p</span><span class="o">+</span><span class="n">reqlen</span><span class="p">);</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">zl</span><span class="o">+</span><span class="n">offset</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/* Write the entry */</span>
    <span class="c1">// 写入节点前置节点长度
</span><span class="c1"></span>    <span class="n">p</span> <span class="o">+=</span> <span class="n">zipPrevEncodeLength</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">prevlen</span><span class="p">);</span>
    <span class="c1">// 节点值的长度写入节点
</span><span class="c1"></span>    <span class="n">p</span> <span class="o">+=</span> <span class="n">zipEncodeLength</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">encoding</span><span class="p">,</span><span class="n">slen</span><span class="p">);</span>
    <span class="c1">// 写入节点值
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">ZIP_IS_STR</span><span class="p">(</span><span class="n">encoding</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">memcpy</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">slen</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">zipSaveInteger</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">value</span><span class="p">,</span><span class="n">encoding</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="c1">// 更新节点计数器
</span><span class="c1"></span>    <span class="n">ZIPLIST_INCR_LENGTH</span><span class="p">(</span><span class="n">zl</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">zl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="根据给定索引遍历列表并返回索引指定节点的指针">根据给定索引，遍历列表，并返回索引指定节点的指针。</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">ziplistIndex</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">zl</span><span class="p">,</span> <span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">prevlensize</span><span class="p">,</span> <span class="n">prevlen</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="c1">// index为负从尾部，正从头部
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">index</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="n">index</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="c1">// 获取尾部指针
</span><span class="c1"></span>        <span class="n">p</span> <span class="o">=</span> <span class="n">ZIPLIST_ENTRY_TAIL</span><span class="p">(</span><span class="n">zl</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">ZIP_END</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 解码前置节点长度
</span><span class="c1"></span>            <span class="n">ZIP_DECODE_PREVLEN</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">prevlensize</span><span class="p">,</span> <span class="n">prevlen</span><span class="p">);</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">prevlen</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">index</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">p</span> <span class="o">-=</span> <span class="n">prevlen</span><span class="p">;</span> <span class="c1">// 偏移
</span><span class="c1"></span>                <span class="c1">// 解码前置节点长度
</span><span class="c1"></span>                <span class="n">ZIP_DECODE_PREVLEN</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">prevlensize</span><span class="p">,</span> <span class="n">prevlen</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">ZIPLIST_ENTRY_HEAD</span><span class="p">(</span><span class="n">zl</span><span class="p">);</span> <span class="c1">// 头部
</span><span class="c1"></span>        <span class="k">while</span> <span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">ZIP_END</span> <span class="o">&amp;&amp;</span> <span class="n">index</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">p</span> <span class="o">+=</span> <span class="n">zipRawEntryLength</span><span class="p">(</span><span class="n">p</span><span class="p">);</span> <span class="c1">// 移动
</span><span class="c1"></span>        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 返回
</span><span class="c1"></span>    <span class="k">return</span> <span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">ZIP_END</span> <span class="o">||</span> <span class="n">index</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="nb">NULL</span> <span class="o">:</span> <span class="n">p</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="删除给定节点">删除给定节点</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">ziplistDelete</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">zl</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">**</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">size_t</span> <span class="n">offset</span> <span class="o">=</span> <span class="o">*</span><span class="n">p</span><span class="o">-</span><span class="n">zl</span><span class="p">;</span>
    <span class="n">zl</span> <span class="o">=</span> <span class="n">__ziplistDelete</span><span class="p">(</span><span class="n">zl</span><span class="p">,</span><span class="o">*</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="cm">/* Store pointer to current element in p, because ziplistDelete will
</span><span class="cm">     * do a realloc which might result in a different &#34;zl&#34;-pointer.
</span><span class="cm">     * When the delete direction is back to front, we might delete the last
</span><span class="cm">     * entry and end up with &#34;p&#34; pointing to ZIP_END, so check this. */</span>
    <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">zl</span><span class="o">+</span><span class="n">offset</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">zl</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">__ziplistDelete</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">zl</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">totlen</span><span class="p">,</span> <span class="n">deleted</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">size_t</span> <span class="n">offset</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">nextdiff</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">zlentry</span> <span class="n">first</span><span class="p">,</span> <span class="n">tail</span><span class="p">;</span>

    <span class="c1">// 计算被删除节点总共占用的内存字节数
</span><span class="c1"></span>    <span class="c1">// 删除的节点总数
</span><span class="c1"></span>    <span class="n">first</span> <span class="o">=</span> <span class="n">zipEntry</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">ZIP_END</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">p</span> <span class="o">+=</span> <span class="n">zipRawEntryLength</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
        <span class="n">deleted</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">totlen</span> <span class="o">=</span> <span class="n">p</span><span class="o">-</span><span class="n">first</span><span class="p">.</span><span class="n">p</span><span class="p">;</span> <span class="c1">// 被删除节点总共占用内存字节数
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">totlen</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">ZIP_END</span><span class="p">)</span> <span class="p">{</span>
            
            <span class="c1">// 计算新旧前置节点字节数差
</span><span class="c1"></span>            <span class="n">nextdiff</span> <span class="o">=</span> <span class="n">zipPrevLenByteDiff</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">first</span><span class="p">.</span><span class="n">prevrawlen</span><span class="p">);</span>
            <span class="n">p</span> <span class="o">-=</span> <span class="n">nextdiff</span><span class="p">;</span> <span class="c1">// 有需要将p后退nextdiff字节，为新header空出空间
</span><span class="c1"></span>            <span class="n">zipPrevEncodeLength</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">first</span><span class="p">.</span><span class="n">prevrawlen</span><span class="p">);</span> <span class="c1">// 将first的前置节点长度编码至p中
</span><span class="c1"></span>
            <span class="cm">/* Update offset for tail */</span>
            <span class="c1">// 更新尾部偏移
</span><span class="c1"></span>            <span class="n">ZIPLIST_TAIL_OFFSET</span><span class="p">(</span><span class="n">zl</span><span class="p">)</span> <span class="o">=</span>
                <span class="n">intrev32ifbe</span><span class="p">(</span><span class="n">intrev32ifbe</span><span class="p">(</span><span class="n">ZIPLIST_TAIL_OFFSET</span><span class="p">(</span><span class="n">zl</span><span class="p">))</span><span class="o">-</span><span class="n">totlen</span><span class="p">);</span>

            <span class="cm">/* When the tail contains more than one entry, we need to take
</span><span class="cm">             * &#34;nextdiff&#34; in account as well. Otherwise, a change in the
</span><span class="cm">             * size of prevlen doesn&#39;t have an effect on the *tail* offset. */</span>
            <span class="c1">// 被删除节点之后还存在节点，就需要将nextdiff计算在内
</span><span class="c1"></span>            <span class="n">tail</span> <span class="o">=</span> <span class="n">zipEntry</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">tail</span><span class="p">.</span><span class="n">headersize</span><span class="o">+</span><span class="n">tail</span><span class="p">.</span><span class="n">len</span><span class="p">]</span> <span class="o">!=</span> <span class="n">ZIP_END</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">ZIPLIST_TAIL_OFFSET</span><span class="p">(</span><span class="n">zl</span><span class="p">)</span> <span class="o">=</span>
                   <span class="n">intrev32ifbe</span><span class="p">(</span><span class="n">intrev32ifbe</span><span class="p">(</span><span class="n">ZIPLIST_TAIL_OFFSET</span><span class="p">(</span><span class="n">zl</span><span class="p">))</span><span class="o">+</span><span class="n">nextdiff</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="cm">/* Move tail to the front of the ziplist */</span>
            <span class="c1">// 将删除节点后面内存空间移动到删除节点之后
</span><span class="c1"></span>            <span class="n">memmove</span><span class="p">(</span><span class="n">first</span><span class="p">.</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="p">,</span>
                <span class="n">intrev32ifbe</span><span class="p">(</span><span class="n">ZIPLIST_BYTES</span><span class="p">(</span><span class="n">zl</span><span class="p">))</span><span class="o">-</span><span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="n">zl</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="cm">/* The entire tail was deleted. No need to move memory. */</span>
            <span class="c1">// 被删除节点后无节点，不需要移动
</span><span class="c1"></span>            <span class="n">ZIPLIST_TAIL_OFFSET</span><span class="p">(</span><span class="n">zl</span><span class="p">)</span> <span class="o">=</span>
                <span class="n">intrev32ifbe</span><span class="p">((</span><span class="n">first</span><span class="p">.</span><span class="n">p</span><span class="o">-</span><span class="n">zl</span><span class="p">)</span><span class="o">-</span><span class="n">first</span><span class="p">.</span><span class="n">prevrawlen</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="cm">/* Resize and update length */</span>
        <span class="c1">// 更新ziplist长度
</span><span class="c1"></span>        <span class="n">offset</span> <span class="o">=</span> <span class="n">first</span><span class="p">.</span><span class="n">p</span><span class="o">-</span><span class="n">zl</span><span class="p">;</span>
        <span class="n">zl</span> <span class="o">=</span> <span class="n">ziplistResize</span><span class="p">(</span><span class="n">zl</span><span class="p">,</span> <span class="n">intrev32ifbe</span><span class="p">(</span><span class="n">ZIPLIST_BYTES</span><span class="p">(</span><span class="n">zl</span><span class="p">))</span><span class="o">-</span><span class="n">totlen</span><span class="o">+</span><span class="n">nextdiff</span><span class="p">);</span>
        <span class="n">ZIPLIST_INCR_LENGTH</span><span class="p">(</span><span class="n">zl</span><span class="p">,</span><span class="o">-</span><span class="n">deleted</span><span class="p">);</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">zl</span><span class="o">+</span><span class="n">offset</span><span class="p">;</span>

        <span class="cm">/* When nextdiff != 0, the raw length of the next entry has changed, so
</span><span class="cm">         * we need to cascade the update throughout the ziplist */</span>
         <span class="c1">// 看看是否需要连锁更新
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">nextdiff</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
            <span class="n">zl</span> <span class="o">=</span> <span class="n">__ziplistCascadeUpdate</span><span class="p">(</span><span class="n">zl</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">zl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="小结">小结</h2>
<p>整体上ziplist设计出来的目的是为了节省内存，采用了在连续内存空间上建立一个双向列表来实现。</p>]]></description>
</item></channel>
</rss>
